// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"management-be/internal/repository/ent/migrate"

	"management-be/internal/repository/ent/department"
	"management-be/internal/repository/ent/match"
	"management-be/internal/repository/ent/matchplayer"
	"management-be/internal/repository/ent/player"
	"management-be/internal/repository/ent/playerstatistic"
	"management-be/internal/repository/ent/schemamigration"
	"management-be/internal/repository/ent/team"
	"management-be/internal/repository/ent/teamfee"
	"management-be/internal/repository/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// Match is the client for interacting with the Match builders.
	Match *MatchClient
	// MatchPlayer is the client for interacting with the MatchPlayer builders.
	MatchPlayer *MatchPlayerClient
	// Player is the client for interacting with the Player builders.
	Player *PlayerClient
	// PlayerStatistic is the client for interacting with the PlayerStatistic builders.
	PlayerStatistic *PlayerStatisticClient
	// SchemaMigration is the client for interacting with the SchemaMigration builders.
	SchemaMigration *SchemaMigrationClient
	// Team is the client for interacting with the Team builders.
	Team *TeamClient
	// TeamFee is the client for interacting with the TeamFee builders.
	TeamFee *TeamFeeClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Department = NewDepartmentClient(c.config)
	c.Match = NewMatchClient(c.config)
	c.MatchPlayer = NewMatchPlayerClient(c.config)
	c.Player = NewPlayerClient(c.config)
	c.PlayerStatistic = NewPlayerStatisticClient(c.config)
	c.SchemaMigration = NewSchemaMigrationClient(c.config)
	c.Team = NewTeamClient(c.config)
	c.TeamFee = NewTeamFeeClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Department:      NewDepartmentClient(cfg),
		Match:           NewMatchClient(cfg),
		MatchPlayer:     NewMatchPlayerClient(cfg),
		Player:          NewPlayerClient(cfg),
		PlayerStatistic: NewPlayerStatisticClient(cfg),
		SchemaMigration: NewSchemaMigrationClient(cfg),
		Team:            NewTeamClient(cfg),
		TeamFee:         NewTeamFeeClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Department:      NewDepartmentClient(cfg),
		Match:           NewMatchClient(cfg),
		MatchPlayer:     NewMatchPlayerClient(cfg),
		Player:          NewPlayerClient(cfg),
		PlayerStatistic: NewPlayerStatisticClient(cfg),
		SchemaMigration: NewSchemaMigrationClient(cfg),
		Team:            NewTeamClient(cfg),
		TeamFee:         NewTeamFeeClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Department.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Department, c.Match, c.MatchPlayer, c.Player, c.PlayerStatistic,
		c.SchemaMigration, c.Team, c.TeamFee, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Department, c.Match, c.MatchPlayer, c.Player, c.PlayerStatistic,
		c.SchemaMigration, c.Team, c.TeamFee, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DepartmentMutation:
		return c.Department.mutate(ctx, m)
	case *MatchMutation:
		return c.Match.mutate(ctx, m)
	case *MatchPlayerMutation:
		return c.MatchPlayer.mutate(ctx, m)
	case *PlayerMutation:
		return c.Player.mutate(ctx, m)
	case *PlayerStatisticMutation:
		return c.PlayerStatistic.mutate(ctx, m)
	case *SchemaMigrationMutation:
		return c.SchemaMigration.mutate(ctx, m)
	case *TeamMutation:
		return c.Team.mutate(ctx, m)
	case *TeamFeeMutation:
		return c.TeamFee.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `department.Intercept(f(g(h())))`.
func (c *DepartmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Department = append(c.inters.Department, interceptors...)
}

// Create returns a builder for creating a Department entity.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Department entities.
func (c *DepartmentClient) CreateBulk(builders ...*DepartmentCreate) *DepartmentCreateBulk {
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DepartmentClient) MapCreateBulk(slice any, setFunc func(*DepartmentCreate, int)) *DepartmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DepartmentCreateBulk{err: fmt.Errorf("calling to DepartmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DepartmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id int) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DepartmentClient) DeleteOneID(id int) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Query returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDepartment},
		inters: c.Interceptors(),
	}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id int) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id int) *Department {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlayers queries the players edge of a Department.
func (c *DepartmentClient) QueryPlayers(d *Department) *PlayerQuery {
	query := (&PlayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.PlayersTable, department.PlayersColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	return c.hooks.Department
}

// Interceptors returns the client interceptors.
func (c *DepartmentClient) Interceptors() []Interceptor {
	return c.inters.Department
}

func (c *DepartmentClient) mutate(ctx context.Context, m *DepartmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Department mutation op: %q", m.Op())
	}
}

// MatchClient is a client for the Match schema.
type MatchClient struct {
	config
}

// NewMatchClient returns a client for the Match from the given config.
func NewMatchClient(c config) *MatchClient {
	return &MatchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `match.Hooks(f(g(h())))`.
func (c *MatchClient) Use(hooks ...Hook) {
	c.hooks.Match = append(c.hooks.Match, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `match.Intercept(f(g(h())))`.
func (c *MatchClient) Intercept(interceptors ...Interceptor) {
	c.inters.Match = append(c.inters.Match, interceptors...)
}

// Create returns a builder for creating a Match entity.
func (c *MatchClient) Create() *MatchCreate {
	mutation := newMatchMutation(c.config, OpCreate)
	return &MatchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Match entities.
func (c *MatchClient) CreateBulk(builders ...*MatchCreate) *MatchCreateBulk {
	return &MatchCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MatchClient) MapCreateBulk(slice any, setFunc func(*MatchCreate, int)) *MatchCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MatchCreateBulk{err: fmt.Errorf("calling to MatchClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MatchCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MatchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Match.
func (c *MatchClient) Update() *MatchUpdate {
	mutation := newMatchMutation(c.config, OpUpdate)
	return &MatchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MatchClient) UpdateOne(m *Match) *MatchUpdateOne {
	mutation := newMatchMutation(c.config, OpUpdateOne, withMatch(m))
	return &MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MatchClient) UpdateOneID(id int) *MatchUpdateOne {
	mutation := newMatchMutation(c.config, OpUpdateOne, withMatchID(id))
	return &MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Match.
func (c *MatchClient) Delete() *MatchDelete {
	mutation := newMatchMutation(c.config, OpDelete)
	return &MatchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MatchClient) DeleteOne(m *Match) *MatchDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MatchClient) DeleteOneID(id int) *MatchDeleteOne {
	builder := c.Delete().Where(match.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MatchDeleteOne{builder}
}

// Query returns a query builder for Match.
func (c *MatchClient) Query() *MatchQuery {
	return &MatchQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMatch},
		inters: c.Interceptors(),
	}
}

// Get returns a Match entity by its id.
func (c *MatchClient) Get(ctx context.Context, id int) (*Match, error) {
	return c.Query().Where(match.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MatchClient) GetX(ctx context.Context, id int) *Match {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMatchPlayers queries the match_players edge of a Match.
func (c *MatchClient) QueryMatchPlayers(m *Match) *MatchPlayerQuery {
	query := (&MatchPlayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(matchplayer.Table, matchplayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, match.MatchPlayersTable, match.MatchPlayersColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeam queries the team edge of a Match.
func (c *MatchClient) QueryTeam(m *Match) *TeamQuery {
	query := (&TeamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, match.TeamTable, match.TeamColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MatchClient) Hooks() []Hook {
	return c.hooks.Match
}

// Interceptors returns the client interceptors.
func (c *MatchClient) Interceptors() []Interceptor {
	return c.inters.Match
}

func (c *MatchClient) mutate(ctx context.Context, m *MatchMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MatchCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MatchUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MatchDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Match mutation op: %q", m.Op())
	}
}

// MatchPlayerClient is a client for the MatchPlayer schema.
type MatchPlayerClient struct {
	config
}

// NewMatchPlayerClient returns a client for the MatchPlayer from the given config.
func NewMatchPlayerClient(c config) *MatchPlayerClient {
	return &MatchPlayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `matchplayer.Hooks(f(g(h())))`.
func (c *MatchPlayerClient) Use(hooks ...Hook) {
	c.hooks.MatchPlayer = append(c.hooks.MatchPlayer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `matchplayer.Intercept(f(g(h())))`.
func (c *MatchPlayerClient) Intercept(interceptors ...Interceptor) {
	c.inters.MatchPlayer = append(c.inters.MatchPlayer, interceptors...)
}

// Create returns a builder for creating a MatchPlayer entity.
func (c *MatchPlayerClient) Create() *MatchPlayerCreate {
	mutation := newMatchPlayerMutation(c.config, OpCreate)
	return &MatchPlayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MatchPlayer entities.
func (c *MatchPlayerClient) CreateBulk(builders ...*MatchPlayerCreate) *MatchPlayerCreateBulk {
	return &MatchPlayerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MatchPlayerClient) MapCreateBulk(slice any, setFunc func(*MatchPlayerCreate, int)) *MatchPlayerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MatchPlayerCreateBulk{err: fmt.Errorf("calling to MatchPlayerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MatchPlayerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MatchPlayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MatchPlayer.
func (c *MatchPlayerClient) Update() *MatchPlayerUpdate {
	mutation := newMatchPlayerMutation(c.config, OpUpdate)
	return &MatchPlayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MatchPlayerClient) UpdateOne(mp *MatchPlayer) *MatchPlayerUpdateOne {
	mutation := newMatchPlayerMutation(c.config, OpUpdateOne, withMatchPlayer(mp))
	return &MatchPlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MatchPlayerClient) UpdateOneID(id int) *MatchPlayerUpdateOne {
	mutation := newMatchPlayerMutation(c.config, OpUpdateOne, withMatchPlayerID(id))
	return &MatchPlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MatchPlayer.
func (c *MatchPlayerClient) Delete() *MatchPlayerDelete {
	mutation := newMatchPlayerMutation(c.config, OpDelete)
	return &MatchPlayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MatchPlayerClient) DeleteOne(mp *MatchPlayer) *MatchPlayerDeleteOne {
	return c.DeleteOneID(mp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MatchPlayerClient) DeleteOneID(id int) *MatchPlayerDeleteOne {
	builder := c.Delete().Where(matchplayer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MatchPlayerDeleteOne{builder}
}

// Query returns a query builder for MatchPlayer.
func (c *MatchPlayerClient) Query() *MatchPlayerQuery {
	return &MatchPlayerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMatchPlayer},
		inters: c.Interceptors(),
	}
}

// Get returns a MatchPlayer entity by its id.
func (c *MatchPlayerClient) Get(ctx context.Context, id int) (*MatchPlayer, error) {
	return c.Query().Where(matchplayer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MatchPlayerClient) GetX(ctx context.Context, id int) *MatchPlayer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMatch queries the match edge of a MatchPlayer.
func (c *MatchPlayerClient) QueryMatch(mp *MatchPlayer) *MatchQuery {
	query := (&MatchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(matchplayer.Table, matchplayer.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, matchplayer.MatchTable, matchplayer.MatchColumn),
		)
		fromV = sqlgraph.Neighbors(mp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayer queries the player edge of a MatchPlayer.
func (c *MatchPlayerClient) QueryPlayer(mp *MatchPlayer) *PlayerQuery {
	query := (&PlayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(matchplayer.Table, matchplayer.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, matchplayer.PlayerTable, matchplayer.PlayerColumn),
		)
		fromV = sqlgraph.Neighbors(mp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MatchPlayerClient) Hooks() []Hook {
	return c.hooks.MatchPlayer
}

// Interceptors returns the client interceptors.
func (c *MatchPlayerClient) Interceptors() []Interceptor {
	return c.inters.MatchPlayer
}

func (c *MatchPlayerClient) mutate(ctx context.Context, m *MatchPlayerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MatchPlayerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MatchPlayerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MatchPlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MatchPlayerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MatchPlayer mutation op: %q", m.Op())
	}
}

// PlayerClient is a client for the Player schema.
type PlayerClient struct {
	config
}

// NewPlayerClient returns a client for the Player from the given config.
func NewPlayerClient(c config) *PlayerClient {
	return &PlayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `player.Hooks(f(g(h())))`.
func (c *PlayerClient) Use(hooks ...Hook) {
	c.hooks.Player = append(c.hooks.Player, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `player.Intercept(f(g(h())))`.
func (c *PlayerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Player = append(c.inters.Player, interceptors...)
}

// Create returns a builder for creating a Player entity.
func (c *PlayerClient) Create() *PlayerCreate {
	mutation := newPlayerMutation(c.config, OpCreate)
	return &PlayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Player entities.
func (c *PlayerClient) CreateBulk(builders ...*PlayerCreate) *PlayerCreateBulk {
	return &PlayerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlayerClient) MapCreateBulk(slice any, setFunc func(*PlayerCreate, int)) *PlayerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlayerCreateBulk{err: fmt.Errorf("calling to PlayerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlayerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Player.
func (c *PlayerClient) Update() *PlayerUpdate {
	mutation := newPlayerMutation(c.config, OpUpdate)
	return &PlayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerClient) UpdateOne(pl *Player) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayer(pl))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerClient) UpdateOneID(id int) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayerID(id))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Player.
func (c *PlayerClient) Delete() *PlayerDelete {
	mutation := newPlayerMutation(c.config, OpDelete)
	return &PlayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayerClient) DeleteOne(pl *Player) *PlayerDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlayerClient) DeleteOneID(id int) *PlayerDeleteOne {
	builder := c.Delete().Where(player.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerDeleteOne{builder}
}

// Query returns a query builder for Player.
func (c *PlayerClient) Query() *PlayerQuery {
	return &PlayerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlayer},
		inters: c.Interceptors(),
	}
}

// Get returns a Player entity by its id.
func (c *PlayerClient) Get(ctx context.Context, id int) (*Player, error) {
	return c.Query().Where(player.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerClient) GetX(ctx context.Context, id int) *Player {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMatchPlayers queries the match_players edge of a Player.
func (c *PlayerClient) QueryMatchPlayers(pl *Player) *MatchPlayerQuery {
	query := (&MatchPlayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(matchplayer.Table, matchplayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, player.MatchPlayersTable, player.MatchPlayersColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayerStatistic queries the player_statistic edge of a Player.
func (c *PlayerClient) QueryPlayerStatistic(pl *Player) *PlayerStatisticQuery {
	query := (&PlayerStatisticClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(playerstatistic.Table, playerstatistic.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, player.PlayerStatisticTable, player.PlayerStatisticColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartment queries the department edge of a Player.
func (c *PlayerClient) QueryDepartment(pl *Player) *DepartmentQuery {
	query := (&DepartmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, player.DepartmentTable, player.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerClient) Hooks() []Hook {
	return c.hooks.Player
}

// Interceptors returns the client interceptors.
func (c *PlayerClient) Interceptors() []Interceptor {
	return c.inters.Player
}

func (c *PlayerClient) mutate(ctx context.Context, m *PlayerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlayerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlayerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlayerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Player mutation op: %q", m.Op())
	}
}

// PlayerStatisticClient is a client for the PlayerStatistic schema.
type PlayerStatisticClient struct {
	config
}

// NewPlayerStatisticClient returns a client for the PlayerStatistic from the given config.
func NewPlayerStatisticClient(c config) *PlayerStatisticClient {
	return &PlayerStatisticClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playerstatistic.Hooks(f(g(h())))`.
func (c *PlayerStatisticClient) Use(hooks ...Hook) {
	c.hooks.PlayerStatistic = append(c.hooks.PlayerStatistic, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `playerstatistic.Intercept(f(g(h())))`.
func (c *PlayerStatisticClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlayerStatistic = append(c.inters.PlayerStatistic, interceptors...)
}

// Create returns a builder for creating a PlayerStatistic entity.
func (c *PlayerStatisticClient) Create() *PlayerStatisticCreate {
	mutation := newPlayerStatisticMutation(c.config, OpCreate)
	return &PlayerStatisticCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlayerStatistic entities.
func (c *PlayerStatisticClient) CreateBulk(builders ...*PlayerStatisticCreate) *PlayerStatisticCreateBulk {
	return &PlayerStatisticCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlayerStatisticClient) MapCreateBulk(slice any, setFunc func(*PlayerStatisticCreate, int)) *PlayerStatisticCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlayerStatisticCreateBulk{err: fmt.Errorf("calling to PlayerStatisticClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlayerStatisticCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlayerStatisticCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlayerStatistic.
func (c *PlayerStatisticClient) Update() *PlayerStatisticUpdate {
	mutation := newPlayerStatisticMutation(c.config, OpUpdate)
	return &PlayerStatisticUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerStatisticClient) UpdateOne(ps *PlayerStatistic) *PlayerStatisticUpdateOne {
	mutation := newPlayerStatisticMutation(c.config, OpUpdateOne, withPlayerStatistic(ps))
	return &PlayerStatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerStatisticClient) UpdateOneID(id int) *PlayerStatisticUpdateOne {
	mutation := newPlayerStatisticMutation(c.config, OpUpdateOne, withPlayerStatisticID(id))
	return &PlayerStatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlayerStatistic.
func (c *PlayerStatisticClient) Delete() *PlayerStatisticDelete {
	mutation := newPlayerStatisticMutation(c.config, OpDelete)
	return &PlayerStatisticDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayerStatisticClient) DeleteOne(ps *PlayerStatistic) *PlayerStatisticDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlayerStatisticClient) DeleteOneID(id int) *PlayerStatisticDeleteOne {
	builder := c.Delete().Where(playerstatistic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerStatisticDeleteOne{builder}
}

// Query returns a query builder for PlayerStatistic.
func (c *PlayerStatisticClient) Query() *PlayerStatisticQuery {
	return &PlayerStatisticQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlayerStatistic},
		inters: c.Interceptors(),
	}
}

// Get returns a PlayerStatistic entity by its id.
func (c *PlayerStatisticClient) Get(ctx context.Context, id int) (*PlayerStatistic, error) {
	return c.Query().Where(playerstatistic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerStatisticClient) GetX(ctx context.Context, id int) *PlayerStatistic {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlayer queries the player edge of a PlayerStatistic.
func (c *PlayerStatisticClient) QueryPlayer(ps *PlayerStatistic) *PlayerQuery {
	query := (&PlayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playerstatistic.Table, playerstatistic.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, playerstatistic.PlayerTable, playerstatistic.PlayerColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerStatisticClient) Hooks() []Hook {
	return c.hooks.PlayerStatistic
}

// Interceptors returns the client interceptors.
func (c *PlayerStatisticClient) Interceptors() []Interceptor {
	return c.inters.PlayerStatistic
}

func (c *PlayerStatisticClient) mutate(ctx context.Context, m *PlayerStatisticMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlayerStatisticCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlayerStatisticUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlayerStatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlayerStatisticDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlayerStatistic mutation op: %q", m.Op())
	}
}

// SchemaMigrationClient is a client for the SchemaMigration schema.
type SchemaMigrationClient struct {
	config
}

// NewSchemaMigrationClient returns a client for the SchemaMigration from the given config.
func NewSchemaMigrationClient(c config) *SchemaMigrationClient {
	return &SchemaMigrationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `schemamigration.Hooks(f(g(h())))`.
func (c *SchemaMigrationClient) Use(hooks ...Hook) {
	c.hooks.SchemaMigration = append(c.hooks.SchemaMigration, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `schemamigration.Intercept(f(g(h())))`.
func (c *SchemaMigrationClient) Intercept(interceptors ...Interceptor) {
	c.inters.SchemaMigration = append(c.inters.SchemaMigration, interceptors...)
}

// Create returns a builder for creating a SchemaMigration entity.
func (c *SchemaMigrationClient) Create() *SchemaMigrationCreate {
	mutation := newSchemaMigrationMutation(c.config, OpCreate)
	return &SchemaMigrationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SchemaMigration entities.
func (c *SchemaMigrationClient) CreateBulk(builders ...*SchemaMigrationCreate) *SchemaMigrationCreateBulk {
	return &SchemaMigrationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SchemaMigrationClient) MapCreateBulk(slice any, setFunc func(*SchemaMigrationCreate, int)) *SchemaMigrationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SchemaMigrationCreateBulk{err: fmt.Errorf("calling to SchemaMigrationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SchemaMigrationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SchemaMigrationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SchemaMigration.
func (c *SchemaMigrationClient) Update() *SchemaMigrationUpdate {
	mutation := newSchemaMigrationMutation(c.config, OpUpdate)
	return &SchemaMigrationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SchemaMigrationClient) UpdateOne(sm *SchemaMigration) *SchemaMigrationUpdateOne {
	mutation := newSchemaMigrationMutation(c.config, OpUpdateOne, withSchemaMigration(sm))
	return &SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SchemaMigrationClient) UpdateOneID(id int) *SchemaMigrationUpdateOne {
	mutation := newSchemaMigrationMutation(c.config, OpUpdateOne, withSchemaMigrationID(id))
	return &SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SchemaMigration.
func (c *SchemaMigrationClient) Delete() *SchemaMigrationDelete {
	mutation := newSchemaMigrationMutation(c.config, OpDelete)
	return &SchemaMigrationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SchemaMigrationClient) DeleteOne(sm *SchemaMigration) *SchemaMigrationDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SchemaMigrationClient) DeleteOneID(id int) *SchemaMigrationDeleteOne {
	builder := c.Delete().Where(schemamigration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SchemaMigrationDeleteOne{builder}
}

// Query returns a query builder for SchemaMigration.
func (c *SchemaMigrationClient) Query() *SchemaMigrationQuery {
	return &SchemaMigrationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSchemaMigration},
		inters: c.Interceptors(),
	}
}

// Get returns a SchemaMigration entity by its id.
func (c *SchemaMigrationClient) Get(ctx context.Context, id int) (*SchemaMigration, error) {
	return c.Query().Where(schemamigration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SchemaMigrationClient) GetX(ctx context.Context, id int) *SchemaMigration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SchemaMigrationClient) Hooks() []Hook {
	return c.hooks.SchemaMigration
}

// Interceptors returns the client interceptors.
func (c *SchemaMigrationClient) Interceptors() []Interceptor {
	return c.inters.SchemaMigration
}

func (c *SchemaMigrationClient) mutate(ctx context.Context, m *SchemaMigrationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SchemaMigrationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SchemaMigrationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SchemaMigrationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SchemaMigration mutation op: %q", m.Op())
	}
}

// TeamClient is a client for the Team schema.
type TeamClient struct {
	config
}

// NewTeamClient returns a client for the Team from the given config.
func NewTeamClient(c config) *TeamClient {
	return &TeamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `team.Hooks(f(g(h())))`.
func (c *TeamClient) Use(hooks ...Hook) {
	c.hooks.Team = append(c.hooks.Team, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `team.Intercept(f(g(h())))`.
func (c *TeamClient) Intercept(interceptors ...Interceptor) {
	c.inters.Team = append(c.inters.Team, interceptors...)
}

// Create returns a builder for creating a Team entity.
func (c *TeamClient) Create() *TeamCreate {
	mutation := newTeamMutation(c.config, OpCreate)
	return &TeamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Team entities.
func (c *TeamClient) CreateBulk(builders ...*TeamCreate) *TeamCreateBulk {
	return &TeamCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TeamClient) MapCreateBulk(slice any, setFunc func(*TeamCreate, int)) *TeamCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TeamCreateBulk{err: fmt.Errorf("calling to TeamClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TeamCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TeamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Team.
func (c *TeamClient) Update() *TeamUpdate {
	mutation := newTeamMutation(c.config, OpUpdate)
	return &TeamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamClient) UpdateOne(t *Team) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeam(t))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamClient) UpdateOneID(id int) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeamID(id))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Team.
func (c *TeamClient) Delete() *TeamDelete {
	mutation := newTeamMutation(c.config, OpDelete)
	return &TeamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeamClient) DeleteOne(t *Team) *TeamDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TeamClient) DeleteOneID(id int) *TeamDeleteOne {
	builder := c.Delete().Where(team.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamDeleteOne{builder}
}

// Query returns a query builder for Team.
func (c *TeamClient) Query() *TeamQuery {
	return &TeamQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTeam},
		inters: c.Interceptors(),
	}
}

// Get returns a Team entity by its id.
func (c *TeamClient) Get(ctx context.Context, id int) (*Team, error) {
	return c.Query().Where(team.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamClient) GetX(ctx context.Context, id int) *Team {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMatches queries the matches edge of a Team.
func (c *TeamClient) QueryMatches(t *Team) *MatchQuery {
	query := (&MatchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, team.MatchesTable, team.MatchesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeamClient) Hooks() []Hook {
	return c.hooks.Team
}

// Interceptors returns the client interceptors.
func (c *TeamClient) Interceptors() []Interceptor {
	return c.inters.Team
}

func (c *TeamClient) mutate(ctx context.Context, m *TeamMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TeamCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TeamUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TeamDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Team mutation op: %q", m.Op())
	}
}

// TeamFeeClient is a client for the TeamFee schema.
type TeamFeeClient struct {
	config
}

// NewTeamFeeClient returns a client for the TeamFee from the given config.
func NewTeamFeeClient(c config) *TeamFeeClient {
	return &TeamFeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teamfee.Hooks(f(g(h())))`.
func (c *TeamFeeClient) Use(hooks ...Hook) {
	c.hooks.TeamFee = append(c.hooks.TeamFee, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `teamfee.Intercept(f(g(h())))`.
func (c *TeamFeeClient) Intercept(interceptors ...Interceptor) {
	c.inters.TeamFee = append(c.inters.TeamFee, interceptors...)
}

// Create returns a builder for creating a TeamFee entity.
func (c *TeamFeeClient) Create() *TeamFeeCreate {
	mutation := newTeamFeeMutation(c.config, OpCreate)
	return &TeamFeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TeamFee entities.
func (c *TeamFeeClient) CreateBulk(builders ...*TeamFeeCreate) *TeamFeeCreateBulk {
	return &TeamFeeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TeamFeeClient) MapCreateBulk(slice any, setFunc func(*TeamFeeCreate, int)) *TeamFeeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TeamFeeCreateBulk{err: fmt.Errorf("calling to TeamFeeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TeamFeeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TeamFeeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TeamFee.
func (c *TeamFeeClient) Update() *TeamFeeUpdate {
	mutation := newTeamFeeMutation(c.config, OpUpdate)
	return &TeamFeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamFeeClient) UpdateOne(tf *TeamFee) *TeamFeeUpdateOne {
	mutation := newTeamFeeMutation(c.config, OpUpdateOne, withTeamFee(tf))
	return &TeamFeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamFeeClient) UpdateOneID(id int) *TeamFeeUpdateOne {
	mutation := newTeamFeeMutation(c.config, OpUpdateOne, withTeamFeeID(id))
	return &TeamFeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TeamFee.
func (c *TeamFeeClient) Delete() *TeamFeeDelete {
	mutation := newTeamFeeMutation(c.config, OpDelete)
	return &TeamFeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeamFeeClient) DeleteOne(tf *TeamFee) *TeamFeeDeleteOne {
	return c.DeleteOneID(tf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TeamFeeClient) DeleteOneID(id int) *TeamFeeDeleteOne {
	builder := c.Delete().Where(teamfee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamFeeDeleteOne{builder}
}

// Query returns a query builder for TeamFee.
func (c *TeamFeeClient) Query() *TeamFeeQuery {
	return &TeamFeeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTeamFee},
		inters: c.Interceptors(),
	}
}

// Get returns a TeamFee entity by its id.
func (c *TeamFeeClient) Get(ctx context.Context, id int) (*TeamFee, error) {
	return c.Query().Where(teamfee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamFeeClient) GetX(ctx context.Context, id int) *TeamFee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TeamFeeClient) Hooks() []Hook {
	return c.hooks.TeamFee
}

// Interceptors returns the client interceptors.
func (c *TeamFeeClient) Interceptors() []Interceptor {
	return c.inters.TeamFee
}

func (c *TeamFeeClient) mutate(ctx context.Context, m *TeamFeeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TeamFeeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TeamFeeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TeamFeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TeamFeeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TeamFee mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Department, Match, MatchPlayer, Player, PlayerStatistic, SchemaMigration, Team,
		TeamFee, User []ent.Hook
	}
	inters struct {
		Department, Match, MatchPlayer, Player, PlayerStatistic, SchemaMigration, Team,
		TeamFee, User []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
