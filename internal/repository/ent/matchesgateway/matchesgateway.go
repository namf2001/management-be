// Code generated by ent, DO NOT EDIT.

package matchesgateway

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the matchesgateway type in the database.
	Label = "matches_gateway"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCompetitionName holds the string denoting the competition_name field in the database.
	FieldCompetitionName = "competition_name"
	// FieldSeasonStartDate holds the string denoting the season_start_date field in the database.
	FieldSeasonStartDate = "season_start_date"
	// FieldMatchDate holds the string denoting the match_date field in the database.
	FieldMatchDate = "match_date"
	// FieldHomeTeamName holds the string denoting the home_team_name field in the database.
	FieldHomeTeamName = "home_team_name"
	// FieldHomeTeamShortName holds the string denoting the home_team_short_name field in the database.
	FieldHomeTeamShortName = "home_team_short_name"
	// FieldHomeTeamLogo holds the string denoting the home_team_logo field in the database.
	FieldHomeTeamLogo = "home_team_logo"
	// FieldAwayTeamName holds the string denoting the away_team_name field in the database.
	FieldAwayTeamName = "away_team_name"
	// FieldAwayTeamShortName holds the string denoting the away_team_short_name field in the database.
	FieldAwayTeamShortName = "away_team_short_name"
	// FieldAwayTeamLogo holds the string denoting the away_team_logo field in the database.
	FieldAwayTeamLogo = "away_team_logo"
	// FieldHomeScore holds the string denoting the home_score field in the database.
	FieldHomeScore = "home_score"
	// FieldAwayScore holds the string denoting the away_score field in the database.
	FieldAwayScore = "away_score"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// Table holds the table name of the matchesgateway in the database.
	Table = "matches_gateway"
)

// Columns holds all SQL columns for matchesgateway fields.
var Columns = []string{
	FieldID,
	FieldCompetitionName,
	FieldSeasonStartDate,
	FieldMatchDate,
	FieldHomeTeamName,
	FieldHomeTeamShortName,
	FieldHomeTeamLogo,
	FieldAwayTeamName,
	FieldAwayTeamShortName,
	FieldAwayTeamLogo,
	FieldHomeScore,
	FieldAwayScore,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the MatchesGateway queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCompetitionName orders the results by the competition_name field.
func ByCompetitionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompetitionName, opts...).ToFunc()
}

// BySeasonStartDate orders the results by the season_start_date field.
func BySeasonStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeasonStartDate, opts...).ToFunc()
}

// ByMatchDate orders the results by the match_date field.
func ByMatchDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchDate, opts...).ToFunc()
}

// ByHomeTeamName orders the results by the home_team_name field.
func ByHomeTeamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeTeamName, opts...).ToFunc()
}

// ByHomeTeamShortName orders the results by the home_team_short_name field.
func ByHomeTeamShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeTeamShortName, opts...).ToFunc()
}

// ByHomeTeamLogo orders the results by the home_team_logo field.
func ByHomeTeamLogo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeTeamLogo, opts...).ToFunc()
}

// ByAwayTeamName orders the results by the away_team_name field.
func ByAwayTeamName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAwayTeamName, opts...).ToFunc()
}

// ByAwayTeamShortName orders the results by the away_team_short_name field.
func ByAwayTeamShortName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAwayTeamShortName, opts...).ToFunc()
}

// ByAwayTeamLogo orders the results by the away_team_logo field.
func ByAwayTeamLogo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAwayTeamLogo, opts...).ToFunc()
}

// ByHomeScore orders the results by the home_score field.
func ByHomeScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeScore, opts...).ToFunc()
}

// ByAwayScore orders the results by the away_score field.
func ByAwayScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAwayScore, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}
