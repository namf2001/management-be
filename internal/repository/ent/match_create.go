// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"management-be/internal/repository/ent/match"
	"management-be/internal/repository/ent/matchplayer"
	"management-be/internal/repository/ent/team"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchCreate is the builder for creating a Match entity.
type MatchCreate struct {
	config
	mutation *MatchMutation
	hooks    []Hook
}

// SetOpponentTeamID sets the "opponent_team_id" field.
func (mc *MatchCreate) SetOpponentTeamID(i int) *MatchCreate {
	mc.mutation.SetOpponentTeamID(i)
	return mc
}

// SetNillableOpponentTeamID sets the "opponent_team_id" field if the given value is not nil.
func (mc *MatchCreate) SetNillableOpponentTeamID(i *int) *MatchCreate {
	if i != nil {
		mc.SetOpponentTeamID(*i)
	}
	return mc
}

// SetMatchDate sets the "match_date" field.
func (mc *MatchCreate) SetMatchDate(t time.Time) *MatchCreate {
	mc.mutation.SetMatchDate(t)
	return mc
}

// SetVenue sets the "venue" field.
func (mc *MatchCreate) SetVenue(s string) *MatchCreate {
	mc.mutation.SetVenue(s)
	return mc
}

// SetNillableVenue sets the "venue" field if the given value is not nil.
func (mc *MatchCreate) SetNillableVenue(s *string) *MatchCreate {
	if s != nil {
		mc.SetVenue(*s)
	}
	return mc
}

// SetIsHomeGame sets the "is_home_game" field.
func (mc *MatchCreate) SetIsHomeGame(b bool) *MatchCreate {
	mc.mutation.SetIsHomeGame(b)
	return mc
}

// SetOurScore sets the "our_score" field.
func (mc *MatchCreate) SetOurScore(i int32) *MatchCreate {
	mc.mutation.SetOurScore(i)
	return mc
}

// SetNillableOurScore sets the "our_score" field if the given value is not nil.
func (mc *MatchCreate) SetNillableOurScore(i *int32) *MatchCreate {
	if i != nil {
		mc.SetOurScore(*i)
	}
	return mc
}

// SetOpponentScore sets the "opponent_score" field.
func (mc *MatchCreate) SetOpponentScore(i int32) *MatchCreate {
	mc.mutation.SetOpponentScore(i)
	return mc
}

// SetNillableOpponentScore sets the "opponent_score" field if the given value is not nil.
func (mc *MatchCreate) SetNillableOpponentScore(i *int32) *MatchCreate {
	if i != nil {
		mc.SetOpponentScore(*i)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MatchCreate) SetStatus(s string) *MatchCreate {
	mc.mutation.SetStatus(s)
	return mc
}

// SetNotes sets the "notes" field.
func (mc *MatchCreate) SetNotes(s string) *MatchCreate {
	mc.mutation.SetNotes(s)
	return mc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (mc *MatchCreate) SetNillableNotes(s *string) *MatchCreate {
	if s != nil {
		mc.SetNotes(*s)
	}
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MatchCreate) SetCreatedAt(t time.Time) *MatchCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MatchCreate) SetUpdatedAt(t time.Time) *MatchCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MatchCreate) SetDeletedAt(t time.Time) *MatchCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MatchCreate) SetNillableDeletedAt(t *time.Time) *MatchCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MatchCreate) SetID(i int) *MatchCreate {
	mc.mutation.SetID(i)
	return mc
}

// AddMatchPlayerIDs adds the "match_players" edge to the MatchPlayer entity by IDs.
func (mc *MatchCreate) AddMatchPlayerIDs(ids ...int) *MatchCreate {
	mc.mutation.AddMatchPlayerIDs(ids...)
	return mc
}

// AddMatchPlayers adds the "match_players" edges to the MatchPlayer entity.
func (mc *MatchCreate) AddMatchPlayers(m ...*MatchPlayer) *MatchCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMatchPlayerIDs(ids...)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (mc *MatchCreate) SetTeamID(id int) *MatchCreate {
	mc.mutation.SetTeamID(id)
	return mc
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (mc *MatchCreate) SetNillableTeamID(id *int) *MatchCreate {
	if id != nil {
		mc = mc.SetTeamID(*id)
	}
	return mc
}

// SetTeam sets the "team" edge to the Team entity.
func (mc *MatchCreate) SetTeam(t *Team) *MatchCreate {
	return mc.SetTeamID(t.ID)
}

// Mutation returns the MatchMutation object of the builder.
func (mc *MatchCreate) Mutation() *MatchMutation {
	return mc.mutation
}

// Save creates the Match in the database.
func (mc *MatchCreate) Save(ctx context.Context) (*Match, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MatchCreate) SaveX(ctx context.Context) *Match {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MatchCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MatchCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MatchCreate) check() error {
	if _, ok := mc.mutation.MatchDate(); !ok {
		return &ValidationError{Name: "match_date", err: errors.New(`ent: missing required field "Match.match_date"`)}
	}
	if _, ok := mc.mutation.IsHomeGame(); !ok {
		return &ValidationError{Name: "is_home_game", err: errors.New(`ent: missing required field "Match.is_home_game"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Match.status"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Match.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Match.updated_at"`)}
	}
	return nil
}

func (mc *MatchCreate) sqlSave(ctx context.Context) (*Match, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MatchCreate) createSpec() (*Match, *sqlgraph.CreateSpec) {
	var (
		_node = &Match{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(match.Table, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.MatchDate(); ok {
		_spec.SetField(match.FieldMatchDate, field.TypeTime, value)
		_node.MatchDate = value
	}
	if value, ok := mc.mutation.Venue(); ok {
		_spec.SetField(match.FieldVenue, field.TypeString, value)
		_node.Venue = value
	}
	if value, ok := mc.mutation.IsHomeGame(); ok {
		_spec.SetField(match.FieldIsHomeGame, field.TypeBool, value)
		_node.IsHomeGame = value
	}
	if value, ok := mc.mutation.OurScore(); ok {
		_spec.SetField(match.FieldOurScore, field.TypeInt32, value)
		_node.OurScore = value
	}
	if value, ok := mc.mutation.OpponentScore(); ok {
		_spec.SetField(match.FieldOpponentScore, field.TypeInt32, value)
		_node.OpponentScore = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(match.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Notes(); ok {
		_spec.SetField(match.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(match.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(match.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(match.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := mc.mutation.MatchPlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchPlayersTable,
			Columns: []string{match.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.TeamTable,
			Columns: []string{match.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OpponentTeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MatchCreateBulk is the builder for creating many Match entities in bulk.
type MatchCreateBulk struct {
	config
	err      error
	builders []*MatchCreate
}

// Save creates the Match entities in the database.
func (mcb *MatchCreateBulk) Save(ctx context.Context) ([]*Match, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Match, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MatchCreateBulk) SaveX(ctx context.Context) []*Match {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MatchCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MatchCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
