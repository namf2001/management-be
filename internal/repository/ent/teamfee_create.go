// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"management-be/internal/repository/ent/teamfee"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamFeeCreate is the builder for creating a TeamFee entity.
type TeamFeeCreate struct {
	config
	mutation *TeamFeeMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (tfc *TeamFeeCreate) SetAmount(f float64) *TeamFeeCreate {
	tfc.mutation.SetAmount(f)
	return tfc
}

// SetPaymentDate sets the "payment_date" field.
func (tfc *TeamFeeCreate) SetPaymentDate(t time.Time) *TeamFeeCreate {
	tfc.mutation.SetPaymentDate(t)
	return tfc
}

// SetDescription sets the "description" field.
func (tfc *TeamFeeCreate) SetDescription(s string) *TeamFeeCreate {
	tfc.mutation.SetDescription(s)
	return tfc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tfc *TeamFeeCreate) SetNillableDescription(s *string) *TeamFeeCreate {
	if s != nil {
		tfc.SetDescription(*s)
	}
	return tfc
}

// SetCreatedAt sets the "created_at" field.
func (tfc *TeamFeeCreate) SetCreatedAt(t time.Time) *TeamFeeCreate {
	tfc.mutation.SetCreatedAt(t)
	return tfc
}

// SetUpdatedAt sets the "updated_at" field.
func (tfc *TeamFeeCreate) SetUpdatedAt(t time.Time) *TeamFeeCreate {
	tfc.mutation.SetUpdatedAt(t)
	return tfc
}

// SetDeletedAt sets the "deleted_at" field.
func (tfc *TeamFeeCreate) SetDeletedAt(t time.Time) *TeamFeeCreate {
	tfc.mutation.SetDeletedAt(t)
	return tfc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tfc *TeamFeeCreate) SetNillableDeletedAt(t *time.Time) *TeamFeeCreate {
	if t != nil {
		tfc.SetDeletedAt(*t)
	}
	return tfc
}

// SetID sets the "id" field.
func (tfc *TeamFeeCreate) SetID(i int) *TeamFeeCreate {
	tfc.mutation.SetID(i)
	return tfc
}

// Mutation returns the TeamFeeMutation object of the builder.
func (tfc *TeamFeeCreate) Mutation() *TeamFeeMutation {
	return tfc.mutation
}

// Save creates the TeamFee in the database.
func (tfc *TeamFeeCreate) Save(ctx context.Context) (*TeamFee, error) {
	return withHooks(ctx, tfc.sqlSave, tfc.mutation, tfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tfc *TeamFeeCreate) SaveX(ctx context.Context) *TeamFee {
	v, err := tfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfc *TeamFeeCreate) Exec(ctx context.Context) error {
	_, err := tfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfc *TeamFeeCreate) ExecX(ctx context.Context) {
	if err := tfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfc *TeamFeeCreate) check() error {
	if _, ok := tfc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "TeamFee.amount"`)}
	}
	if _, ok := tfc.mutation.PaymentDate(); !ok {
		return &ValidationError{Name: "payment_date", err: errors.New(`ent: missing required field "TeamFee.payment_date"`)}
	}
	if _, ok := tfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TeamFee.created_at"`)}
	}
	if _, ok := tfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TeamFee.updated_at"`)}
	}
	return nil
}

func (tfc *TeamFeeCreate) sqlSave(ctx context.Context) (*TeamFee, error) {
	if err := tfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tfc.mutation.id = &_node.ID
	tfc.mutation.done = true
	return _node, nil
}

func (tfc *TeamFeeCreate) createSpec() (*TeamFee, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamFee{config: tfc.config}
		_spec = sqlgraph.NewCreateSpec(teamfee.Table, sqlgraph.NewFieldSpec(teamfee.FieldID, field.TypeInt))
	)
	if id, ok := tfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tfc.mutation.Amount(); ok {
		_spec.SetField(teamfee.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := tfc.mutation.PaymentDate(); ok {
		_spec.SetField(teamfee.FieldPaymentDate, field.TypeTime, value)
		_node.PaymentDate = value
	}
	if value, ok := tfc.mutation.Description(); ok {
		_spec.SetField(teamfee.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tfc.mutation.CreatedAt(); ok {
		_spec.SetField(teamfee.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tfc.mutation.UpdatedAt(); ok {
		_spec.SetField(teamfee.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tfc.mutation.DeletedAt(); ok {
		_spec.SetField(teamfee.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	return _node, _spec
}

// TeamFeeCreateBulk is the builder for creating many TeamFee entities in bulk.
type TeamFeeCreateBulk struct {
	config
	err      error
	builders []*TeamFeeCreate
}

// Save creates the TeamFee entities in the database.
func (tfcb *TeamFeeCreateBulk) Save(ctx context.Context) ([]*TeamFee, error) {
	if tfcb.err != nil {
		return nil, tfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tfcb.builders))
	nodes := make([]*TeamFee, len(tfcb.builders))
	mutators := make([]Mutator, len(tfcb.builders))
	for i := range tfcb.builders {
		func(i int, root context.Context) {
			builder := tfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamFeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tfcb *TeamFeeCreateBulk) SaveX(ctx context.Context) []*TeamFee {
	v, err := tfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tfcb *TeamFeeCreateBulk) Exec(ctx context.Context) error {
	_, err := tfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfcb *TeamFeeCreateBulk) ExecX(ctx context.Context) {
	if err := tfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
