// Code generated by ent, DO NOT EDIT.

package match

import (
	"management-be/internal/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldID, id))
}

// OpponentTeamID applies equality check predicate on the "opponent_team_id" field. It's identical to OpponentTeamIDEQ.
func OpponentTeamID(v int32) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldOpponentTeamID, v))
}

// MatchDate applies equality check predicate on the "match_date" field. It's identical to MatchDateEQ.
func MatchDate(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldMatchDate, v))
}

// Venue applies equality check predicate on the "venue" field. It's identical to VenueEQ.
func Venue(v string) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldVenue, v))
}

// IsHomeGame applies equality check predicate on the "is_home_game" field. It's identical to IsHomeGameEQ.
func IsHomeGame(v bool) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldIsHomeGame, v))
}

// OurScore applies equality check predicate on the "our_score" field. It's identical to OurScoreEQ.
func OurScore(v int32) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldOurScore, v))
}

// OpponentScore applies equality check predicate on the "opponent_score" field. It's identical to OpponentScoreEQ.
func OpponentScore(v int32) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldOpponentScore, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldStatus, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldNotes, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldUpdatedAt, v))
}

// OpponentTeamIDEQ applies the EQ predicate on the "opponent_team_id" field.
func OpponentTeamIDEQ(v int32) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldOpponentTeamID, v))
}

// OpponentTeamIDNEQ applies the NEQ predicate on the "opponent_team_id" field.
func OpponentTeamIDNEQ(v int32) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldOpponentTeamID, v))
}

// OpponentTeamIDIn applies the In predicate on the "opponent_team_id" field.
func OpponentTeamIDIn(vs ...int32) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldOpponentTeamID, vs...))
}

// OpponentTeamIDNotIn applies the NotIn predicate on the "opponent_team_id" field.
func OpponentTeamIDNotIn(vs ...int32) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldOpponentTeamID, vs...))
}

// OpponentTeamIDIsNil applies the IsNil predicate on the "opponent_team_id" field.
func OpponentTeamIDIsNil() predicate.Match {
	return predicate.Match(sql.FieldIsNull(FieldOpponentTeamID))
}

// OpponentTeamIDNotNil applies the NotNil predicate on the "opponent_team_id" field.
func OpponentTeamIDNotNil() predicate.Match {
	return predicate.Match(sql.FieldNotNull(FieldOpponentTeamID))
}

// MatchDateEQ applies the EQ predicate on the "match_date" field.
func MatchDateEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldMatchDate, v))
}

// MatchDateNEQ applies the NEQ predicate on the "match_date" field.
func MatchDateNEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldMatchDate, v))
}

// MatchDateIn applies the In predicate on the "match_date" field.
func MatchDateIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldMatchDate, vs...))
}

// MatchDateNotIn applies the NotIn predicate on the "match_date" field.
func MatchDateNotIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldMatchDate, vs...))
}

// MatchDateGT applies the GT predicate on the "match_date" field.
func MatchDateGT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldMatchDate, v))
}

// MatchDateGTE applies the GTE predicate on the "match_date" field.
func MatchDateGTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldMatchDate, v))
}

// MatchDateLT applies the LT predicate on the "match_date" field.
func MatchDateLT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldMatchDate, v))
}

// MatchDateLTE applies the LTE predicate on the "match_date" field.
func MatchDateLTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldMatchDate, v))
}

// VenueEQ applies the EQ predicate on the "venue" field.
func VenueEQ(v string) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldVenue, v))
}

// VenueNEQ applies the NEQ predicate on the "venue" field.
func VenueNEQ(v string) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldVenue, v))
}

// VenueIn applies the In predicate on the "venue" field.
func VenueIn(vs ...string) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldVenue, vs...))
}

// VenueNotIn applies the NotIn predicate on the "venue" field.
func VenueNotIn(vs ...string) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldVenue, vs...))
}

// VenueGT applies the GT predicate on the "venue" field.
func VenueGT(v string) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldVenue, v))
}

// VenueGTE applies the GTE predicate on the "venue" field.
func VenueGTE(v string) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldVenue, v))
}

// VenueLT applies the LT predicate on the "venue" field.
func VenueLT(v string) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldVenue, v))
}

// VenueLTE applies the LTE predicate on the "venue" field.
func VenueLTE(v string) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldVenue, v))
}

// VenueContains applies the Contains predicate on the "venue" field.
func VenueContains(v string) predicate.Match {
	return predicate.Match(sql.FieldContains(FieldVenue, v))
}

// VenueHasPrefix applies the HasPrefix predicate on the "venue" field.
func VenueHasPrefix(v string) predicate.Match {
	return predicate.Match(sql.FieldHasPrefix(FieldVenue, v))
}

// VenueHasSuffix applies the HasSuffix predicate on the "venue" field.
func VenueHasSuffix(v string) predicate.Match {
	return predicate.Match(sql.FieldHasSuffix(FieldVenue, v))
}

// VenueIsNil applies the IsNil predicate on the "venue" field.
func VenueIsNil() predicate.Match {
	return predicate.Match(sql.FieldIsNull(FieldVenue))
}

// VenueNotNil applies the NotNil predicate on the "venue" field.
func VenueNotNil() predicate.Match {
	return predicate.Match(sql.FieldNotNull(FieldVenue))
}

// VenueEqualFold applies the EqualFold predicate on the "venue" field.
func VenueEqualFold(v string) predicate.Match {
	return predicate.Match(sql.FieldEqualFold(FieldVenue, v))
}

// VenueContainsFold applies the ContainsFold predicate on the "venue" field.
func VenueContainsFold(v string) predicate.Match {
	return predicate.Match(sql.FieldContainsFold(FieldVenue, v))
}

// IsHomeGameEQ applies the EQ predicate on the "is_home_game" field.
func IsHomeGameEQ(v bool) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldIsHomeGame, v))
}

// IsHomeGameNEQ applies the NEQ predicate on the "is_home_game" field.
func IsHomeGameNEQ(v bool) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldIsHomeGame, v))
}

// IsHomeGameIsNil applies the IsNil predicate on the "is_home_game" field.
func IsHomeGameIsNil() predicate.Match {
	return predicate.Match(sql.FieldIsNull(FieldIsHomeGame))
}

// IsHomeGameNotNil applies the NotNil predicate on the "is_home_game" field.
func IsHomeGameNotNil() predicate.Match {
	return predicate.Match(sql.FieldNotNull(FieldIsHomeGame))
}

// OurScoreEQ applies the EQ predicate on the "our_score" field.
func OurScoreEQ(v int32) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldOurScore, v))
}

// OurScoreNEQ applies the NEQ predicate on the "our_score" field.
func OurScoreNEQ(v int32) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldOurScore, v))
}

// OurScoreIn applies the In predicate on the "our_score" field.
func OurScoreIn(vs ...int32) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldOurScore, vs...))
}

// OurScoreNotIn applies the NotIn predicate on the "our_score" field.
func OurScoreNotIn(vs ...int32) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldOurScore, vs...))
}

// OurScoreGT applies the GT predicate on the "our_score" field.
func OurScoreGT(v int32) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldOurScore, v))
}

// OurScoreGTE applies the GTE predicate on the "our_score" field.
func OurScoreGTE(v int32) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldOurScore, v))
}

// OurScoreLT applies the LT predicate on the "our_score" field.
func OurScoreLT(v int32) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldOurScore, v))
}

// OurScoreLTE applies the LTE predicate on the "our_score" field.
func OurScoreLTE(v int32) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldOurScore, v))
}

// OurScoreIsNil applies the IsNil predicate on the "our_score" field.
func OurScoreIsNil() predicate.Match {
	return predicate.Match(sql.FieldIsNull(FieldOurScore))
}

// OurScoreNotNil applies the NotNil predicate on the "our_score" field.
func OurScoreNotNil() predicate.Match {
	return predicate.Match(sql.FieldNotNull(FieldOurScore))
}

// OpponentScoreEQ applies the EQ predicate on the "opponent_score" field.
func OpponentScoreEQ(v int32) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldOpponentScore, v))
}

// OpponentScoreNEQ applies the NEQ predicate on the "opponent_score" field.
func OpponentScoreNEQ(v int32) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldOpponentScore, v))
}

// OpponentScoreIn applies the In predicate on the "opponent_score" field.
func OpponentScoreIn(vs ...int32) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldOpponentScore, vs...))
}

// OpponentScoreNotIn applies the NotIn predicate on the "opponent_score" field.
func OpponentScoreNotIn(vs ...int32) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldOpponentScore, vs...))
}

// OpponentScoreGT applies the GT predicate on the "opponent_score" field.
func OpponentScoreGT(v int32) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldOpponentScore, v))
}

// OpponentScoreGTE applies the GTE predicate on the "opponent_score" field.
func OpponentScoreGTE(v int32) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldOpponentScore, v))
}

// OpponentScoreLT applies the LT predicate on the "opponent_score" field.
func OpponentScoreLT(v int32) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldOpponentScore, v))
}

// OpponentScoreLTE applies the LTE predicate on the "opponent_score" field.
func OpponentScoreLTE(v int32) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldOpponentScore, v))
}

// OpponentScoreIsNil applies the IsNil predicate on the "opponent_score" field.
func OpponentScoreIsNil() predicate.Match {
	return predicate.Match(sql.FieldIsNull(FieldOpponentScore))
}

// OpponentScoreNotNil applies the NotNil predicate on the "opponent_score" field.
func OpponentScoreNotNil() predicate.Match {
	return predicate.Match(sql.FieldNotNull(FieldOpponentScore))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Match {
	return predicate.Match(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Match {
	return predicate.Match(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Match {
	return predicate.Match(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Match {
	return predicate.Match(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Match {
	return predicate.Match(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Match {
	return predicate.Match(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Match {
	return predicate.Match(sql.FieldContainsFold(FieldStatus, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Match {
	return predicate.Match(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Match {
	return predicate.Match(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Match {
	return predicate.Match(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Match {
	return predicate.Match(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Match {
	return predicate.Match(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Match {
	return predicate.Match(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Match {
	return predicate.Match(sql.FieldContainsFold(FieldNotes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Match {
	return predicate.Match(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Match {
	return predicate.Match(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Match {
	return predicate.Match(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Match {
	return predicate.Match(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Match {
	return predicate.Match(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Match {
	return predicate.Match(sql.FieldNotNull(FieldUpdatedAt))
}

// HasMatchPlayers applies the HasEdge predicate on the "match_players" edge.
func HasMatchPlayers() predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MatchPlayersTable, MatchPlayersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchPlayersWith applies the HasEdge predicate on the "match_players" edge with a given conditions (other predicates).
func HasMatchPlayersWith(preds ...predicate.MatchPlayer) predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := newMatchPlayersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Match {
	return predicate.Match(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Match) predicate.Match {
	return predicate.Match(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Match) predicate.Match {
	return predicate.Match(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Match) predicate.Match {
	return predicate.Match(sql.NotPredicates(p))
}
