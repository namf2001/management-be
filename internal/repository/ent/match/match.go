// Code generated by ent, DO NOT EDIT.

package match

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the match type in the database.
	Label = "match"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOpponentTeamID holds the string denoting the opponent_team_id field in the database.
	FieldOpponentTeamID = "opponent_team_id"
	// FieldMatchDate holds the string denoting the match_date field in the database.
	FieldMatchDate = "match_date"
	// FieldVenue holds the string denoting the venue field in the database.
	FieldVenue = "venue"
	// FieldIsHomeGame holds the string denoting the is_home_game field in the database.
	FieldIsHomeGame = "is_home_game"
	// FieldOurScore holds the string denoting the our_score field in the database.
	FieldOurScore = "our_score"
	// FieldOpponentScore holds the string denoting the opponent_score field in the database.
	FieldOpponentScore = "opponent_score"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeMatchPlayers holds the string denoting the match_players edge name in mutations.
	EdgeMatchPlayers = "match_players"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// Table holds the table name of the match in the database.
	Table = "matches"
	// MatchPlayersTable is the table that holds the match_players relation/edge.
	MatchPlayersTable = "match_players"
	// MatchPlayersInverseTable is the table name for the MatchPlayer entity.
	// It exists in this package in order to avoid circular dependency with the "matchplayer" package.
	MatchPlayersInverseTable = "match_players"
	// MatchPlayersColumn is the table column denoting the match_players relation/edge.
	MatchPlayersColumn = "match_id"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "matches"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "opponent_team_id"
)

// Columns holds all SQL columns for match fields.
var Columns = []string{
	FieldID,
	FieldOpponentTeamID,
	FieldMatchDate,
	FieldVenue,
	FieldIsHomeGame,
	FieldOurScore,
	FieldOpponentScore,
	FieldStatus,
	FieldNotes,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Match queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOpponentTeamID orders the results by the opponent_team_id field.
func ByOpponentTeamID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpponentTeamID, opts...).ToFunc()
}

// ByMatchDate orders the results by the match_date field.
func ByMatchDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchDate, opts...).ToFunc()
}

// ByVenue orders the results by the venue field.
func ByVenue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVenue, opts...).ToFunc()
}

// ByIsHomeGame orders the results by the is_home_game field.
func ByIsHomeGame(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsHomeGame, opts...).ToFunc()
}

// ByOurScore orders the results by the our_score field.
func ByOurScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOurScore, opts...).ToFunc()
}

// ByOpponentScore orders the results by the opponent_score field.
func ByOpponentScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpponentScore, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMatchPlayersCount orders the results by match_players count.
func ByMatchPlayersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMatchPlayersStep(), opts...)
	}
}

// ByMatchPlayers orders the results by match_players terms.
func ByMatchPlayers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMatchPlayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}
func newMatchPlayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MatchPlayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MatchPlayersTable, MatchPlayersColumn),
	)
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
