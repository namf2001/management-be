// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"management-be/internal/repository/ent/department"
	"management-be/internal/repository/ent/player"
	"management-be/internal/repository/ent/playerstatistic"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Player is the model entity for the Player schema.
type Player struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DepartmentID holds the value of the "department_id" field.
	DepartmentID int `json:"department_id,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// JerseyNumber holds the value of the "jersey_number" field.
	JerseyNumber int32 `json:"jersey_number,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// DateOfBirth holds the value of the "date_of_birth" field.
	DateOfBirth time.Time `json:"date_of_birth,omitempty"`
	// HeightCm holds the value of the "height_cm" field.
	HeightCm int32 `json:"height_cm,omitempty"`
	// WeightKg holds the value of the "weight_kg" field.
	WeightKg int32 `json:"weight_kg,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlayerQuery when eager-loading is set.
	Edges        PlayerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlayerEdges holds the relations/edges for other nodes in the graph.
type PlayerEdges struct {
	// MatchPlayers holds the value of the match_players edge.
	MatchPlayers []*MatchPlayer `json:"match_players,omitempty"`
	// PlayerStatistic holds the value of the player_statistic edge.
	PlayerStatistic *PlayerStatistic `json:"player_statistic,omitempty"`
	// Department holds the value of the department edge.
	Department *Department `json:"department,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MatchPlayersOrErr returns the MatchPlayers value or an error if the edge
// was not loaded in eager-loading.
func (e PlayerEdges) MatchPlayersOrErr() ([]*MatchPlayer, error) {
	if e.loadedTypes[0] {
		return e.MatchPlayers, nil
	}
	return nil, &NotLoadedError{edge: "match_players"}
}

// PlayerStatisticOrErr returns the PlayerStatistic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerEdges) PlayerStatisticOrErr() (*PlayerStatistic, error) {
	if e.PlayerStatistic != nil {
		return e.PlayerStatistic, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: playerstatistic.Label}
	}
	return nil, &NotLoadedError{edge: "player_statistic"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerEdges) DepartmentOrErr() (*Department, error) {
	if e.Department != nil {
		return e.Department, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: department.Label}
	}
	return nil, &NotLoadedError{edge: "department"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Player) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case player.FieldIsActive:
			values[i] = new(sql.NullBool)
		case player.FieldID, player.FieldDepartmentID, player.FieldJerseyNumber, player.FieldHeightCm, player.FieldWeightKg:
			values[i] = new(sql.NullInt64)
		case player.FieldFullName, player.FieldPosition, player.FieldPhone, player.FieldEmail:
			values[i] = new(sql.NullString)
		case player.FieldDateOfBirth, player.FieldCreatedAt, player.FieldUpdatedAt, player.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Player fields.
func (pl *Player) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case player.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case player.FieldDepartmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field department_id", values[i])
			} else if value.Valid {
				pl.DepartmentID = int(value.Int64)
			}
		case player.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				pl.FullName = value.String
			}
		case player.FieldJerseyNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field jersey_number", values[i])
			} else if value.Valid {
				pl.JerseyNumber = int32(value.Int64)
			}
		case player.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				pl.Position = value.String
			}
		case player.FieldDateOfBirth:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_of_birth", values[i])
			} else if value.Valid {
				pl.DateOfBirth = value.Time
			}
		case player.FieldHeightCm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height_cm", values[i])
			} else if value.Valid {
				pl.HeightCm = int32(value.Int64)
			}
		case player.FieldWeightKg:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight_kg", values[i])
			} else if value.Valid {
				pl.WeightKg = int32(value.Int64)
			}
		case player.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				pl.Phone = value.String
			}
		case player.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pl.Email = value.String
			}
		case player.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pl.IsActive = value.Bool
			}
		case player.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case player.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		case player.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pl.DeletedAt = value.Time
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Player.
// This includes values selected through modifiers, order, etc.
func (pl *Player) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryMatchPlayers queries the "match_players" edge of the Player entity.
func (pl *Player) QueryMatchPlayers() *MatchPlayerQuery {
	return NewPlayerClient(pl.config).QueryMatchPlayers(pl)
}

// QueryPlayerStatistic queries the "player_statistic" edge of the Player entity.
func (pl *Player) QueryPlayerStatistic() *PlayerStatisticQuery {
	return NewPlayerClient(pl.config).QueryPlayerStatistic(pl)
}

// QueryDepartment queries the "department" edge of the Player entity.
func (pl *Player) QueryDepartment() *DepartmentQuery {
	return NewPlayerClient(pl.config).QueryDepartment(pl)
}

// Update returns a builder for updating this Player.
// Note that you need to call Player.Unwrap() before calling this method if this Player
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Player) Update() *PlayerUpdateOne {
	return NewPlayerClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Player entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Player) Unwrap() *Player {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Player is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Player) String() string {
	var builder strings.Builder
	builder.WriteString("Player(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("department_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.DepartmentID))
	builder.WriteString(", ")
	builder.WriteString("full_name=")
	builder.WriteString(pl.FullName)
	builder.WriteString(", ")
	builder.WriteString("jersey_number=")
	builder.WriteString(fmt.Sprintf("%v", pl.JerseyNumber))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(pl.Position)
	builder.WriteString(", ")
	builder.WriteString("date_of_birth=")
	builder.WriteString(pl.DateOfBirth.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("height_cm=")
	builder.WriteString(fmt.Sprintf("%v", pl.HeightCm))
	builder.WriteString(", ")
	builder.WriteString("weight_kg=")
	builder.WriteString(fmt.Sprintf("%v", pl.WeightKg))
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(pl.Phone)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pl.Email)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pl.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pl.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Players is a parsable slice of Player.
type Players []*Player
