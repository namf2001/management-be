// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"management-be/internal/repository/ent/department"
	"management-be/internal/repository/ent/matchplayer"
	"management-be/internal/repository/ent/player"
	"management-be/internal/repository/ent/playerstatistic"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerCreate is the builder for creating a Player entity.
type PlayerCreate struct {
	config
	mutation *PlayerMutation
	hooks    []Hook
}

// SetDepartmentID sets the "department_id" field.
func (pc *PlayerCreate) SetDepartmentID(i int) *PlayerCreate {
	pc.mutation.SetDepartmentID(i)
	return pc
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableDepartmentID(i *int) *PlayerCreate {
	if i != nil {
		pc.SetDepartmentID(*i)
	}
	return pc
}

// SetFullName sets the "full_name" field.
func (pc *PlayerCreate) SetFullName(s string) *PlayerCreate {
	pc.mutation.SetFullName(s)
	return pc
}

// SetJerseyNumber sets the "jersey_number" field.
func (pc *PlayerCreate) SetJerseyNumber(i int32) *PlayerCreate {
	pc.mutation.SetJerseyNumber(i)
	return pc
}

// SetNillableJerseyNumber sets the "jersey_number" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableJerseyNumber(i *int32) *PlayerCreate {
	if i != nil {
		pc.SetJerseyNumber(*i)
	}
	return pc
}

// SetPosition sets the "position" field.
func (pc *PlayerCreate) SetPosition(s string) *PlayerCreate {
	pc.mutation.SetPosition(s)
	return pc
}

// SetDateOfBirth sets the "date_of_birth" field.
func (pc *PlayerCreate) SetDateOfBirth(t time.Time) *PlayerCreate {
	pc.mutation.SetDateOfBirth(t)
	return pc
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableDateOfBirth(t *time.Time) *PlayerCreate {
	if t != nil {
		pc.SetDateOfBirth(*t)
	}
	return pc
}

// SetHeightCm sets the "height_cm" field.
func (pc *PlayerCreate) SetHeightCm(i int32) *PlayerCreate {
	pc.mutation.SetHeightCm(i)
	return pc
}

// SetNillableHeightCm sets the "height_cm" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableHeightCm(i *int32) *PlayerCreate {
	if i != nil {
		pc.SetHeightCm(*i)
	}
	return pc
}

// SetWeightKg sets the "weight_kg" field.
func (pc *PlayerCreate) SetWeightKg(i int32) *PlayerCreate {
	pc.mutation.SetWeightKg(i)
	return pc
}

// SetNillableWeightKg sets the "weight_kg" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableWeightKg(i *int32) *PlayerCreate {
	if i != nil {
		pc.SetWeightKg(*i)
	}
	return pc
}

// SetPhone sets the "phone" field.
func (pc *PlayerCreate) SetPhone(s string) *PlayerCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pc *PlayerCreate) SetNillablePhone(s *string) *PlayerCreate {
	if s != nil {
		pc.SetPhone(*s)
	}
	return pc
}

// SetEmail sets the "email" field.
func (pc *PlayerCreate) SetEmail(s string) *PlayerCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableEmail(s *string) *PlayerCreate {
	if s != nil {
		pc.SetEmail(*s)
	}
	return pc
}

// SetIsActive sets the "is_active" field.
func (pc *PlayerCreate) SetIsActive(b bool) *PlayerCreate {
	pc.mutation.SetIsActive(b)
	return pc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableIsActive(b *bool) *PlayerCreate {
	if b != nil {
		pc.SetIsActive(*b)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlayerCreate) SetCreatedAt(t time.Time) *PlayerCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableCreatedAt(t *time.Time) *PlayerCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PlayerCreate) SetUpdatedAt(t time.Time) *PlayerCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PlayerCreate) SetNillableUpdatedAt(t *time.Time) *PlayerCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PlayerCreate) SetID(i int) *PlayerCreate {
	pc.mutation.SetID(i)
	return pc
}

// AddMatchPlayerIDs adds the "match_players" edge to the MatchPlayer entity by IDs.
func (pc *PlayerCreate) AddMatchPlayerIDs(ids ...int) *PlayerCreate {
	pc.mutation.AddMatchPlayerIDs(ids...)
	return pc
}

// AddMatchPlayers adds the "match_players" edges to the MatchPlayer entity.
func (pc *PlayerCreate) AddMatchPlayers(m ...*MatchPlayer) *PlayerCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pc.AddMatchPlayerIDs(ids...)
}

// SetPlayerStatisticID sets the "player_statistic" edge to the PlayerStatistic entity by ID.
func (pc *PlayerCreate) SetPlayerStatisticID(id int) *PlayerCreate {
	pc.mutation.SetPlayerStatisticID(id)
	return pc
}

// SetNillablePlayerStatisticID sets the "player_statistic" edge to the PlayerStatistic entity by ID if the given value is not nil.
func (pc *PlayerCreate) SetNillablePlayerStatisticID(id *int) *PlayerCreate {
	if id != nil {
		pc = pc.SetPlayerStatisticID(*id)
	}
	return pc
}

// SetPlayerStatistic sets the "player_statistic" edge to the PlayerStatistic entity.
func (pc *PlayerCreate) SetPlayerStatistic(p *PlayerStatistic) *PlayerCreate {
	return pc.SetPlayerStatisticID(p.ID)
}

// SetDepartment sets the "department" edge to the Department entity.
func (pc *PlayerCreate) SetDepartment(d *Department) *PlayerCreate {
	return pc.SetDepartmentID(d.ID)
}

// Mutation returns the PlayerMutation object of the builder.
func (pc *PlayerCreate) Mutation() *PlayerMutation {
	return pc.mutation
}

// Save creates the Player in the database.
func (pc *PlayerCreate) Save(ctx context.Context) (*Player, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlayerCreate) SaveX(ctx context.Context) *Player {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlayerCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlayerCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlayerCreate) check() error {
	if _, ok := pc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "Player.full_name"`)}
	}
	if _, ok := pc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "Player.position"`)}
	}
	return nil
}

func (pc *PlayerCreate) sqlSave(ctx context.Context) (*Player, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlayerCreate) createSpec() (*Player, *sqlgraph.CreateSpec) {
	var (
		_node = &Player{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(player.Table, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.FullName(); ok {
		_spec.SetField(player.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := pc.mutation.JerseyNumber(); ok {
		_spec.SetField(player.FieldJerseyNumber, field.TypeInt32, value)
		_node.JerseyNumber = value
	}
	if value, ok := pc.mutation.Position(); ok {
		_spec.SetField(player.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := pc.mutation.DateOfBirth(); ok {
		_spec.SetField(player.FieldDateOfBirth, field.TypeTime, value)
		_node.DateOfBirth = value
	}
	if value, ok := pc.mutation.HeightCm(); ok {
		_spec.SetField(player.FieldHeightCm, field.TypeInt32, value)
		_node.HeightCm = value
	}
	if value, ok := pc.mutation.WeightKg(); ok {
		_spec.SetField(player.FieldWeightKg, field.TypeInt32, value)
		_node.WeightKg = value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.SetField(player.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.SetField(player.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pc.mutation.IsActive(); ok {
		_spec.SetField(player.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(player.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(player.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.MatchPlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayersTable,
			Columns: []string{player.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PlayerStatisticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   player.PlayerStatisticTable,
			Columns: []string{player.PlayerStatisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstatistic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.DepartmentTable,
			Columns: []string{player.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DepartmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlayerCreateBulk is the builder for creating many Player entities in bulk.
type PlayerCreateBulk struct {
	config
	err      error
	builders []*PlayerCreate
}

// Save creates the Player entities in the database.
func (pcb *PlayerCreateBulk) Save(ctx context.Context) ([]*Player, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Player, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlayerCreateBulk) SaveX(ctx context.Context) []*Player {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlayerCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlayerCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
