// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"management-be/internal/repository/ent/predicate"
	"management-be/internal/repository/ent/teamfee"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamFeeDelete is the builder for deleting a TeamFee entity.
type TeamFeeDelete struct {
	config
	hooks    []Hook
	mutation *TeamFeeMutation
}

// Where appends a list predicates to the TeamFeeDelete builder.
func (tfd *TeamFeeDelete) Where(ps ...predicate.TeamFee) *TeamFeeDelete {
	tfd.mutation.Where(ps...)
	return tfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tfd *TeamFeeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tfd.sqlExec, tfd.mutation, tfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tfd *TeamFeeDelete) ExecX(ctx context.Context) int {
	n, err := tfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tfd *TeamFeeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(teamfee.Table, sqlgraph.NewFieldSpec(teamfee.FieldID, field.TypeInt32))
	if ps := tfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tfd.mutation.done = true
	return affected, err
}

// TeamFeeDeleteOne is the builder for deleting a single TeamFee entity.
type TeamFeeDeleteOne struct {
	tfd *TeamFeeDelete
}

// Where appends a list predicates to the TeamFeeDelete builder.
func (tfdo *TeamFeeDeleteOne) Where(ps ...predicate.TeamFee) *TeamFeeDeleteOne {
	tfdo.tfd.mutation.Where(ps...)
	return tfdo
}

// Exec executes the deletion query.
func (tfdo *TeamFeeDeleteOne) Exec(ctx context.Context) error {
	n, err := tfdo.tfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{teamfee.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tfdo *TeamFeeDeleteOne) ExecX(ctx context.Context) {
	if err := tfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
