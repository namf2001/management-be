// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"management-be/internal/repository/ent/match"
	"management-be/internal/repository/ent/matchplayer"
	"management-be/internal/repository/ent/predicate"
	"management-be/internal/repository/ent/team"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchUpdate is the builder for updating Match entities.
type MatchUpdate struct {
	config
	hooks    []Hook
	mutation *MatchMutation
}

// Where appends a list predicates to the MatchUpdate builder.
func (mu *MatchUpdate) Where(ps ...predicate.Match) *MatchUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetOpponentTeamID sets the "opponent_team_id" field.
func (mu *MatchUpdate) SetOpponentTeamID(i int) *MatchUpdate {
	mu.mutation.SetOpponentTeamID(i)
	return mu
}

// SetNillableOpponentTeamID sets the "opponent_team_id" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableOpponentTeamID(i *int) *MatchUpdate {
	if i != nil {
		mu.SetOpponentTeamID(*i)
	}
	return mu
}

// ClearOpponentTeamID clears the value of the "opponent_team_id" field.
func (mu *MatchUpdate) ClearOpponentTeamID() *MatchUpdate {
	mu.mutation.ClearOpponentTeamID()
	return mu
}

// SetMatchDate sets the "match_date" field.
func (mu *MatchUpdate) SetMatchDate(t time.Time) *MatchUpdate {
	mu.mutation.SetMatchDate(t)
	return mu
}

// SetNillableMatchDate sets the "match_date" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableMatchDate(t *time.Time) *MatchUpdate {
	if t != nil {
		mu.SetMatchDate(*t)
	}
	return mu
}

// SetVenue sets the "venue" field.
func (mu *MatchUpdate) SetVenue(s string) *MatchUpdate {
	mu.mutation.SetVenue(s)
	return mu
}

// SetNillableVenue sets the "venue" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableVenue(s *string) *MatchUpdate {
	if s != nil {
		mu.SetVenue(*s)
	}
	return mu
}

// ClearVenue clears the value of the "venue" field.
func (mu *MatchUpdate) ClearVenue() *MatchUpdate {
	mu.mutation.ClearVenue()
	return mu
}

// SetIsHomeGame sets the "is_home_game" field.
func (mu *MatchUpdate) SetIsHomeGame(b bool) *MatchUpdate {
	mu.mutation.SetIsHomeGame(b)
	return mu
}

// SetNillableIsHomeGame sets the "is_home_game" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableIsHomeGame(b *bool) *MatchUpdate {
	if b != nil {
		mu.SetIsHomeGame(*b)
	}
	return mu
}

// ClearIsHomeGame clears the value of the "is_home_game" field.
func (mu *MatchUpdate) ClearIsHomeGame() *MatchUpdate {
	mu.mutation.ClearIsHomeGame()
	return mu
}

// SetOurScore sets the "our_score" field.
func (mu *MatchUpdate) SetOurScore(i int32) *MatchUpdate {
	mu.mutation.ResetOurScore()
	mu.mutation.SetOurScore(i)
	return mu
}

// SetNillableOurScore sets the "our_score" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableOurScore(i *int32) *MatchUpdate {
	if i != nil {
		mu.SetOurScore(*i)
	}
	return mu
}

// AddOurScore adds i to the "our_score" field.
func (mu *MatchUpdate) AddOurScore(i int32) *MatchUpdate {
	mu.mutation.AddOurScore(i)
	return mu
}

// ClearOurScore clears the value of the "our_score" field.
func (mu *MatchUpdate) ClearOurScore() *MatchUpdate {
	mu.mutation.ClearOurScore()
	return mu
}

// SetOpponentScore sets the "opponent_score" field.
func (mu *MatchUpdate) SetOpponentScore(i int32) *MatchUpdate {
	mu.mutation.ResetOpponentScore()
	mu.mutation.SetOpponentScore(i)
	return mu
}

// SetNillableOpponentScore sets the "opponent_score" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableOpponentScore(i *int32) *MatchUpdate {
	if i != nil {
		mu.SetOpponentScore(*i)
	}
	return mu
}

// AddOpponentScore adds i to the "opponent_score" field.
func (mu *MatchUpdate) AddOpponentScore(i int32) *MatchUpdate {
	mu.mutation.AddOpponentScore(i)
	return mu
}

// ClearOpponentScore clears the value of the "opponent_score" field.
func (mu *MatchUpdate) ClearOpponentScore() *MatchUpdate {
	mu.mutation.ClearOpponentScore()
	return mu
}

// SetStatus sets the "status" field.
func (mu *MatchUpdate) SetStatus(s string) *MatchUpdate {
	mu.mutation.SetStatus(s)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableStatus(s *string) *MatchUpdate {
	if s != nil {
		mu.SetStatus(*s)
	}
	return mu
}

// ClearStatus clears the value of the "status" field.
func (mu *MatchUpdate) ClearStatus() *MatchUpdate {
	mu.mutation.ClearStatus()
	return mu
}

// SetNotes sets the "notes" field.
func (mu *MatchUpdate) SetNotes(s string) *MatchUpdate {
	mu.mutation.SetNotes(s)
	return mu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableNotes(s *string) *MatchUpdate {
	if s != nil {
		mu.SetNotes(*s)
	}
	return mu
}

// ClearNotes clears the value of the "notes" field.
func (mu *MatchUpdate) ClearNotes() *MatchUpdate {
	mu.mutation.ClearNotes()
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MatchUpdate) SetCreatedAt(t time.Time) *MatchUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableCreatedAt(t *time.Time) *MatchUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (mu *MatchUpdate) ClearCreatedAt() *MatchUpdate {
	mu.mutation.ClearCreatedAt()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MatchUpdate) SetUpdatedAt(t time.Time) *MatchUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableUpdatedAt(t *time.Time) *MatchUpdate {
	if t != nil {
		mu.SetUpdatedAt(*t)
	}
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MatchUpdate) ClearUpdatedAt() *MatchUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// AddMatchPlayerIDs adds the "match_players" edge to the MatchPlayer entity by IDs.
func (mu *MatchUpdate) AddMatchPlayerIDs(ids ...int) *MatchUpdate {
	mu.mutation.AddMatchPlayerIDs(ids...)
	return mu
}

// AddMatchPlayers adds the "match_players" edges to the MatchPlayer entity.
func (mu *MatchUpdate) AddMatchPlayers(m ...*MatchPlayer) *MatchUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMatchPlayerIDs(ids...)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (mu *MatchUpdate) SetTeamID(id int) *MatchUpdate {
	mu.mutation.SetTeamID(id)
	return mu
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (mu *MatchUpdate) SetNillableTeamID(id *int) *MatchUpdate {
	if id != nil {
		mu = mu.SetTeamID(*id)
	}
	return mu
}

// SetTeam sets the "team" edge to the Team entity.
func (mu *MatchUpdate) SetTeam(t *Team) *MatchUpdate {
	return mu.SetTeamID(t.ID)
}

// Mutation returns the MatchMutation object of the builder.
func (mu *MatchUpdate) Mutation() *MatchMutation {
	return mu.mutation
}

// ClearMatchPlayers clears all "match_players" edges to the MatchPlayer entity.
func (mu *MatchUpdate) ClearMatchPlayers() *MatchUpdate {
	mu.mutation.ClearMatchPlayers()
	return mu
}

// RemoveMatchPlayerIDs removes the "match_players" edge to MatchPlayer entities by IDs.
func (mu *MatchUpdate) RemoveMatchPlayerIDs(ids ...int) *MatchUpdate {
	mu.mutation.RemoveMatchPlayerIDs(ids...)
	return mu
}

// RemoveMatchPlayers removes "match_players" edges to MatchPlayer entities.
func (mu *MatchUpdate) RemoveMatchPlayers(m ...*MatchPlayer) *MatchUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMatchPlayerIDs(ids...)
}

// ClearTeam clears the "team" edge to the Team entity.
func (mu *MatchUpdate) ClearTeam() *MatchUpdate {
	mu.mutation.ClearTeam()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MatchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MatchUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MatchUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MatchUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MatchDate(); ok {
		_spec.SetField(match.FieldMatchDate, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Venue(); ok {
		_spec.SetField(match.FieldVenue, field.TypeString, value)
	}
	if mu.mutation.VenueCleared() {
		_spec.ClearField(match.FieldVenue, field.TypeString)
	}
	if value, ok := mu.mutation.IsHomeGame(); ok {
		_spec.SetField(match.FieldIsHomeGame, field.TypeBool, value)
	}
	if mu.mutation.IsHomeGameCleared() {
		_spec.ClearField(match.FieldIsHomeGame, field.TypeBool)
	}
	if value, ok := mu.mutation.OurScore(); ok {
		_spec.SetField(match.FieldOurScore, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.AddedOurScore(); ok {
		_spec.AddField(match.FieldOurScore, field.TypeInt32, value)
	}
	if mu.mutation.OurScoreCleared() {
		_spec.ClearField(match.FieldOurScore, field.TypeInt32)
	}
	if value, ok := mu.mutation.OpponentScore(); ok {
		_spec.SetField(match.FieldOpponentScore, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.AddedOpponentScore(); ok {
		_spec.AddField(match.FieldOpponentScore, field.TypeInt32, value)
	}
	if mu.mutation.OpponentScoreCleared() {
		_spec.ClearField(match.FieldOpponentScore, field.TypeInt32)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(match.FieldStatus, field.TypeString, value)
	}
	if mu.mutation.StatusCleared() {
		_spec.ClearField(match.FieldStatus, field.TypeString)
	}
	if value, ok := mu.mutation.Notes(); ok {
		_spec.SetField(match.FieldNotes, field.TypeString, value)
	}
	if mu.mutation.NotesCleared() {
		_spec.ClearField(match.FieldNotes, field.TypeString)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(match.FieldCreatedAt, field.TypeTime, value)
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.ClearField(match.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(match.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.ClearField(match.FieldUpdatedAt, field.TypeTime)
	}
	if mu.mutation.MatchPlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchPlayersTable,
			Columns: []string{match.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMatchPlayersIDs(); len(nodes) > 0 && !mu.mutation.MatchPlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchPlayersTable,
			Columns: []string{match.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MatchPlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchPlayersTable,
			Columns: []string{match.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.TeamTable,
			Columns: []string{match.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.TeamTable,
			Columns: []string{match.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MatchUpdateOne is the builder for updating a single Match entity.
type MatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchMutation
}

// SetOpponentTeamID sets the "opponent_team_id" field.
func (muo *MatchUpdateOne) SetOpponentTeamID(i int) *MatchUpdateOne {
	muo.mutation.SetOpponentTeamID(i)
	return muo
}

// SetNillableOpponentTeamID sets the "opponent_team_id" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableOpponentTeamID(i *int) *MatchUpdateOne {
	if i != nil {
		muo.SetOpponentTeamID(*i)
	}
	return muo
}

// ClearOpponentTeamID clears the value of the "opponent_team_id" field.
func (muo *MatchUpdateOne) ClearOpponentTeamID() *MatchUpdateOne {
	muo.mutation.ClearOpponentTeamID()
	return muo
}

// SetMatchDate sets the "match_date" field.
func (muo *MatchUpdateOne) SetMatchDate(t time.Time) *MatchUpdateOne {
	muo.mutation.SetMatchDate(t)
	return muo
}

// SetNillableMatchDate sets the "match_date" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableMatchDate(t *time.Time) *MatchUpdateOne {
	if t != nil {
		muo.SetMatchDate(*t)
	}
	return muo
}

// SetVenue sets the "venue" field.
func (muo *MatchUpdateOne) SetVenue(s string) *MatchUpdateOne {
	muo.mutation.SetVenue(s)
	return muo
}

// SetNillableVenue sets the "venue" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableVenue(s *string) *MatchUpdateOne {
	if s != nil {
		muo.SetVenue(*s)
	}
	return muo
}

// ClearVenue clears the value of the "venue" field.
func (muo *MatchUpdateOne) ClearVenue() *MatchUpdateOne {
	muo.mutation.ClearVenue()
	return muo
}

// SetIsHomeGame sets the "is_home_game" field.
func (muo *MatchUpdateOne) SetIsHomeGame(b bool) *MatchUpdateOne {
	muo.mutation.SetIsHomeGame(b)
	return muo
}

// SetNillableIsHomeGame sets the "is_home_game" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableIsHomeGame(b *bool) *MatchUpdateOne {
	if b != nil {
		muo.SetIsHomeGame(*b)
	}
	return muo
}

// ClearIsHomeGame clears the value of the "is_home_game" field.
func (muo *MatchUpdateOne) ClearIsHomeGame() *MatchUpdateOne {
	muo.mutation.ClearIsHomeGame()
	return muo
}

// SetOurScore sets the "our_score" field.
func (muo *MatchUpdateOne) SetOurScore(i int32) *MatchUpdateOne {
	muo.mutation.ResetOurScore()
	muo.mutation.SetOurScore(i)
	return muo
}

// SetNillableOurScore sets the "our_score" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableOurScore(i *int32) *MatchUpdateOne {
	if i != nil {
		muo.SetOurScore(*i)
	}
	return muo
}

// AddOurScore adds i to the "our_score" field.
func (muo *MatchUpdateOne) AddOurScore(i int32) *MatchUpdateOne {
	muo.mutation.AddOurScore(i)
	return muo
}

// ClearOurScore clears the value of the "our_score" field.
func (muo *MatchUpdateOne) ClearOurScore() *MatchUpdateOne {
	muo.mutation.ClearOurScore()
	return muo
}

// SetOpponentScore sets the "opponent_score" field.
func (muo *MatchUpdateOne) SetOpponentScore(i int32) *MatchUpdateOne {
	muo.mutation.ResetOpponentScore()
	muo.mutation.SetOpponentScore(i)
	return muo
}

// SetNillableOpponentScore sets the "opponent_score" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableOpponentScore(i *int32) *MatchUpdateOne {
	if i != nil {
		muo.SetOpponentScore(*i)
	}
	return muo
}

// AddOpponentScore adds i to the "opponent_score" field.
func (muo *MatchUpdateOne) AddOpponentScore(i int32) *MatchUpdateOne {
	muo.mutation.AddOpponentScore(i)
	return muo
}

// ClearOpponentScore clears the value of the "opponent_score" field.
func (muo *MatchUpdateOne) ClearOpponentScore() *MatchUpdateOne {
	muo.mutation.ClearOpponentScore()
	return muo
}

// SetStatus sets the "status" field.
func (muo *MatchUpdateOne) SetStatus(s string) *MatchUpdateOne {
	muo.mutation.SetStatus(s)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableStatus(s *string) *MatchUpdateOne {
	if s != nil {
		muo.SetStatus(*s)
	}
	return muo
}

// ClearStatus clears the value of the "status" field.
func (muo *MatchUpdateOne) ClearStatus() *MatchUpdateOne {
	muo.mutation.ClearStatus()
	return muo
}

// SetNotes sets the "notes" field.
func (muo *MatchUpdateOne) SetNotes(s string) *MatchUpdateOne {
	muo.mutation.SetNotes(s)
	return muo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableNotes(s *string) *MatchUpdateOne {
	if s != nil {
		muo.SetNotes(*s)
	}
	return muo
}

// ClearNotes clears the value of the "notes" field.
func (muo *MatchUpdateOne) ClearNotes() *MatchUpdateOne {
	muo.mutation.ClearNotes()
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MatchUpdateOne) SetCreatedAt(t time.Time) *MatchUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableCreatedAt(t *time.Time) *MatchUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (muo *MatchUpdateOne) ClearCreatedAt() *MatchUpdateOne {
	muo.mutation.ClearCreatedAt()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MatchUpdateOne) SetUpdatedAt(t time.Time) *MatchUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableUpdatedAt(t *time.Time) *MatchUpdateOne {
	if t != nil {
		muo.SetUpdatedAt(*t)
	}
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MatchUpdateOne) ClearUpdatedAt() *MatchUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// AddMatchPlayerIDs adds the "match_players" edge to the MatchPlayer entity by IDs.
func (muo *MatchUpdateOne) AddMatchPlayerIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.AddMatchPlayerIDs(ids...)
	return muo
}

// AddMatchPlayers adds the "match_players" edges to the MatchPlayer entity.
func (muo *MatchUpdateOne) AddMatchPlayers(m ...*MatchPlayer) *MatchUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMatchPlayerIDs(ids...)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (muo *MatchUpdateOne) SetTeamID(id int) *MatchUpdateOne {
	muo.mutation.SetTeamID(id)
	return muo
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableTeamID(id *int) *MatchUpdateOne {
	if id != nil {
		muo = muo.SetTeamID(*id)
	}
	return muo
}

// SetTeam sets the "team" edge to the Team entity.
func (muo *MatchUpdateOne) SetTeam(t *Team) *MatchUpdateOne {
	return muo.SetTeamID(t.ID)
}

// Mutation returns the MatchMutation object of the builder.
func (muo *MatchUpdateOne) Mutation() *MatchMutation {
	return muo.mutation
}

// ClearMatchPlayers clears all "match_players" edges to the MatchPlayer entity.
func (muo *MatchUpdateOne) ClearMatchPlayers() *MatchUpdateOne {
	muo.mutation.ClearMatchPlayers()
	return muo
}

// RemoveMatchPlayerIDs removes the "match_players" edge to MatchPlayer entities by IDs.
func (muo *MatchUpdateOne) RemoveMatchPlayerIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.RemoveMatchPlayerIDs(ids...)
	return muo
}

// RemoveMatchPlayers removes "match_players" edges to MatchPlayer entities.
func (muo *MatchUpdateOne) RemoveMatchPlayers(m ...*MatchPlayer) *MatchUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMatchPlayerIDs(ids...)
}

// ClearTeam clears the "team" edge to the Team entity.
func (muo *MatchUpdateOne) ClearTeam() *MatchUpdateOne {
	muo.mutation.ClearTeam()
	return muo
}

// Where appends a list predicates to the MatchUpdate builder.
func (muo *MatchUpdateOne) Where(ps ...predicate.Match) *MatchUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MatchUpdateOne) Select(field string, fields ...string) *MatchUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Match entity.
func (muo *MatchUpdateOne) Save(ctx context.Context) (*Match, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MatchUpdateOne) SaveX(ctx context.Context) *Match {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MatchUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MatchUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MatchUpdateOne) sqlSave(ctx context.Context) (_node *Match, err error) {
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Match.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, match.FieldID)
		for _, f := range fields {
			if !match.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != match.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.MatchDate(); ok {
		_spec.SetField(match.FieldMatchDate, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Venue(); ok {
		_spec.SetField(match.FieldVenue, field.TypeString, value)
	}
	if muo.mutation.VenueCleared() {
		_spec.ClearField(match.FieldVenue, field.TypeString)
	}
	if value, ok := muo.mutation.IsHomeGame(); ok {
		_spec.SetField(match.FieldIsHomeGame, field.TypeBool, value)
	}
	if muo.mutation.IsHomeGameCleared() {
		_spec.ClearField(match.FieldIsHomeGame, field.TypeBool)
	}
	if value, ok := muo.mutation.OurScore(); ok {
		_spec.SetField(match.FieldOurScore, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.AddedOurScore(); ok {
		_spec.AddField(match.FieldOurScore, field.TypeInt32, value)
	}
	if muo.mutation.OurScoreCleared() {
		_spec.ClearField(match.FieldOurScore, field.TypeInt32)
	}
	if value, ok := muo.mutation.OpponentScore(); ok {
		_spec.SetField(match.FieldOpponentScore, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.AddedOpponentScore(); ok {
		_spec.AddField(match.FieldOpponentScore, field.TypeInt32, value)
	}
	if muo.mutation.OpponentScoreCleared() {
		_spec.ClearField(match.FieldOpponentScore, field.TypeInt32)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(match.FieldStatus, field.TypeString, value)
	}
	if muo.mutation.StatusCleared() {
		_spec.ClearField(match.FieldStatus, field.TypeString)
	}
	if value, ok := muo.mutation.Notes(); ok {
		_spec.SetField(match.FieldNotes, field.TypeString, value)
	}
	if muo.mutation.NotesCleared() {
		_spec.ClearField(match.FieldNotes, field.TypeString)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(match.FieldCreatedAt, field.TypeTime, value)
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.ClearField(match.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(match.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.ClearField(match.FieldUpdatedAt, field.TypeTime)
	}
	if muo.mutation.MatchPlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchPlayersTable,
			Columns: []string{match.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMatchPlayersIDs(); len(nodes) > 0 && !muo.mutation.MatchPlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchPlayersTable,
			Columns: []string{match.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MatchPlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.MatchPlayersTable,
			Columns: []string{match.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.TeamTable,
			Columns: []string{match.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.TeamTable,
			Columns: []string{match.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Match{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
