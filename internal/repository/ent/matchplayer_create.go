// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"management-be/internal/repository/ent/match"
	"management-be/internal/repository/ent/matchplayer"
	"management-be/internal/repository/ent/player"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchPlayerCreate is the builder for creating a MatchPlayer entity.
type MatchPlayerCreate struct {
	config
	mutation *MatchPlayerMutation
	hooks    []Hook
}

// SetMatchID sets the "match_id" field.
func (mpc *MatchPlayerCreate) SetMatchID(i int) *MatchPlayerCreate {
	mpc.mutation.SetMatchID(i)
	return mpc
}

// SetNillableMatchID sets the "match_id" field if the given value is not nil.
func (mpc *MatchPlayerCreate) SetNillableMatchID(i *int) *MatchPlayerCreate {
	if i != nil {
		mpc.SetMatchID(*i)
	}
	return mpc
}

// SetPlayerID sets the "player_id" field.
func (mpc *MatchPlayerCreate) SetPlayerID(i int) *MatchPlayerCreate {
	mpc.mutation.SetPlayerID(i)
	return mpc
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (mpc *MatchPlayerCreate) SetNillablePlayerID(i *int) *MatchPlayerCreate {
	if i != nil {
		mpc.SetPlayerID(*i)
	}
	return mpc
}

// SetMinutesPlayed sets the "minutes_played" field.
func (mpc *MatchPlayerCreate) SetMinutesPlayed(i int32) *MatchPlayerCreate {
	mpc.mutation.SetMinutesPlayed(i)
	return mpc
}

// SetNillableMinutesPlayed sets the "minutes_played" field if the given value is not nil.
func (mpc *MatchPlayerCreate) SetNillableMinutesPlayed(i *int32) *MatchPlayerCreate {
	if i != nil {
		mpc.SetMinutesPlayed(*i)
	}
	return mpc
}

// SetGoalsScored sets the "goals_scored" field.
func (mpc *MatchPlayerCreate) SetGoalsScored(i int32) *MatchPlayerCreate {
	mpc.mutation.SetGoalsScored(i)
	return mpc
}

// SetNillableGoalsScored sets the "goals_scored" field if the given value is not nil.
func (mpc *MatchPlayerCreate) SetNillableGoalsScored(i *int32) *MatchPlayerCreate {
	if i != nil {
		mpc.SetGoalsScored(*i)
	}
	return mpc
}

// SetAssists sets the "assists" field.
func (mpc *MatchPlayerCreate) SetAssists(i int32) *MatchPlayerCreate {
	mpc.mutation.SetAssists(i)
	return mpc
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (mpc *MatchPlayerCreate) SetNillableAssists(i *int32) *MatchPlayerCreate {
	if i != nil {
		mpc.SetAssists(*i)
	}
	return mpc
}

// SetYellowCards sets the "yellow_cards" field.
func (mpc *MatchPlayerCreate) SetYellowCards(i int32) *MatchPlayerCreate {
	mpc.mutation.SetYellowCards(i)
	return mpc
}

// SetNillableYellowCards sets the "yellow_cards" field if the given value is not nil.
func (mpc *MatchPlayerCreate) SetNillableYellowCards(i *int32) *MatchPlayerCreate {
	if i != nil {
		mpc.SetYellowCards(*i)
	}
	return mpc
}

// SetRedCard sets the "red_card" field.
func (mpc *MatchPlayerCreate) SetRedCard(b bool) *MatchPlayerCreate {
	mpc.mutation.SetRedCard(b)
	return mpc
}

// SetNillableRedCard sets the "red_card" field if the given value is not nil.
func (mpc *MatchPlayerCreate) SetNillableRedCard(b *bool) *MatchPlayerCreate {
	if b != nil {
		mpc.SetRedCard(*b)
	}
	return mpc
}

// SetCreatedAt sets the "created_at" field.
func (mpc *MatchPlayerCreate) SetCreatedAt(t time.Time) *MatchPlayerCreate {
	mpc.mutation.SetCreatedAt(t)
	return mpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpc *MatchPlayerCreate) SetNillableCreatedAt(t *time.Time) *MatchPlayerCreate {
	if t != nil {
		mpc.SetCreatedAt(*t)
	}
	return mpc
}

// SetUpdatedAt sets the "updated_at" field.
func (mpc *MatchPlayerCreate) SetUpdatedAt(t time.Time) *MatchPlayerCreate {
	mpc.mutation.SetUpdatedAt(t)
	return mpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mpc *MatchPlayerCreate) SetNillableUpdatedAt(t *time.Time) *MatchPlayerCreate {
	if t != nil {
		mpc.SetUpdatedAt(*t)
	}
	return mpc
}

// SetID sets the "id" field.
func (mpc *MatchPlayerCreate) SetID(i int) *MatchPlayerCreate {
	mpc.mutation.SetID(i)
	return mpc
}

// SetMatch sets the "match" edge to the Match entity.
func (mpc *MatchPlayerCreate) SetMatch(m *Match) *MatchPlayerCreate {
	return mpc.SetMatchID(m.ID)
}

// SetPlayer sets the "player" edge to the Player entity.
func (mpc *MatchPlayerCreate) SetPlayer(p *Player) *MatchPlayerCreate {
	return mpc.SetPlayerID(p.ID)
}

// Mutation returns the MatchPlayerMutation object of the builder.
func (mpc *MatchPlayerCreate) Mutation() *MatchPlayerMutation {
	return mpc.mutation
}

// Save creates the MatchPlayer in the database.
func (mpc *MatchPlayerCreate) Save(ctx context.Context) (*MatchPlayer, error) {
	return withHooks(ctx, mpc.sqlSave, mpc.mutation, mpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *MatchPlayerCreate) SaveX(ctx context.Context) *MatchPlayer {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpc *MatchPlayerCreate) Exec(ctx context.Context) error {
	_, err := mpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpc *MatchPlayerCreate) ExecX(ctx context.Context) {
	if err := mpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpc *MatchPlayerCreate) check() error {
	return nil
}

func (mpc *MatchPlayerCreate) sqlSave(ctx context.Context) (*MatchPlayer, error) {
	if err := mpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mpc.mutation.id = &_node.ID
	mpc.mutation.done = true
	return _node, nil
}

func (mpc *MatchPlayerCreate) createSpec() (*MatchPlayer, *sqlgraph.CreateSpec) {
	var (
		_node = &MatchPlayer{config: mpc.config}
		_spec = sqlgraph.NewCreateSpec(matchplayer.Table, sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt))
	)
	if id, ok := mpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mpc.mutation.MinutesPlayed(); ok {
		_spec.SetField(matchplayer.FieldMinutesPlayed, field.TypeInt32, value)
		_node.MinutesPlayed = value
	}
	if value, ok := mpc.mutation.GoalsScored(); ok {
		_spec.SetField(matchplayer.FieldGoalsScored, field.TypeInt32, value)
		_node.GoalsScored = value
	}
	if value, ok := mpc.mutation.Assists(); ok {
		_spec.SetField(matchplayer.FieldAssists, field.TypeInt32, value)
		_node.Assists = value
	}
	if value, ok := mpc.mutation.YellowCards(); ok {
		_spec.SetField(matchplayer.FieldYellowCards, field.TypeInt32, value)
		_node.YellowCards = value
	}
	if value, ok := mpc.mutation.RedCard(); ok {
		_spec.SetField(matchplayer.FieldRedCard, field.TypeBool, value)
		_node.RedCard = value
	}
	if value, ok := mpc.mutation.CreatedAt(); ok {
		_spec.SetField(matchplayer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mpc.mutation.UpdatedAt(); ok {
		_spec.SetField(matchplayer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := mpc.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.MatchTable,
			Columns: []string{matchplayer.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MatchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpc.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.PlayerTable,
			Columns: []string{matchplayer.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlayerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MatchPlayerCreateBulk is the builder for creating many MatchPlayer entities in bulk.
type MatchPlayerCreateBulk struct {
	config
	err      error
	builders []*MatchPlayerCreate
}

// Save creates the MatchPlayer entities in the database.
func (mpcb *MatchPlayerCreateBulk) Save(ctx context.Context) ([]*MatchPlayer, error) {
	if mpcb.err != nil {
		return nil, mpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*MatchPlayer, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MatchPlayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *MatchPlayerCreateBulk) SaveX(ctx context.Context) []*MatchPlayer {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcb *MatchPlayerCreateBulk) Exec(ctx context.Context) error {
	_, err := mpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcb *MatchPlayerCreateBulk) ExecX(ctx context.Context) {
	if err := mpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
