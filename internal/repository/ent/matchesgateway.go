// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"management-be/internal/repository/ent/matchesgateway"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MatchesGateway is the model entity for the MatchesGateway schema.
type MatchesGateway struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CompetitionName holds the value of the "competition_name" field.
	CompetitionName string `json:"competition_name,omitempty"`
	// SeasonStartDate holds the value of the "season_start_date" field.
	SeasonStartDate time.Time `json:"season_start_date,omitempty"`
	// MatchDate holds the value of the "match_date" field.
	MatchDate time.Time `json:"match_date,omitempty"`
	// HomeTeamName holds the value of the "home_team_name" field.
	HomeTeamName string `json:"home_team_name,omitempty"`
	// HomeTeamShortName holds the value of the "home_team_short_name" field.
	HomeTeamShortName string `json:"home_team_short_name,omitempty"`
	// HomeTeamLogo holds the value of the "home_team_logo" field.
	HomeTeamLogo string `json:"home_team_logo,omitempty"`
	// AwayTeamName holds the value of the "away_team_name" field.
	AwayTeamName string `json:"away_team_name,omitempty"`
	// AwayTeamShortName holds the value of the "away_team_short_name" field.
	AwayTeamShortName string `json:"away_team_short_name,omitempty"`
	// AwayTeamLogo holds the value of the "away_team_logo" field.
	AwayTeamLogo string `json:"away_team_logo,omitempty"`
	// HomeScore holds the value of the "home_score" field.
	HomeScore int32 `json:"home_score,omitempty"`
	// AwayScore holds the value of the "away_score" field.
	AwayScore int32 `json:"away_score,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MatchesGateway) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case matchesgateway.FieldID, matchesgateway.FieldHomeScore, matchesgateway.FieldAwayScore:
			values[i] = new(sql.NullInt64)
		case matchesgateway.FieldCompetitionName, matchesgateway.FieldHomeTeamName, matchesgateway.FieldHomeTeamShortName, matchesgateway.FieldHomeTeamLogo, matchesgateway.FieldAwayTeamName, matchesgateway.FieldAwayTeamShortName, matchesgateway.FieldAwayTeamLogo, matchesgateway.FieldStatus:
			values[i] = new(sql.NullString)
		case matchesgateway.FieldSeasonStartDate, matchesgateway.FieldMatchDate, matchesgateway.FieldCreatedAt, matchesgateway.FieldUpdatedAt, matchesgateway.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MatchesGateway fields.
func (mg *MatchesGateway) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case matchesgateway.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mg.ID = int(value.Int64)
		case matchesgateway.FieldCompetitionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field competition_name", values[i])
			} else if value.Valid {
				mg.CompetitionName = value.String
			}
		case matchesgateway.FieldSeasonStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field season_start_date", values[i])
			} else if value.Valid {
				mg.SeasonStartDate = value.Time
			}
		case matchesgateway.FieldMatchDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field match_date", values[i])
			} else if value.Valid {
				mg.MatchDate = value.Time
			}
		case matchesgateway.FieldHomeTeamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field home_team_name", values[i])
			} else if value.Valid {
				mg.HomeTeamName = value.String
			}
		case matchesgateway.FieldHomeTeamShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field home_team_short_name", values[i])
			} else if value.Valid {
				mg.HomeTeamShortName = value.String
			}
		case matchesgateway.FieldHomeTeamLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field home_team_logo", values[i])
			} else if value.Valid {
				mg.HomeTeamLogo = value.String
			}
		case matchesgateway.FieldAwayTeamName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field away_team_name", values[i])
			} else if value.Valid {
				mg.AwayTeamName = value.String
			}
		case matchesgateway.FieldAwayTeamShortName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field away_team_short_name", values[i])
			} else if value.Valid {
				mg.AwayTeamShortName = value.String
			}
		case matchesgateway.FieldAwayTeamLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field away_team_logo", values[i])
			} else if value.Valid {
				mg.AwayTeamLogo = value.String
			}
		case matchesgateway.FieldHomeScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field home_score", values[i])
			} else if value.Valid {
				mg.HomeScore = int32(value.Int64)
			}
		case matchesgateway.FieldAwayScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field away_score", values[i])
			} else if value.Valid {
				mg.AwayScore = int32(value.Int64)
			}
		case matchesgateway.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mg.Status = value.String
			}
		case matchesgateway.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mg.CreatedAt = value.Time
			}
		case matchesgateway.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mg.UpdatedAt = value.Time
			}
		case matchesgateway.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mg.DeletedAt = value.Time
			}
		default:
			mg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MatchesGateway.
// This includes values selected through modifiers, order, etc.
func (mg *MatchesGateway) Value(name string) (ent.Value, error) {
	return mg.selectValues.Get(name)
}

// Update returns a builder for updating this MatchesGateway.
// Note that you need to call MatchesGateway.Unwrap() before calling this method if this MatchesGateway
// was returned from a transaction, and the transaction was committed or rolled back.
func (mg *MatchesGateway) Update() *MatchesGatewayUpdateOne {
	return NewMatchesGatewayClient(mg.config).UpdateOne(mg)
}

// Unwrap unwraps the MatchesGateway entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mg *MatchesGateway) Unwrap() *MatchesGateway {
	_tx, ok := mg.config.driver.(*txDriver)
	if !ok {
		panic("ent: MatchesGateway is not a transactional entity")
	}
	mg.config.driver = _tx.drv
	return mg
}

// String implements the fmt.Stringer.
func (mg *MatchesGateway) String() string {
	var builder strings.Builder
	builder.WriteString("MatchesGateway(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mg.ID))
	builder.WriteString("competition_name=")
	builder.WriteString(mg.CompetitionName)
	builder.WriteString(", ")
	builder.WriteString("season_start_date=")
	builder.WriteString(mg.SeasonStartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("match_date=")
	builder.WriteString(mg.MatchDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("home_team_name=")
	builder.WriteString(mg.HomeTeamName)
	builder.WriteString(", ")
	builder.WriteString("home_team_short_name=")
	builder.WriteString(mg.HomeTeamShortName)
	builder.WriteString(", ")
	builder.WriteString("home_team_logo=")
	builder.WriteString(mg.HomeTeamLogo)
	builder.WriteString(", ")
	builder.WriteString("away_team_name=")
	builder.WriteString(mg.AwayTeamName)
	builder.WriteString(", ")
	builder.WriteString("away_team_short_name=")
	builder.WriteString(mg.AwayTeamShortName)
	builder.WriteString(", ")
	builder.WriteString("away_team_logo=")
	builder.WriteString(mg.AwayTeamLogo)
	builder.WriteString(", ")
	builder.WriteString("home_score=")
	builder.WriteString(fmt.Sprintf("%v", mg.HomeScore))
	builder.WriteString(", ")
	builder.WriteString("away_score=")
	builder.WriteString(fmt.Sprintf("%v", mg.AwayScore))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(mg.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mg.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mg.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(mg.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MatchesGateways is a parsable slice of MatchesGateway.
type MatchesGateways []*MatchesGateway
