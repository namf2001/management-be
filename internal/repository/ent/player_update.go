// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"management-be/internal/repository/ent/department"
	"management-be/internal/repository/ent/matchplayer"
	"management-be/internal/repository/ent/player"
	"management-be/internal/repository/ent/playerstatistic"
	"management-be/internal/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerUpdate is the builder for updating Player entities.
type PlayerUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerMutation
}

// Where appends a list predicates to the PlayerUpdate builder.
func (pu *PlayerUpdate) Where(ps ...predicate.Player) *PlayerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDepartmentID sets the "department_id" field.
func (pu *PlayerUpdate) SetDepartmentID(i int) *PlayerUpdate {
	pu.mutation.SetDepartmentID(i)
	return pu
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableDepartmentID(i *int) *PlayerUpdate {
	if i != nil {
		pu.SetDepartmentID(*i)
	}
	return pu
}

// ClearDepartmentID clears the value of the "department_id" field.
func (pu *PlayerUpdate) ClearDepartmentID() *PlayerUpdate {
	pu.mutation.ClearDepartmentID()
	return pu
}

// SetFullName sets the "full_name" field.
func (pu *PlayerUpdate) SetFullName(s string) *PlayerUpdate {
	pu.mutation.SetFullName(s)
	return pu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableFullName(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetFullName(*s)
	}
	return pu
}

// SetJerseyNumber sets the "jersey_number" field.
func (pu *PlayerUpdate) SetJerseyNumber(i int32) *PlayerUpdate {
	pu.mutation.ResetJerseyNumber()
	pu.mutation.SetJerseyNumber(i)
	return pu
}

// SetNillableJerseyNumber sets the "jersey_number" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableJerseyNumber(i *int32) *PlayerUpdate {
	if i != nil {
		pu.SetJerseyNumber(*i)
	}
	return pu
}

// AddJerseyNumber adds i to the "jersey_number" field.
func (pu *PlayerUpdate) AddJerseyNumber(i int32) *PlayerUpdate {
	pu.mutation.AddJerseyNumber(i)
	return pu
}

// ClearJerseyNumber clears the value of the "jersey_number" field.
func (pu *PlayerUpdate) ClearJerseyNumber() *PlayerUpdate {
	pu.mutation.ClearJerseyNumber()
	return pu
}

// SetPosition sets the "position" field.
func (pu *PlayerUpdate) SetPosition(s string) *PlayerUpdate {
	pu.mutation.SetPosition(s)
	return pu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillablePosition(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetPosition(*s)
	}
	return pu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (pu *PlayerUpdate) SetDateOfBirth(t time.Time) *PlayerUpdate {
	pu.mutation.SetDateOfBirth(t)
	return pu
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableDateOfBirth(t *time.Time) *PlayerUpdate {
	if t != nil {
		pu.SetDateOfBirth(*t)
	}
	return pu
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (pu *PlayerUpdate) ClearDateOfBirth() *PlayerUpdate {
	pu.mutation.ClearDateOfBirth()
	return pu
}

// SetHeightCm sets the "height_cm" field.
func (pu *PlayerUpdate) SetHeightCm(i int32) *PlayerUpdate {
	pu.mutation.ResetHeightCm()
	pu.mutation.SetHeightCm(i)
	return pu
}

// SetNillableHeightCm sets the "height_cm" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableHeightCm(i *int32) *PlayerUpdate {
	if i != nil {
		pu.SetHeightCm(*i)
	}
	return pu
}

// AddHeightCm adds i to the "height_cm" field.
func (pu *PlayerUpdate) AddHeightCm(i int32) *PlayerUpdate {
	pu.mutation.AddHeightCm(i)
	return pu
}

// ClearHeightCm clears the value of the "height_cm" field.
func (pu *PlayerUpdate) ClearHeightCm() *PlayerUpdate {
	pu.mutation.ClearHeightCm()
	return pu
}

// SetWeightKg sets the "weight_kg" field.
func (pu *PlayerUpdate) SetWeightKg(i int32) *PlayerUpdate {
	pu.mutation.ResetWeightKg()
	pu.mutation.SetWeightKg(i)
	return pu
}

// SetNillableWeightKg sets the "weight_kg" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableWeightKg(i *int32) *PlayerUpdate {
	if i != nil {
		pu.SetWeightKg(*i)
	}
	return pu
}

// AddWeightKg adds i to the "weight_kg" field.
func (pu *PlayerUpdate) AddWeightKg(i int32) *PlayerUpdate {
	pu.mutation.AddWeightKg(i)
	return pu
}

// ClearWeightKg clears the value of the "weight_kg" field.
func (pu *PlayerUpdate) ClearWeightKg() *PlayerUpdate {
	pu.mutation.ClearWeightKg()
	return pu
}

// SetPhone sets the "phone" field.
func (pu *PlayerUpdate) SetPhone(s string) *PlayerUpdate {
	pu.mutation.SetPhone(s)
	return pu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillablePhone(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetPhone(*s)
	}
	return pu
}

// ClearPhone clears the value of the "phone" field.
func (pu *PlayerUpdate) ClearPhone() *PlayerUpdate {
	pu.mutation.ClearPhone()
	return pu
}

// SetEmail sets the "email" field.
func (pu *PlayerUpdate) SetEmail(s string) *PlayerUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableEmail(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// ClearEmail clears the value of the "email" field.
func (pu *PlayerUpdate) ClearEmail() *PlayerUpdate {
	pu.mutation.ClearEmail()
	return pu
}

// SetIsActive sets the "is_active" field.
func (pu *PlayerUpdate) SetIsActive(b bool) *PlayerUpdate {
	pu.mutation.SetIsActive(b)
	return pu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableIsActive(b *bool) *PlayerUpdate {
	if b != nil {
		pu.SetIsActive(*b)
	}
	return pu
}

// ClearIsActive clears the value of the "is_active" field.
func (pu *PlayerUpdate) ClearIsActive() *PlayerUpdate {
	pu.mutation.ClearIsActive()
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PlayerUpdate) SetCreatedAt(t time.Time) *PlayerUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableCreatedAt(t *time.Time) *PlayerUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (pu *PlayerUpdate) ClearCreatedAt() *PlayerUpdate {
	pu.mutation.ClearCreatedAt()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PlayerUpdate) SetUpdatedAt(t time.Time) *PlayerUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableUpdatedAt(t *time.Time) *PlayerUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *PlayerUpdate) ClearUpdatedAt() *PlayerUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// AddMatchPlayerIDs adds the "match_players" edge to the MatchPlayer entity by IDs.
func (pu *PlayerUpdate) AddMatchPlayerIDs(ids ...int) *PlayerUpdate {
	pu.mutation.AddMatchPlayerIDs(ids...)
	return pu
}

// AddMatchPlayers adds the "match_players" edges to the MatchPlayer entity.
func (pu *PlayerUpdate) AddMatchPlayers(m ...*MatchPlayer) *PlayerUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMatchPlayerIDs(ids...)
}

// SetPlayerStatisticID sets the "player_statistic" edge to the PlayerStatistic entity by ID.
func (pu *PlayerUpdate) SetPlayerStatisticID(id int) *PlayerUpdate {
	pu.mutation.SetPlayerStatisticID(id)
	return pu
}

// SetNillablePlayerStatisticID sets the "player_statistic" edge to the PlayerStatistic entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillablePlayerStatisticID(id *int) *PlayerUpdate {
	if id != nil {
		pu = pu.SetPlayerStatisticID(*id)
	}
	return pu
}

// SetPlayerStatistic sets the "player_statistic" edge to the PlayerStatistic entity.
func (pu *PlayerUpdate) SetPlayerStatistic(p *PlayerStatistic) *PlayerUpdate {
	return pu.SetPlayerStatisticID(p.ID)
}

// SetDepartment sets the "department" edge to the Department entity.
func (pu *PlayerUpdate) SetDepartment(d *Department) *PlayerUpdate {
	return pu.SetDepartmentID(d.ID)
}

// Mutation returns the PlayerMutation object of the builder.
func (pu *PlayerUpdate) Mutation() *PlayerMutation {
	return pu.mutation
}

// ClearMatchPlayers clears all "match_players" edges to the MatchPlayer entity.
func (pu *PlayerUpdate) ClearMatchPlayers() *PlayerUpdate {
	pu.mutation.ClearMatchPlayers()
	return pu
}

// RemoveMatchPlayerIDs removes the "match_players" edge to MatchPlayer entities by IDs.
func (pu *PlayerUpdate) RemoveMatchPlayerIDs(ids ...int) *PlayerUpdate {
	pu.mutation.RemoveMatchPlayerIDs(ids...)
	return pu
}

// RemoveMatchPlayers removes "match_players" edges to MatchPlayer entities.
func (pu *PlayerUpdate) RemoveMatchPlayers(m ...*MatchPlayer) *PlayerUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMatchPlayerIDs(ids...)
}

// ClearPlayerStatistic clears the "player_statistic" edge to the PlayerStatistic entity.
func (pu *PlayerUpdate) ClearPlayerStatistic() *PlayerUpdate {
	pu.mutation.ClearPlayerStatistic()
	return pu
}

// ClearDepartment clears the "department" edge to the Department entity.
func (pu *PlayerUpdate) ClearDepartment() *PlayerUpdate {
	pu.mutation.ClearDepartment()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlayerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlayerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlayerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.FullName(); ok {
		_spec.SetField(player.FieldFullName, field.TypeString, value)
	}
	if value, ok := pu.mutation.JerseyNumber(); ok {
		_spec.SetField(player.FieldJerseyNumber, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedJerseyNumber(); ok {
		_spec.AddField(player.FieldJerseyNumber, field.TypeInt32, value)
	}
	if pu.mutation.JerseyNumberCleared() {
		_spec.ClearField(player.FieldJerseyNumber, field.TypeInt32)
	}
	if value, ok := pu.mutation.Position(); ok {
		_spec.SetField(player.FieldPosition, field.TypeString, value)
	}
	if value, ok := pu.mutation.DateOfBirth(); ok {
		_spec.SetField(player.FieldDateOfBirth, field.TypeTime, value)
	}
	if pu.mutation.DateOfBirthCleared() {
		_spec.ClearField(player.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := pu.mutation.HeightCm(); ok {
		_spec.SetField(player.FieldHeightCm, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedHeightCm(); ok {
		_spec.AddField(player.FieldHeightCm, field.TypeInt32, value)
	}
	if pu.mutation.HeightCmCleared() {
		_spec.ClearField(player.FieldHeightCm, field.TypeInt32)
	}
	if value, ok := pu.mutation.WeightKg(); ok {
		_spec.SetField(player.FieldWeightKg, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedWeightKg(); ok {
		_spec.AddField(player.FieldWeightKg, field.TypeInt32, value)
	}
	if pu.mutation.WeightKgCleared() {
		_spec.ClearField(player.FieldWeightKg, field.TypeInt32)
	}
	if value, ok := pu.mutation.Phone(); ok {
		_spec.SetField(player.FieldPhone, field.TypeString, value)
	}
	if pu.mutation.PhoneCleared() {
		_spec.ClearField(player.FieldPhone, field.TypeString)
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.SetField(player.FieldEmail, field.TypeString, value)
	}
	if pu.mutation.EmailCleared() {
		_spec.ClearField(player.FieldEmail, field.TypeString)
	}
	if value, ok := pu.mutation.IsActive(); ok {
		_spec.SetField(player.FieldIsActive, field.TypeBool, value)
	}
	if pu.mutation.IsActiveCleared() {
		_spec.ClearField(player.FieldIsActive, field.TypeBool)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(player.FieldCreatedAt, field.TypeTime, value)
	}
	if pu.mutation.CreatedAtCleared() {
		_spec.ClearField(player.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(player.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(player.FieldUpdatedAt, field.TypeTime)
	}
	if pu.mutation.MatchPlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayersTable,
			Columns: []string{player.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMatchPlayersIDs(); len(nodes) > 0 && !pu.mutation.MatchPlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayersTable,
			Columns: []string{player.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MatchPlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayersTable,
			Columns: []string{player.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlayerStatisticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   player.PlayerStatisticTable,
			Columns: []string{player.PlayerStatisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstatistic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlayerStatisticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   player.PlayerStatisticTable,
			Columns: []string{player.PlayerStatisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstatistic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.DepartmentTable,
			Columns: []string{player.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.DepartmentTable,
			Columns: []string{player.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlayerUpdateOne is the builder for updating a single Player entity.
type PlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerMutation
}

// SetDepartmentID sets the "department_id" field.
func (puo *PlayerUpdateOne) SetDepartmentID(i int) *PlayerUpdateOne {
	puo.mutation.SetDepartmentID(i)
	return puo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableDepartmentID(i *int) *PlayerUpdateOne {
	if i != nil {
		puo.SetDepartmentID(*i)
	}
	return puo
}

// ClearDepartmentID clears the value of the "department_id" field.
func (puo *PlayerUpdateOne) ClearDepartmentID() *PlayerUpdateOne {
	puo.mutation.ClearDepartmentID()
	return puo
}

// SetFullName sets the "full_name" field.
func (puo *PlayerUpdateOne) SetFullName(s string) *PlayerUpdateOne {
	puo.mutation.SetFullName(s)
	return puo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableFullName(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetFullName(*s)
	}
	return puo
}

// SetJerseyNumber sets the "jersey_number" field.
func (puo *PlayerUpdateOne) SetJerseyNumber(i int32) *PlayerUpdateOne {
	puo.mutation.ResetJerseyNumber()
	puo.mutation.SetJerseyNumber(i)
	return puo
}

// SetNillableJerseyNumber sets the "jersey_number" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableJerseyNumber(i *int32) *PlayerUpdateOne {
	if i != nil {
		puo.SetJerseyNumber(*i)
	}
	return puo
}

// AddJerseyNumber adds i to the "jersey_number" field.
func (puo *PlayerUpdateOne) AddJerseyNumber(i int32) *PlayerUpdateOne {
	puo.mutation.AddJerseyNumber(i)
	return puo
}

// ClearJerseyNumber clears the value of the "jersey_number" field.
func (puo *PlayerUpdateOne) ClearJerseyNumber() *PlayerUpdateOne {
	puo.mutation.ClearJerseyNumber()
	return puo
}

// SetPosition sets the "position" field.
func (puo *PlayerUpdateOne) SetPosition(s string) *PlayerUpdateOne {
	puo.mutation.SetPosition(s)
	return puo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillablePosition(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetPosition(*s)
	}
	return puo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (puo *PlayerUpdateOne) SetDateOfBirth(t time.Time) *PlayerUpdateOne {
	puo.mutation.SetDateOfBirth(t)
	return puo
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableDateOfBirth(t *time.Time) *PlayerUpdateOne {
	if t != nil {
		puo.SetDateOfBirth(*t)
	}
	return puo
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (puo *PlayerUpdateOne) ClearDateOfBirth() *PlayerUpdateOne {
	puo.mutation.ClearDateOfBirth()
	return puo
}

// SetHeightCm sets the "height_cm" field.
func (puo *PlayerUpdateOne) SetHeightCm(i int32) *PlayerUpdateOne {
	puo.mutation.ResetHeightCm()
	puo.mutation.SetHeightCm(i)
	return puo
}

// SetNillableHeightCm sets the "height_cm" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableHeightCm(i *int32) *PlayerUpdateOne {
	if i != nil {
		puo.SetHeightCm(*i)
	}
	return puo
}

// AddHeightCm adds i to the "height_cm" field.
func (puo *PlayerUpdateOne) AddHeightCm(i int32) *PlayerUpdateOne {
	puo.mutation.AddHeightCm(i)
	return puo
}

// ClearHeightCm clears the value of the "height_cm" field.
func (puo *PlayerUpdateOne) ClearHeightCm() *PlayerUpdateOne {
	puo.mutation.ClearHeightCm()
	return puo
}

// SetWeightKg sets the "weight_kg" field.
func (puo *PlayerUpdateOne) SetWeightKg(i int32) *PlayerUpdateOne {
	puo.mutation.ResetWeightKg()
	puo.mutation.SetWeightKg(i)
	return puo
}

// SetNillableWeightKg sets the "weight_kg" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableWeightKg(i *int32) *PlayerUpdateOne {
	if i != nil {
		puo.SetWeightKg(*i)
	}
	return puo
}

// AddWeightKg adds i to the "weight_kg" field.
func (puo *PlayerUpdateOne) AddWeightKg(i int32) *PlayerUpdateOne {
	puo.mutation.AddWeightKg(i)
	return puo
}

// ClearWeightKg clears the value of the "weight_kg" field.
func (puo *PlayerUpdateOne) ClearWeightKg() *PlayerUpdateOne {
	puo.mutation.ClearWeightKg()
	return puo
}

// SetPhone sets the "phone" field.
func (puo *PlayerUpdateOne) SetPhone(s string) *PlayerUpdateOne {
	puo.mutation.SetPhone(s)
	return puo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillablePhone(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetPhone(*s)
	}
	return puo
}

// ClearPhone clears the value of the "phone" field.
func (puo *PlayerUpdateOne) ClearPhone() *PlayerUpdateOne {
	puo.mutation.ClearPhone()
	return puo
}

// SetEmail sets the "email" field.
func (puo *PlayerUpdateOne) SetEmail(s string) *PlayerUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableEmail(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// ClearEmail clears the value of the "email" field.
func (puo *PlayerUpdateOne) ClearEmail() *PlayerUpdateOne {
	puo.mutation.ClearEmail()
	return puo
}

// SetIsActive sets the "is_active" field.
func (puo *PlayerUpdateOne) SetIsActive(b bool) *PlayerUpdateOne {
	puo.mutation.SetIsActive(b)
	return puo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableIsActive(b *bool) *PlayerUpdateOne {
	if b != nil {
		puo.SetIsActive(*b)
	}
	return puo
}

// ClearIsActive clears the value of the "is_active" field.
func (puo *PlayerUpdateOne) ClearIsActive() *PlayerUpdateOne {
	puo.mutation.ClearIsActive()
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PlayerUpdateOne) SetCreatedAt(t time.Time) *PlayerUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableCreatedAt(t *time.Time) *PlayerUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (puo *PlayerUpdateOne) ClearCreatedAt() *PlayerUpdateOne {
	puo.mutation.ClearCreatedAt()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PlayerUpdateOne) SetUpdatedAt(t time.Time) *PlayerUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableUpdatedAt(t *time.Time) *PlayerUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *PlayerUpdateOne) ClearUpdatedAt() *PlayerUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// AddMatchPlayerIDs adds the "match_players" edge to the MatchPlayer entity by IDs.
func (puo *PlayerUpdateOne) AddMatchPlayerIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.AddMatchPlayerIDs(ids...)
	return puo
}

// AddMatchPlayers adds the "match_players" edges to the MatchPlayer entity.
func (puo *PlayerUpdateOne) AddMatchPlayers(m ...*MatchPlayer) *PlayerUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMatchPlayerIDs(ids...)
}

// SetPlayerStatisticID sets the "player_statistic" edge to the PlayerStatistic entity by ID.
func (puo *PlayerUpdateOne) SetPlayerStatisticID(id int) *PlayerUpdateOne {
	puo.mutation.SetPlayerStatisticID(id)
	return puo
}

// SetNillablePlayerStatisticID sets the "player_statistic" edge to the PlayerStatistic entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillablePlayerStatisticID(id *int) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetPlayerStatisticID(*id)
	}
	return puo
}

// SetPlayerStatistic sets the "player_statistic" edge to the PlayerStatistic entity.
func (puo *PlayerUpdateOne) SetPlayerStatistic(p *PlayerStatistic) *PlayerUpdateOne {
	return puo.SetPlayerStatisticID(p.ID)
}

// SetDepartment sets the "department" edge to the Department entity.
func (puo *PlayerUpdateOne) SetDepartment(d *Department) *PlayerUpdateOne {
	return puo.SetDepartmentID(d.ID)
}

// Mutation returns the PlayerMutation object of the builder.
func (puo *PlayerUpdateOne) Mutation() *PlayerMutation {
	return puo.mutation
}

// ClearMatchPlayers clears all "match_players" edges to the MatchPlayer entity.
func (puo *PlayerUpdateOne) ClearMatchPlayers() *PlayerUpdateOne {
	puo.mutation.ClearMatchPlayers()
	return puo
}

// RemoveMatchPlayerIDs removes the "match_players" edge to MatchPlayer entities by IDs.
func (puo *PlayerUpdateOne) RemoveMatchPlayerIDs(ids ...int) *PlayerUpdateOne {
	puo.mutation.RemoveMatchPlayerIDs(ids...)
	return puo
}

// RemoveMatchPlayers removes "match_players" edges to MatchPlayer entities.
func (puo *PlayerUpdateOne) RemoveMatchPlayers(m ...*MatchPlayer) *PlayerUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMatchPlayerIDs(ids...)
}

// ClearPlayerStatistic clears the "player_statistic" edge to the PlayerStatistic entity.
func (puo *PlayerUpdateOne) ClearPlayerStatistic() *PlayerUpdateOne {
	puo.mutation.ClearPlayerStatistic()
	return puo
}

// ClearDepartment clears the "department" edge to the Department entity.
func (puo *PlayerUpdateOne) ClearDepartment() *PlayerUpdateOne {
	puo.mutation.ClearDepartment()
	return puo
}

// Where appends a list predicates to the PlayerUpdate builder.
func (puo *PlayerUpdateOne) Where(ps ...predicate.Player) *PlayerUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlayerUpdateOne) Select(field string, fields ...string) *PlayerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Player entity.
func (puo *PlayerUpdateOne) Save(ctx context.Context) (*Player, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlayerUpdateOne) SaveX(ctx context.Context) *Player {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlayerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlayerUpdateOne) sqlSave(ctx context.Context) (_node *Player, err error) {
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Player.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, player.FieldID)
		for _, f := range fields {
			if !player.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != player.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.FullName(); ok {
		_spec.SetField(player.FieldFullName, field.TypeString, value)
	}
	if value, ok := puo.mutation.JerseyNumber(); ok {
		_spec.SetField(player.FieldJerseyNumber, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedJerseyNumber(); ok {
		_spec.AddField(player.FieldJerseyNumber, field.TypeInt32, value)
	}
	if puo.mutation.JerseyNumberCleared() {
		_spec.ClearField(player.FieldJerseyNumber, field.TypeInt32)
	}
	if value, ok := puo.mutation.Position(); ok {
		_spec.SetField(player.FieldPosition, field.TypeString, value)
	}
	if value, ok := puo.mutation.DateOfBirth(); ok {
		_spec.SetField(player.FieldDateOfBirth, field.TypeTime, value)
	}
	if puo.mutation.DateOfBirthCleared() {
		_spec.ClearField(player.FieldDateOfBirth, field.TypeTime)
	}
	if value, ok := puo.mutation.HeightCm(); ok {
		_spec.SetField(player.FieldHeightCm, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedHeightCm(); ok {
		_spec.AddField(player.FieldHeightCm, field.TypeInt32, value)
	}
	if puo.mutation.HeightCmCleared() {
		_spec.ClearField(player.FieldHeightCm, field.TypeInt32)
	}
	if value, ok := puo.mutation.WeightKg(); ok {
		_spec.SetField(player.FieldWeightKg, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedWeightKg(); ok {
		_spec.AddField(player.FieldWeightKg, field.TypeInt32, value)
	}
	if puo.mutation.WeightKgCleared() {
		_spec.ClearField(player.FieldWeightKg, field.TypeInt32)
	}
	if value, ok := puo.mutation.Phone(); ok {
		_spec.SetField(player.FieldPhone, field.TypeString, value)
	}
	if puo.mutation.PhoneCleared() {
		_spec.ClearField(player.FieldPhone, field.TypeString)
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.SetField(player.FieldEmail, field.TypeString, value)
	}
	if puo.mutation.EmailCleared() {
		_spec.ClearField(player.FieldEmail, field.TypeString)
	}
	if value, ok := puo.mutation.IsActive(); ok {
		_spec.SetField(player.FieldIsActive, field.TypeBool, value)
	}
	if puo.mutation.IsActiveCleared() {
		_spec.ClearField(player.FieldIsActive, field.TypeBool)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(player.FieldCreatedAt, field.TypeTime, value)
	}
	if puo.mutation.CreatedAtCleared() {
		_spec.ClearField(player.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(player.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(player.FieldUpdatedAt, field.TypeTime)
	}
	if puo.mutation.MatchPlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayersTable,
			Columns: []string{player.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMatchPlayersIDs(); len(nodes) > 0 && !puo.mutation.MatchPlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayersTable,
			Columns: []string{player.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MatchPlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.MatchPlayersTable,
			Columns: []string{player.MatchPlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlayerStatisticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   player.PlayerStatisticTable,
			Columns: []string{player.PlayerStatisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstatistic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlayerStatisticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   player.PlayerStatisticTable,
			Columns: []string{player.PlayerStatisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playerstatistic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.DepartmentTable,
			Columns: []string{player.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.DepartmentTable,
			Columns: []string{player.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Player{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
