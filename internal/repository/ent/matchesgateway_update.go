// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"management-be/internal/repository/ent/matchesgateway"
	"management-be/internal/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchesGatewayUpdate is the builder for updating MatchesGateway entities.
type MatchesGatewayUpdate struct {
	config
	hooks    []Hook
	mutation *MatchesGatewayMutation
}

// Where appends a list predicates to the MatchesGatewayUpdate builder.
func (mgu *MatchesGatewayUpdate) Where(ps ...predicate.MatchesGateway) *MatchesGatewayUpdate {
	mgu.mutation.Where(ps...)
	return mgu
}

// SetCompetitionName sets the "competition_name" field.
func (mgu *MatchesGatewayUpdate) SetCompetitionName(s string) *MatchesGatewayUpdate {
	mgu.mutation.SetCompetitionName(s)
	return mgu
}

// SetNillableCompetitionName sets the "competition_name" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableCompetitionName(s *string) *MatchesGatewayUpdate {
	if s != nil {
		mgu.SetCompetitionName(*s)
	}
	return mgu
}

// SetSeasonStartDate sets the "season_start_date" field.
func (mgu *MatchesGatewayUpdate) SetSeasonStartDate(t time.Time) *MatchesGatewayUpdate {
	mgu.mutation.SetSeasonStartDate(t)
	return mgu
}

// SetNillableSeasonStartDate sets the "season_start_date" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableSeasonStartDate(t *time.Time) *MatchesGatewayUpdate {
	if t != nil {
		mgu.SetSeasonStartDate(*t)
	}
	return mgu
}

// SetMatchDate sets the "match_date" field.
func (mgu *MatchesGatewayUpdate) SetMatchDate(t time.Time) *MatchesGatewayUpdate {
	mgu.mutation.SetMatchDate(t)
	return mgu
}

// SetNillableMatchDate sets the "match_date" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableMatchDate(t *time.Time) *MatchesGatewayUpdate {
	if t != nil {
		mgu.SetMatchDate(*t)
	}
	return mgu
}

// SetHomeTeamName sets the "home_team_name" field.
func (mgu *MatchesGatewayUpdate) SetHomeTeamName(s string) *MatchesGatewayUpdate {
	mgu.mutation.SetHomeTeamName(s)
	return mgu
}

// SetNillableHomeTeamName sets the "home_team_name" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableHomeTeamName(s *string) *MatchesGatewayUpdate {
	if s != nil {
		mgu.SetHomeTeamName(*s)
	}
	return mgu
}

// SetHomeTeamShortName sets the "home_team_short_name" field.
func (mgu *MatchesGatewayUpdate) SetHomeTeamShortName(s string) *MatchesGatewayUpdate {
	mgu.mutation.SetHomeTeamShortName(s)
	return mgu
}

// SetNillableHomeTeamShortName sets the "home_team_short_name" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableHomeTeamShortName(s *string) *MatchesGatewayUpdate {
	if s != nil {
		mgu.SetHomeTeamShortName(*s)
	}
	return mgu
}

// SetHomeTeamLogo sets the "home_team_logo" field.
func (mgu *MatchesGatewayUpdate) SetHomeTeamLogo(s string) *MatchesGatewayUpdate {
	mgu.mutation.SetHomeTeamLogo(s)
	return mgu
}

// SetNillableHomeTeamLogo sets the "home_team_logo" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableHomeTeamLogo(s *string) *MatchesGatewayUpdate {
	if s != nil {
		mgu.SetHomeTeamLogo(*s)
	}
	return mgu
}

// SetAwayTeamName sets the "away_team_name" field.
func (mgu *MatchesGatewayUpdate) SetAwayTeamName(s string) *MatchesGatewayUpdate {
	mgu.mutation.SetAwayTeamName(s)
	return mgu
}

// SetNillableAwayTeamName sets the "away_team_name" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableAwayTeamName(s *string) *MatchesGatewayUpdate {
	if s != nil {
		mgu.SetAwayTeamName(*s)
	}
	return mgu
}

// SetAwayTeamShortName sets the "away_team_short_name" field.
func (mgu *MatchesGatewayUpdate) SetAwayTeamShortName(s string) *MatchesGatewayUpdate {
	mgu.mutation.SetAwayTeamShortName(s)
	return mgu
}

// SetNillableAwayTeamShortName sets the "away_team_short_name" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableAwayTeamShortName(s *string) *MatchesGatewayUpdate {
	if s != nil {
		mgu.SetAwayTeamShortName(*s)
	}
	return mgu
}

// SetAwayTeamLogo sets the "away_team_logo" field.
func (mgu *MatchesGatewayUpdate) SetAwayTeamLogo(s string) *MatchesGatewayUpdate {
	mgu.mutation.SetAwayTeamLogo(s)
	return mgu
}

// SetNillableAwayTeamLogo sets the "away_team_logo" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableAwayTeamLogo(s *string) *MatchesGatewayUpdate {
	if s != nil {
		mgu.SetAwayTeamLogo(*s)
	}
	return mgu
}

// SetHomeScore sets the "home_score" field.
func (mgu *MatchesGatewayUpdate) SetHomeScore(i int32) *MatchesGatewayUpdate {
	mgu.mutation.ResetHomeScore()
	mgu.mutation.SetHomeScore(i)
	return mgu
}

// SetNillableHomeScore sets the "home_score" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableHomeScore(i *int32) *MatchesGatewayUpdate {
	if i != nil {
		mgu.SetHomeScore(*i)
	}
	return mgu
}

// AddHomeScore adds i to the "home_score" field.
func (mgu *MatchesGatewayUpdate) AddHomeScore(i int32) *MatchesGatewayUpdate {
	mgu.mutation.AddHomeScore(i)
	return mgu
}

// ClearHomeScore clears the value of the "home_score" field.
func (mgu *MatchesGatewayUpdate) ClearHomeScore() *MatchesGatewayUpdate {
	mgu.mutation.ClearHomeScore()
	return mgu
}

// SetAwayScore sets the "away_score" field.
func (mgu *MatchesGatewayUpdate) SetAwayScore(i int32) *MatchesGatewayUpdate {
	mgu.mutation.ResetAwayScore()
	mgu.mutation.SetAwayScore(i)
	return mgu
}

// SetNillableAwayScore sets the "away_score" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableAwayScore(i *int32) *MatchesGatewayUpdate {
	if i != nil {
		mgu.SetAwayScore(*i)
	}
	return mgu
}

// AddAwayScore adds i to the "away_score" field.
func (mgu *MatchesGatewayUpdate) AddAwayScore(i int32) *MatchesGatewayUpdate {
	mgu.mutation.AddAwayScore(i)
	return mgu
}

// ClearAwayScore clears the value of the "away_score" field.
func (mgu *MatchesGatewayUpdate) ClearAwayScore() *MatchesGatewayUpdate {
	mgu.mutation.ClearAwayScore()
	return mgu
}

// SetStatus sets the "status" field.
func (mgu *MatchesGatewayUpdate) SetStatus(s string) *MatchesGatewayUpdate {
	mgu.mutation.SetStatus(s)
	return mgu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableStatus(s *string) *MatchesGatewayUpdate {
	if s != nil {
		mgu.SetStatus(*s)
	}
	return mgu
}

// SetCreatedAt sets the "created_at" field.
func (mgu *MatchesGatewayUpdate) SetCreatedAt(t time.Time) *MatchesGatewayUpdate {
	mgu.mutation.SetCreatedAt(t)
	return mgu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableCreatedAt(t *time.Time) *MatchesGatewayUpdate {
	if t != nil {
		mgu.SetCreatedAt(*t)
	}
	return mgu
}

// SetUpdatedAt sets the "updated_at" field.
func (mgu *MatchesGatewayUpdate) SetUpdatedAt(t time.Time) *MatchesGatewayUpdate {
	mgu.mutation.SetUpdatedAt(t)
	return mgu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableUpdatedAt(t *time.Time) *MatchesGatewayUpdate {
	if t != nil {
		mgu.SetUpdatedAt(*t)
	}
	return mgu
}

// SetDeletedAt sets the "deleted_at" field.
func (mgu *MatchesGatewayUpdate) SetDeletedAt(t time.Time) *MatchesGatewayUpdate {
	mgu.mutation.SetDeletedAt(t)
	return mgu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mgu *MatchesGatewayUpdate) SetNillableDeletedAt(t *time.Time) *MatchesGatewayUpdate {
	if t != nil {
		mgu.SetDeletedAt(*t)
	}
	return mgu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mgu *MatchesGatewayUpdate) ClearDeletedAt() *MatchesGatewayUpdate {
	mgu.mutation.ClearDeletedAt()
	return mgu
}

// Mutation returns the MatchesGatewayMutation object of the builder.
func (mgu *MatchesGatewayUpdate) Mutation() *MatchesGatewayMutation {
	return mgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mgu *MatchesGatewayUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mgu.sqlSave, mgu.mutation, mgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mgu *MatchesGatewayUpdate) SaveX(ctx context.Context) int {
	affected, err := mgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mgu *MatchesGatewayUpdate) Exec(ctx context.Context) error {
	_, err := mgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgu *MatchesGatewayUpdate) ExecX(ctx context.Context) {
	if err := mgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mgu *MatchesGatewayUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(matchesgateway.Table, matchesgateway.Columns, sqlgraph.NewFieldSpec(matchesgateway.FieldID, field.TypeInt))
	if ps := mgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mgu.mutation.CompetitionName(); ok {
		_spec.SetField(matchesgateway.FieldCompetitionName, field.TypeString, value)
	}
	if value, ok := mgu.mutation.SeasonStartDate(); ok {
		_spec.SetField(matchesgateway.FieldSeasonStartDate, field.TypeTime, value)
	}
	if value, ok := mgu.mutation.MatchDate(); ok {
		_spec.SetField(matchesgateway.FieldMatchDate, field.TypeTime, value)
	}
	if value, ok := mgu.mutation.HomeTeamName(); ok {
		_spec.SetField(matchesgateway.FieldHomeTeamName, field.TypeString, value)
	}
	if value, ok := mgu.mutation.HomeTeamShortName(); ok {
		_spec.SetField(matchesgateway.FieldHomeTeamShortName, field.TypeString, value)
	}
	if value, ok := mgu.mutation.HomeTeamLogo(); ok {
		_spec.SetField(matchesgateway.FieldHomeTeamLogo, field.TypeString, value)
	}
	if value, ok := mgu.mutation.AwayTeamName(); ok {
		_spec.SetField(matchesgateway.FieldAwayTeamName, field.TypeString, value)
	}
	if value, ok := mgu.mutation.AwayTeamShortName(); ok {
		_spec.SetField(matchesgateway.FieldAwayTeamShortName, field.TypeString, value)
	}
	if value, ok := mgu.mutation.AwayTeamLogo(); ok {
		_spec.SetField(matchesgateway.FieldAwayTeamLogo, field.TypeString, value)
	}
	if value, ok := mgu.mutation.HomeScore(); ok {
		_spec.SetField(matchesgateway.FieldHomeScore, field.TypeInt32, value)
	}
	if value, ok := mgu.mutation.AddedHomeScore(); ok {
		_spec.AddField(matchesgateway.FieldHomeScore, field.TypeInt32, value)
	}
	if mgu.mutation.HomeScoreCleared() {
		_spec.ClearField(matchesgateway.FieldHomeScore, field.TypeInt32)
	}
	if value, ok := mgu.mutation.AwayScore(); ok {
		_spec.SetField(matchesgateway.FieldAwayScore, field.TypeInt32, value)
	}
	if value, ok := mgu.mutation.AddedAwayScore(); ok {
		_spec.AddField(matchesgateway.FieldAwayScore, field.TypeInt32, value)
	}
	if mgu.mutation.AwayScoreCleared() {
		_spec.ClearField(matchesgateway.FieldAwayScore, field.TypeInt32)
	}
	if value, ok := mgu.mutation.Status(); ok {
		_spec.SetField(matchesgateway.FieldStatus, field.TypeString, value)
	}
	if value, ok := mgu.mutation.CreatedAt(); ok {
		_spec.SetField(matchesgateway.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mgu.mutation.UpdatedAt(); ok {
		_spec.SetField(matchesgateway.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mgu.mutation.DeletedAt(); ok {
		_spec.SetField(matchesgateway.FieldDeletedAt, field.TypeTime, value)
	}
	if mgu.mutation.DeletedAtCleared() {
		_spec.ClearField(matchesgateway.FieldDeletedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchesgateway.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mgu.mutation.done = true
	return n, nil
}

// MatchesGatewayUpdateOne is the builder for updating a single MatchesGateway entity.
type MatchesGatewayUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchesGatewayMutation
}

// SetCompetitionName sets the "competition_name" field.
func (mguo *MatchesGatewayUpdateOne) SetCompetitionName(s string) *MatchesGatewayUpdateOne {
	mguo.mutation.SetCompetitionName(s)
	return mguo
}

// SetNillableCompetitionName sets the "competition_name" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableCompetitionName(s *string) *MatchesGatewayUpdateOne {
	if s != nil {
		mguo.SetCompetitionName(*s)
	}
	return mguo
}

// SetSeasonStartDate sets the "season_start_date" field.
func (mguo *MatchesGatewayUpdateOne) SetSeasonStartDate(t time.Time) *MatchesGatewayUpdateOne {
	mguo.mutation.SetSeasonStartDate(t)
	return mguo
}

// SetNillableSeasonStartDate sets the "season_start_date" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableSeasonStartDate(t *time.Time) *MatchesGatewayUpdateOne {
	if t != nil {
		mguo.SetSeasonStartDate(*t)
	}
	return mguo
}

// SetMatchDate sets the "match_date" field.
func (mguo *MatchesGatewayUpdateOne) SetMatchDate(t time.Time) *MatchesGatewayUpdateOne {
	mguo.mutation.SetMatchDate(t)
	return mguo
}

// SetNillableMatchDate sets the "match_date" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableMatchDate(t *time.Time) *MatchesGatewayUpdateOne {
	if t != nil {
		mguo.SetMatchDate(*t)
	}
	return mguo
}

// SetHomeTeamName sets the "home_team_name" field.
func (mguo *MatchesGatewayUpdateOne) SetHomeTeamName(s string) *MatchesGatewayUpdateOne {
	mguo.mutation.SetHomeTeamName(s)
	return mguo
}

// SetNillableHomeTeamName sets the "home_team_name" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableHomeTeamName(s *string) *MatchesGatewayUpdateOne {
	if s != nil {
		mguo.SetHomeTeamName(*s)
	}
	return mguo
}

// SetHomeTeamShortName sets the "home_team_short_name" field.
func (mguo *MatchesGatewayUpdateOne) SetHomeTeamShortName(s string) *MatchesGatewayUpdateOne {
	mguo.mutation.SetHomeTeamShortName(s)
	return mguo
}

// SetNillableHomeTeamShortName sets the "home_team_short_name" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableHomeTeamShortName(s *string) *MatchesGatewayUpdateOne {
	if s != nil {
		mguo.SetHomeTeamShortName(*s)
	}
	return mguo
}

// SetHomeTeamLogo sets the "home_team_logo" field.
func (mguo *MatchesGatewayUpdateOne) SetHomeTeamLogo(s string) *MatchesGatewayUpdateOne {
	mguo.mutation.SetHomeTeamLogo(s)
	return mguo
}

// SetNillableHomeTeamLogo sets the "home_team_logo" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableHomeTeamLogo(s *string) *MatchesGatewayUpdateOne {
	if s != nil {
		mguo.SetHomeTeamLogo(*s)
	}
	return mguo
}

// SetAwayTeamName sets the "away_team_name" field.
func (mguo *MatchesGatewayUpdateOne) SetAwayTeamName(s string) *MatchesGatewayUpdateOne {
	mguo.mutation.SetAwayTeamName(s)
	return mguo
}

// SetNillableAwayTeamName sets the "away_team_name" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableAwayTeamName(s *string) *MatchesGatewayUpdateOne {
	if s != nil {
		mguo.SetAwayTeamName(*s)
	}
	return mguo
}

// SetAwayTeamShortName sets the "away_team_short_name" field.
func (mguo *MatchesGatewayUpdateOne) SetAwayTeamShortName(s string) *MatchesGatewayUpdateOne {
	mguo.mutation.SetAwayTeamShortName(s)
	return mguo
}

// SetNillableAwayTeamShortName sets the "away_team_short_name" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableAwayTeamShortName(s *string) *MatchesGatewayUpdateOne {
	if s != nil {
		mguo.SetAwayTeamShortName(*s)
	}
	return mguo
}

// SetAwayTeamLogo sets the "away_team_logo" field.
func (mguo *MatchesGatewayUpdateOne) SetAwayTeamLogo(s string) *MatchesGatewayUpdateOne {
	mguo.mutation.SetAwayTeamLogo(s)
	return mguo
}

// SetNillableAwayTeamLogo sets the "away_team_logo" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableAwayTeamLogo(s *string) *MatchesGatewayUpdateOne {
	if s != nil {
		mguo.SetAwayTeamLogo(*s)
	}
	return mguo
}

// SetHomeScore sets the "home_score" field.
func (mguo *MatchesGatewayUpdateOne) SetHomeScore(i int32) *MatchesGatewayUpdateOne {
	mguo.mutation.ResetHomeScore()
	mguo.mutation.SetHomeScore(i)
	return mguo
}

// SetNillableHomeScore sets the "home_score" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableHomeScore(i *int32) *MatchesGatewayUpdateOne {
	if i != nil {
		mguo.SetHomeScore(*i)
	}
	return mguo
}

// AddHomeScore adds i to the "home_score" field.
func (mguo *MatchesGatewayUpdateOne) AddHomeScore(i int32) *MatchesGatewayUpdateOne {
	mguo.mutation.AddHomeScore(i)
	return mguo
}

// ClearHomeScore clears the value of the "home_score" field.
func (mguo *MatchesGatewayUpdateOne) ClearHomeScore() *MatchesGatewayUpdateOne {
	mguo.mutation.ClearHomeScore()
	return mguo
}

// SetAwayScore sets the "away_score" field.
func (mguo *MatchesGatewayUpdateOne) SetAwayScore(i int32) *MatchesGatewayUpdateOne {
	mguo.mutation.ResetAwayScore()
	mguo.mutation.SetAwayScore(i)
	return mguo
}

// SetNillableAwayScore sets the "away_score" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableAwayScore(i *int32) *MatchesGatewayUpdateOne {
	if i != nil {
		mguo.SetAwayScore(*i)
	}
	return mguo
}

// AddAwayScore adds i to the "away_score" field.
func (mguo *MatchesGatewayUpdateOne) AddAwayScore(i int32) *MatchesGatewayUpdateOne {
	mguo.mutation.AddAwayScore(i)
	return mguo
}

// ClearAwayScore clears the value of the "away_score" field.
func (mguo *MatchesGatewayUpdateOne) ClearAwayScore() *MatchesGatewayUpdateOne {
	mguo.mutation.ClearAwayScore()
	return mguo
}

// SetStatus sets the "status" field.
func (mguo *MatchesGatewayUpdateOne) SetStatus(s string) *MatchesGatewayUpdateOne {
	mguo.mutation.SetStatus(s)
	return mguo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableStatus(s *string) *MatchesGatewayUpdateOne {
	if s != nil {
		mguo.SetStatus(*s)
	}
	return mguo
}

// SetCreatedAt sets the "created_at" field.
func (mguo *MatchesGatewayUpdateOne) SetCreatedAt(t time.Time) *MatchesGatewayUpdateOne {
	mguo.mutation.SetCreatedAt(t)
	return mguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableCreatedAt(t *time.Time) *MatchesGatewayUpdateOne {
	if t != nil {
		mguo.SetCreatedAt(*t)
	}
	return mguo
}

// SetUpdatedAt sets the "updated_at" field.
func (mguo *MatchesGatewayUpdateOne) SetUpdatedAt(t time.Time) *MatchesGatewayUpdateOne {
	mguo.mutation.SetUpdatedAt(t)
	return mguo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableUpdatedAt(t *time.Time) *MatchesGatewayUpdateOne {
	if t != nil {
		mguo.SetUpdatedAt(*t)
	}
	return mguo
}

// SetDeletedAt sets the "deleted_at" field.
func (mguo *MatchesGatewayUpdateOne) SetDeletedAt(t time.Time) *MatchesGatewayUpdateOne {
	mguo.mutation.SetDeletedAt(t)
	return mguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mguo *MatchesGatewayUpdateOne) SetNillableDeletedAt(t *time.Time) *MatchesGatewayUpdateOne {
	if t != nil {
		mguo.SetDeletedAt(*t)
	}
	return mguo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mguo *MatchesGatewayUpdateOne) ClearDeletedAt() *MatchesGatewayUpdateOne {
	mguo.mutation.ClearDeletedAt()
	return mguo
}

// Mutation returns the MatchesGatewayMutation object of the builder.
func (mguo *MatchesGatewayUpdateOne) Mutation() *MatchesGatewayMutation {
	return mguo.mutation
}

// Where appends a list predicates to the MatchesGatewayUpdate builder.
func (mguo *MatchesGatewayUpdateOne) Where(ps ...predicate.MatchesGateway) *MatchesGatewayUpdateOne {
	mguo.mutation.Where(ps...)
	return mguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mguo *MatchesGatewayUpdateOne) Select(field string, fields ...string) *MatchesGatewayUpdateOne {
	mguo.fields = append([]string{field}, fields...)
	return mguo
}

// Save executes the query and returns the updated MatchesGateway entity.
func (mguo *MatchesGatewayUpdateOne) Save(ctx context.Context) (*MatchesGateway, error) {
	return withHooks(ctx, mguo.sqlSave, mguo.mutation, mguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mguo *MatchesGatewayUpdateOne) SaveX(ctx context.Context) *MatchesGateway {
	node, err := mguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mguo *MatchesGatewayUpdateOne) Exec(ctx context.Context) error {
	_, err := mguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mguo *MatchesGatewayUpdateOne) ExecX(ctx context.Context) {
	if err := mguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mguo *MatchesGatewayUpdateOne) sqlSave(ctx context.Context) (_node *MatchesGateway, err error) {
	_spec := sqlgraph.NewUpdateSpec(matchesgateway.Table, matchesgateway.Columns, sqlgraph.NewFieldSpec(matchesgateway.FieldID, field.TypeInt))
	id, ok := mguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MatchesGateway.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, matchesgateway.FieldID)
		for _, f := range fields {
			if !matchesgateway.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != matchesgateway.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mguo.mutation.CompetitionName(); ok {
		_spec.SetField(matchesgateway.FieldCompetitionName, field.TypeString, value)
	}
	if value, ok := mguo.mutation.SeasonStartDate(); ok {
		_spec.SetField(matchesgateway.FieldSeasonStartDate, field.TypeTime, value)
	}
	if value, ok := mguo.mutation.MatchDate(); ok {
		_spec.SetField(matchesgateway.FieldMatchDate, field.TypeTime, value)
	}
	if value, ok := mguo.mutation.HomeTeamName(); ok {
		_spec.SetField(matchesgateway.FieldHomeTeamName, field.TypeString, value)
	}
	if value, ok := mguo.mutation.HomeTeamShortName(); ok {
		_spec.SetField(matchesgateway.FieldHomeTeamShortName, field.TypeString, value)
	}
	if value, ok := mguo.mutation.HomeTeamLogo(); ok {
		_spec.SetField(matchesgateway.FieldHomeTeamLogo, field.TypeString, value)
	}
	if value, ok := mguo.mutation.AwayTeamName(); ok {
		_spec.SetField(matchesgateway.FieldAwayTeamName, field.TypeString, value)
	}
	if value, ok := mguo.mutation.AwayTeamShortName(); ok {
		_spec.SetField(matchesgateway.FieldAwayTeamShortName, field.TypeString, value)
	}
	if value, ok := mguo.mutation.AwayTeamLogo(); ok {
		_spec.SetField(matchesgateway.FieldAwayTeamLogo, field.TypeString, value)
	}
	if value, ok := mguo.mutation.HomeScore(); ok {
		_spec.SetField(matchesgateway.FieldHomeScore, field.TypeInt32, value)
	}
	if value, ok := mguo.mutation.AddedHomeScore(); ok {
		_spec.AddField(matchesgateway.FieldHomeScore, field.TypeInt32, value)
	}
	if mguo.mutation.HomeScoreCleared() {
		_spec.ClearField(matchesgateway.FieldHomeScore, field.TypeInt32)
	}
	if value, ok := mguo.mutation.AwayScore(); ok {
		_spec.SetField(matchesgateway.FieldAwayScore, field.TypeInt32, value)
	}
	if value, ok := mguo.mutation.AddedAwayScore(); ok {
		_spec.AddField(matchesgateway.FieldAwayScore, field.TypeInt32, value)
	}
	if mguo.mutation.AwayScoreCleared() {
		_spec.ClearField(matchesgateway.FieldAwayScore, field.TypeInt32)
	}
	if value, ok := mguo.mutation.Status(); ok {
		_spec.SetField(matchesgateway.FieldStatus, field.TypeString, value)
	}
	if value, ok := mguo.mutation.CreatedAt(); ok {
		_spec.SetField(matchesgateway.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mguo.mutation.UpdatedAt(); ok {
		_spec.SetField(matchesgateway.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mguo.mutation.DeletedAt(); ok {
		_spec.SetField(matchesgateway.FieldDeletedAt, field.TypeTime, value)
	}
	if mguo.mutation.DeletedAtCleared() {
		_spec.ClearField(matchesgateway.FieldDeletedAt, field.TypeTime)
	}
	_node = &MatchesGateway{config: mguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchesgateway.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mguo.mutation.done = true
	return _node, nil
}
