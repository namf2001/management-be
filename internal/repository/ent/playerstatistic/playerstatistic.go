// Code generated by ent, DO NOT EDIT.

package playerstatistic

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the playerstatistic type in the database.
	Label = "player_statistic"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPlayerID holds the string denoting the player_id field in the database.
	FieldPlayerID = "player_id"
	// FieldTotalMatches holds the string denoting the total_matches field in the database.
	FieldTotalMatches = "total_matches"
	// FieldTotalMinutesPlayed holds the string denoting the total_minutes_played field in the database.
	FieldTotalMinutesPlayed = "total_minutes_played"
	// FieldTotalGoals holds the string denoting the total_goals field in the database.
	FieldTotalGoals = "total_goals"
	// FieldTotalAssists holds the string denoting the total_assists field in the database.
	FieldTotalAssists = "total_assists"
	// FieldTotalYellowCards holds the string denoting the total_yellow_cards field in the database.
	FieldTotalYellowCards = "total_yellow_cards"
	// FieldTotalRedCards holds the string denoting the total_red_cards field in the database.
	FieldTotalRedCards = "total_red_cards"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// Table holds the table name of the playerstatistic in the database.
	Table = "player_statistics"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "player_statistics"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_id"
)

// Columns holds all SQL columns for playerstatistic fields.
var Columns = []string{
	FieldID,
	FieldPlayerID,
	FieldTotalMatches,
	FieldTotalMinutesPlayed,
	FieldTotalGoals,
	FieldTotalAssists,
	FieldTotalYellowCards,
	FieldTotalRedCards,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PlayerStatistic queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPlayerID orders the results by the player_id field.
func ByPlayerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlayerID, opts...).ToFunc()
}

// ByTotalMatches orders the results by the total_matches field.
func ByTotalMatches(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalMatches, opts...).ToFunc()
}

// ByTotalMinutesPlayed orders the results by the total_minutes_played field.
func ByTotalMinutesPlayed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalMinutesPlayed, opts...).ToFunc()
}

// ByTotalGoals orders the results by the total_goals field.
func ByTotalGoals(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalGoals, opts...).ToFunc()
}

// ByTotalAssists orders the results by the total_assists field.
func ByTotalAssists(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAssists, opts...).ToFunc()
}

// ByTotalYellowCards orders the results by the total_yellow_cards field.
func ByTotalYellowCards(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalYellowCards, opts...).ToFunc()
}

// ByTotalRedCards orders the results by the total_red_cards field.
func ByTotalRedCards(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalRedCards, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByPlayerField orders the results by player field.
func ByPlayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PlayerTable, PlayerColumn),
	)
}
