// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"management-be/internal/repository/ent/match"
	"management-be/internal/repository/ent/matchplayer"
	"management-be/internal/repository/ent/player"
	"management-be/internal/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchPlayerUpdate is the builder for updating MatchPlayer entities.
type MatchPlayerUpdate struct {
	config
	hooks    []Hook
	mutation *MatchPlayerMutation
}

// Where appends a list predicates to the MatchPlayerUpdate builder.
func (mpu *MatchPlayerUpdate) Where(ps ...predicate.MatchPlayer) *MatchPlayerUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetMatchID sets the "match_id" field.
func (mpu *MatchPlayerUpdate) SetMatchID(i int) *MatchPlayerUpdate {
	mpu.mutation.SetMatchID(i)
	return mpu
}

// SetNillableMatchID sets the "match_id" field if the given value is not nil.
func (mpu *MatchPlayerUpdate) SetNillableMatchID(i *int) *MatchPlayerUpdate {
	if i != nil {
		mpu.SetMatchID(*i)
	}
	return mpu
}

// ClearMatchID clears the value of the "match_id" field.
func (mpu *MatchPlayerUpdate) ClearMatchID() *MatchPlayerUpdate {
	mpu.mutation.ClearMatchID()
	return mpu
}

// SetPlayerID sets the "player_id" field.
func (mpu *MatchPlayerUpdate) SetPlayerID(i int) *MatchPlayerUpdate {
	mpu.mutation.SetPlayerID(i)
	return mpu
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (mpu *MatchPlayerUpdate) SetNillablePlayerID(i *int) *MatchPlayerUpdate {
	if i != nil {
		mpu.SetPlayerID(*i)
	}
	return mpu
}

// ClearPlayerID clears the value of the "player_id" field.
func (mpu *MatchPlayerUpdate) ClearPlayerID() *MatchPlayerUpdate {
	mpu.mutation.ClearPlayerID()
	return mpu
}

// SetMinutesPlayed sets the "minutes_played" field.
func (mpu *MatchPlayerUpdate) SetMinutesPlayed(i int32) *MatchPlayerUpdate {
	mpu.mutation.ResetMinutesPlayed()
	mpu.mutation.SetMinutesPlayed(i)
	return mpu
}

// SetNillableMinutesPlayed sets the "minutes_played" field if the given value is not nil.
func (mpu *MatchPlayerUpdate) SetNillableMinutesPlayed(i *int32) *MatchPlayerUpdate {
	if i != nil {
		mpu.SetMinutesPlayed(*i)
	}
	return mpu
}

// AddMinutesPlayed adds i to the "minutes_played" field.
func (mpu *MatchPlayerUpdate) AddMinutesPlayed(i int32) *MatchPlayerUpdate {
	mpu.mutation.AddMinutesPlayed(i)
	return mpu
}

// ClearMinutesPlayed clears the value of the "minutes_played" field.
func (mpu *MatchPlayerUpdate) ClearMinutesPlayed() *MatchPlayerUpdate {
	mpu.mutation.ClearMinutesPlayed()
	return mpu
}

// SetGoalsScored sets the "goals_scored" field.
func (mpu *MatchPlayerUpdate) SetGoalsScored(i int32) *MatchPlayerUpdate {
	mpu.mutation.ResetGoalsScored()
	mpu.mutation.SetGoalsScored(i)
	return mpu
}

// SetNillableGoalsScored sets the "goals_scored" field if the given value is not nil.
func (mpu *MatchPlayerUpdate) SetNillableGoalsScored(i *int32) *MatchPlayerUpdate {
	if i != nil {
		mpu.SetGoalsScored(*i)
	}
	return mpu
}

// AddGoalsScored adds i to the "goals_scored" field.
func (mpu *MatchPlayerUpdate) AddGoalsScored(i int32) *MatchPlayerUpdate {
	mpu.mutation.AddGoalsScored(i)
	return mpu
}

// ClearGoalsScored clears the value of the "goals_scored" field.
func (mpu *MatchPlayerUpdate) ClearGoalsScored() *MatchPlayerUpdate {
	mpu.mutation.ClearGoalsScored()
	return mpu
}

// SetAssists sets the "assists" field.
func (mpu *MatchPlayerUpdate) SetAssists(i int32) *MatchPlayerUpdate {
	mpu.mutation.ResetAssists()
	mpu.mutation.SetAssists(i)
	return mpu
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (mpu *MatchPlayerUpdate) SetNillableAssists(i *int32) *MatchPlayerUpdate {
	if i != nil {
		mpu.SetAssists(*i)
	}
	return mpu
}

// AddAssists adds i to the "assists" field.
func (mpu *MatchPlayerUpdate) AddAssists(i int32) *MatchPlayerUpdate {
	mpu.mutation.AddAssists(i)
	return mpu
}

// ClearAssists clears the value of the "assists" field.
func (mpu *MatchPlayerUpdate) ClearAssists() *MatchPlayerUpdate {
	mpu.mutation.ClearAssists()
	return mpu
}

// SetYellowCards sets the "yellow_cards" field.
func (mpu *MatchPlayerUpdate) SetYellowCards(i int32) *MatchPlayerUpdate {
	mpu.mutation.ResetYellowCards()
	mpu.mutation.SetYellowCards(i)
	return mpu
}

// SetNillableYellowCards sets the "yellow_cards" field if the given value is not nil.
func (mpu *MatchPlayerUpdate) SetNillableYellowCards(i *int32) *MatchPlayerUpdate {
	if i != nil {
		mpu.SetYellowCards(*i)
	}
	return mpu
}

// AddYellowCards adds i to the "yellow_cards" field.
func (mpu *MatchPlayerUpdate) AddYellowCards(i int32) *MatchPlayerUpdate {
	mpu.mutation.AddYellowCards(i)
	return mpu
}

// ClearYellowCards clears the value of the "yellow_cards" field.
func (mpu *MatchPlayerUpdate) ClearYellowCards() *MatchPlayerUpdate {
	mpu.mutation.ClearYellowCards()
	return mpu
}

// SetRedCard sets the "red_card" field.
func (mpu *MatchPlayerUpdate) SetRedCard(b bool) *MatchPlayerUpdate {
	mpu.mutation.SetRedCard(b)
	return mpu
}

// SetNillableRedCard sets the "red_card" field if the given value is not nil.
func (mpu *MatchPlayerUpdate) SetNillableRedCard(b *bool) *MatchPlayerUpdate {
	if b != nil {
		mpu.SetRedCard(*b)
	}
	return mpu
}

// ClearRedCard clears the value of the "red_card" field.
func (mpu *MatchPlayerUpdate) ClearRedCard() *MatchPlayerUpdate {
	mpu.mutation.ClearRedCard()
	return mpu
}

// SetCreatedAt sets the "created_at" field.
func (mpu *MatchPlayerUpdate) SetCreatedAt(t time.Time) *MatchPlayerUpdate {
	mpu.mutation.SetCreatedAt(t)
	return mpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpu *MatchPlayerUpdate) SetNillableCreatedAt(t *time.Time) *MatchPlayerUpdate {
	if t != nil {
		mpu.SetCreatedAt(*t)
	}
	return mpu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (mpu *MatchPlayerUpdate) ClearCreatedAt() *MatchPlayerUpdate {
	mpu.mutation.ClearCreatedAt()
	return mpu
}

// SetUpdatedAt sets the "updated_at" field.
func (mpu *MatchPlayerUpdate) SetUpdatedAt(t time.Time) *MatchPlayerUpdate {
	mpu.mutation.SetUpdatedAt(t)
	return mpu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mpu *MatchPlayerUpdate) SetNillableUpdatedAt(t *time.Time) *MatchPlayerUpdate {
	if t != nil {
		mpu.SetUpdatedAt(*t)
	}
	return mpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mpu *MatchPlayerUpdate) ClearUpdatedAt() *MatchPlayerUpdate {
	mpu.mutation.ClearUpdatedAt()
	return mpu
}

// SetMatch sets the "match" edge to the Match entity.
func (mpu *MatchPlayerUpdate) SetMatch(m *Match) *MatchPlayerUpdate {
	return mpu.SetMatchID(m.ID)
}

// SetPlayer sets the "player" edge to the Player entity.
func (mpu *MatchPlayerUpdate) SetPlayer(p *Player) *MatchPlayerUpdate {
	return mpu.SetPlayerID(p.ID)
}

// Mutation returns the MatchPlayerMutation object of the builder.
func (mpu *MatchPlayerUpdate) Mutation() *MatchPlayerMutation {
	return mpu.mutation
}

// ClearMatch clears the "match" edge to the Match entity.
func (mpu *MatchPlayerUpdate) ClearMatch() *MatchPlayerUpdate {
	mpu.mutation.ClearMatch()
	return mpu
}

// ClearPlayer clears the "player" edge to the Player entity.
func (mpu *MatchPlayerUpdate) ClearPlayer() *MatchPlayerUpdate {
	mpu.mutation.ClearPlayer()
	return mpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MatchPlayerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mpu.sqlSave, mpu.mutation, mpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MatchPlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MatchPlayerUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MatchPlayerUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mpu *MatchPlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(matchplayer.Table, matchplayer.Columns, sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt))
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpu.mutation.MinutesPlayed(); ok {
		_spec.SetField(matchplayer.FieldMinutesPlayed, field.TypeInt32, value)
	}
	if value, ok := mpu.mutation.AddedMinutesPlayed(); ok {
		_spec.AddField(matchplayer.FieldMinutesPlayed, field.TypeInt32, value)
	}
	if mpu.mutation.MinutesPlayedCleared() {
		_spec.ClearField(matchplayer.FieldMinutesPlayed, field.TypeInt32)
	}
	if value, ok := mpu.mutation.GoalsScored(); ok {
		_spec.SetField(matchplayer.FieldGoalsScored, field.TypeInt32, value)
	}
	if value, ok := mpu.mutation.AddedGoalsScored(); ok {
		_spec.AddField(matchplayer.FieldGoalsScored, field.TypeInt32, value)
	}
	if mpu.mutation.GoalsScoredCleared() {
		_spec.ClearField(matchplayer.FieldGoalsScored, field.TypeInt32)
	}
	if value, ok := mpu.mutation.Assists(); ok {
		_spec.SetField(matchplayer.FieldAssists, field.TypeInt32, value)
	}
	if value, ok := mpu.mutation.AddedAssists(); ok {
		_spec.AddField(matchplayer.FieldAssists, field.TypeInt32, value)
	}
	if mpu.mutation.AssistsCleared() {
		_spec.ClearField(matchplayer.FieldAssists, field.TypeInt32)
	}
	if value, ok := mpu.mutation.YellowCards(); ok {
		_spec.SetField(matchplayer.FieldYellowCards, field.TypeInt32, value)
	}
	if value, ok := mpu.mutation.AddedYellowCards(); ok {
		_spec.AddField(matchplayer.FieldYellowCards, field.TypeInt32, value)
	}
	if mpu.mutation.YellowCardsCleared() {
		_spec.ClearField(matchplayer.FieldYellowCards, field.TypeInt32)
	}
	if value, ok := mpu.mutation.RedCard(); ok {
		_spec.SetField(matchplayer.FieldRedCard, field.TypeBool, value)
	}
	if mpu.mutation.RedCardCleared() {
		_spec.ClearField(matchplayer.FieldRedCard, field.TypeBool)
	}
	if value, ok := mpu.mutation.CreatedAt(); ok {
		_spec.SetField(matchplayer.FieldCreatedAt, field.TypeTime, value)
	}
	if mpu.mutation.CreatedAtCleared() {
		_spec.ClearField(matchplayer.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mpu.mutation.UpdatedAt(); ok {
		_spec.SetField(matchplayer.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(matchplayer.FieldUpdatedAt, field.TypeTime)
	}
	if mpu.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.MatchTable,
			Columns: []string{matchplayer.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.MatchTable,
			Columns: []string{matchplayer.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.PlayerTable,
			Columns: []string{matchplayer.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.PlayerTable,
			Columns: []string{matchplayer.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpu.mutation.done = true
	return n, nil
}

// MatchPlayerUpdateOne is the builder for updating a single MatchPlayer entity.
type MatchPlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchPlayerMutation
}

// SetMatchID sets the "match_id" field.
func (mpuo *MatchPlayerUpdateOne) SetMatchID(i int) *MatchPlayerUpdateOne {
	mpuo.mutation.SetMatchID(i)
	return mpuo
}

// SetNillableMatchID sets the "match_id" field if the given value is not nil.
func (mpuo *MatchPlayerUpdateOne) SetNillableMatchID(i *int) *MatchPlayerUpdateOne {
	if i != nil {
		mpuo.SetMatchID(*i)
	}
	return mpuo
}

// ClearMatchID clears the value of the "match_id" field.
func (mpuo *MatchPlayerUpdateOne) ClearMatchID() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearMatchID()
	return mpuo
}

// SetPlayerID sets the "player_id" field.
func (mpuo *MatchPlayerUpdateOne) SetPlayerID(i int) *MatchPlayerUpdateOne {
	mpuo.mutation.SetPlayerID(i)
	return mpuo
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (mpuo *MatchPlayerUpdateOne) SetNillablePlayerID(i *int) *MatchPlayerUpdateOne {
	if i != nil {
		mpuo.SetPlayerID(*i)
	}
	return mpuo
}

// ClearPlayerID clears the value of the "player_id" field.
func (mpuo *MatchPlayerUpdateOne) ClearPlayerID() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearPlayerID()
	return mpuo
}

// SetMinutesPlayed sets the "minutes_played" field.
func (mpuo *MatchPlayerUpdateOne) SetMinutesPlayed(i int32) *MatchPlayerUpdateOne {
	mpuo.mutation.ResetMinutesPlayed()
	mpuo.mutation.SetMinutesPlayed(i)
	return mpuo
}

// SetNillableMinutesPlayed sets the "minutes_played" field if the given value is not nil.
func (mpuo *MatchPlayerUpdateOne) SetNillableMinutesPlayed(i *int32) *MatchPlayerUpdateOne {
	if i != nil {
		mpuo.SetMinutesPlayed(*i)
	}
	return mpuo
}

// AddMinutesPlayed adds i to the "minutes_played" field.
func (mpuo *MatchPlayerUpdateOne) AddMinutesPlayed(i int32) *MatchPlayerUpdateOne {
	mpuo.mutation.AddMinutesPlayed(i)
	return mpuo
}

// ClearMinutesPlayed clears the value of the "minutes_played" field.
func (mpuo *MatchPlayerUpdateOne) ClearMinutesPlayed() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearMinutesPlayed()
	return mpuo
}

// SetGoalsScored sets the "goals_scored" field.
func (mpuo *MatchPlayerUpdateOne) SetGoalsScored(i int32) *MatchPlayerUpdateOne {
	mpuo.mutation.ResetGoalsScored()
	mpuo.mutation.SetGoalsScored(i)
	return mpuo
}

// SetNillableGoalsScored sets the "goals_scored" field if the given value is not nil.
func (mpuo *MatchPlayerUpdateOne) SetNillableGoalsScored(i *int32) *MatchPlayerUpdateOne {
	if i != nil {
		mpuo.SetGoalsScored(*i)
	}
	return mpuo
}

// AddGoalsScored adds i to the "goals_scored" field.
func (mpuo *MatchPlayerUpdateOne) AddGoalsScored(i int32) *MatchPlayerUpdateOne {
	mpuo.mutation.AddGoalsScored(i)
	return mpuo
}

// ClearGoalsScored clears the value of the "goals_scored" field.
func (mpuo *MatchPlayerUpdateOne) ClearGoalsScored() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearGoalsScored()
	return mpuo
}

// SetAssists sets the "assists" field.
func (mpuo *MatchPlayerUpdateOne) SetAssists(i int32) *MatchPlayerUpdateOne {
	mpuo.mutation.ResetAssists()
	mpuo.mutation.SetAssists(i)
	return mpuo
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (mpuo *MatchPlayerUpdateOne) SetNillableAssists(i *int32) *MatchPlayerUpdateOne {
	if i != nil {
		mpuo.SetAssists(*i)
	}
	return mpuo
}

// AddAssists adds i to the "assists" field.
func (mpuo *MatchPlayerUpdateOne) AddAssists(i int32) *MatchPlayerUpdateOne {
	mpuo.mutation.AddAssists(i)
	return mpuo
}

// ClearAssists clears the value of the "assists" field.
func (mpuo *MatchPlayerUpdateOne) ClearAssists() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearAssists()
	return mpuo
}

// SetYellowCards sets the "yellow_cards" field.
func (mpuo *MatchPlayerUpdateOne) SetYellowCards(i int32) *MatchPlayerUpdateOne {
	mpuo.mutation.ResetYellowCards()
	mpuo.mutation.SetYellowCards(i)
	return mpuo
}

// SetNillableYellowCards sets the "yellow_cards" field if the given value is not nil.
func (mpuo *MatchPlayerUpdateOne) SetNillableYellowCards(i *int32) *MatchPlayerUpdateOne {
	if i != nil {
		mpuo.SetYellowCards(*i)
	}
	return mpuo
}

// AddYellowCards adds i to the "yellow_cards" field.
func (mpuo *MatchPlayerUpdateOne) AddYellowCards(i int32) *MatchPlayerUpdateOne {
	mpuo.mutation.AddYellowCards(i)
	return mpuo
}

// ClearYellowCards clears the value of the "yellow_cards" field.
func (mpuo *MatchPlayerUpdateOne) ClearYellowCards() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearYellowCards()
	return mpuo
}

// SetRedCard sets the "red_card" field.
func (mpuo *MatchPlayerUpdateOne) SetRedCard(b bool) *MatchPlayerUpdateOne {
	mpuo.mutation.SetRedCard(b)
	return mpuo
}

// SetNillableRedCard sets the "red_card" field if the given value is not nil.
func (mpuo *MatchPlayerUpdateOne) SetNillableRedCard(b *bool) *MatchPlayerUpdateOne {
	if b != nil {
		mpuo.SetRedCard(*b)
	}
	return mpuo
}

// ClearRedCard clears the value of the "red_card" field.
func (mpuo *MatchPlayerUpdateOne) ClearRedCard() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearRedCard()
	return mpuo
}

// SetCreatedAt sets the "created_at" field.
func (mpuo *MatchPlayerUpdateOne) SetCreatedAt(t time.Time) *MatchPlayerUpdateOne {
	mpuo.mutation.SetCreatedAt(t)
	return mpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpuo *MatchPlayerUpdateOne) SetNillableCreatedAt(t *time.Time) *MatchPlayerUpdateOne {
	if t != nil {
		mpuo.SetCreatedAt(*t)
	}
	return mpuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (mpuo *MatchPlayerUpdateOne) ClearCreatedAt() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearCreatedAt()
	return mpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mpuo *MatchPlayerUpdateOne) SetUpdatedAt(t time.Time) *MatchPlayerUpdateOne {
	mpuo.mutation.SetUpdatedAt(t)
	return mpuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mpuo *MatchPlayerUpdateOne) SetNillableUpdatedAt(t *time.Time) *MatchPlayerUpdateOne {
	if t != nil {
		mpuo.SetUpdatedAt(*t)
	}
	return mpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mpuo *MatchPlayerUpdateOne) ClearUpdatedAt() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearUpdatedAt()
	return mpuo
}

// SetMatch sets the "match" edge to the Match entity.
func (mpuo *MatchPlayerUpdateOne) SetMatch(m *Match) *MatchPlayerUpdateOne {
	return mpuo.SetMatchID(m.ID)
}

// SetPlayer sets the "player" edge to the Player entity.
func (mpuo *MatchPlayerUpdateOne) SetPlayer(p *Player) *MatchPlayerUpdateOne {
	return mpuo.SetPlayerID(p.ID)
}

// Mutation returns the MatchPlayerMutation object of the builder.
func (mpuo *MatchPlayerUpdateOne) Mutation() *MatchPlayerMutation {
	return mpuo.mutation
}

// ClearMatch clears the "match" edge to the Match entity.
func (mpuo *MatchPlayerUpdateOne) ClearMatch() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearMatch()
	return mpuo
}

// ClearPlayer clears the "player" edge to the Player entity.
func (mpuo *MatchPlayerUpdateOne) ClearPlayer() *MatchPlayerUpdateOne {
	mpuo.mutation.ClearPlayer()
	return mpuo
}

// Where appends a list predicates to the MatchPlayerUpdate builder.
func (mpuo *MatchPlayerUpdateOne) Where(ps ...predicate.MatchPlayer) *MatchPlayerUpdateOne {
	mpuo.mutation.Where(ps...)
	return mpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *MatchPlayerUpdateOne) Select(field string, fields ...string) *MatchPlayerUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated MatchPlayer entity.
func (mpuo *MatchPlayerUpdateOne) Save(ctx context.Context) (*MatchPlayer, error) {
	return withHooks(ctx, mpuo.sqlSave, mpuo.mutation, mpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MatchPlayerUpdateOne) SaveX(ctx context.Context) *MatchPlayer {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MatchPlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MatchPlayerUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mpuo *MatchPlayerUpdateOne) sqlSave(ctx context.Context) (_node *MatchPlayer, err error) {
	_spec := sqlgraph.NewUpdateSpec(matchplayer.Table, matchplayer.Columns, sqlgraph.NewFieldSpec(matchplayer.FieldID, field.TypeInt))
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MatchPlayer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, matchplayer.FieldID)
		for _, f := range fields {
			if !matchplayer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != matchplayer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpuo.mutation.MinutesPlayed(); ok {
		_spec.SetField(matchplayer.FieldMinutesPlayed, field.TypeInt32, value)
	}
	if value, ok := mpuo.mutation.AddedMinutesPlayed(); ok {
		_spec.AddField(matchplayer.FieldMinutesPlayed, field.TypeInt32, value)
	}
	if mpuo.mutation.MinutesPlayedCleared() {
		_spec.ClearField(matchplayer.FieldMinutesPlayed, field.TypeInt32)
	}
	if value, ok := mpuo.mutation.GoalsScored(); ok {
		_spec.SetField(matchplayer.FieldGoalsScored, field.TypeInt32, value)
	}
	if value, ok := mpuo.mutation.AddedGoalsScored(); ok {
		_spec.AddField(matchplayer.FieldGoalsScored, field.TypeInt32, value)
	}
	if mpuo.mutation.GoalsScoredCleared() {
		_spec.ClearField(matchplayer.FieldGoalsScored, field.TypeInt32)
	}
	if value, ok := mpuo.mutation.Assists(); ok {
		_spec.SetField(matchplayer.FieldAssists, field.TypeInt32, value)
	}
	if value, ok := mpuo.mutation.AddedAssists(); ok {
		_spec.AddField(matchplayer.FieldAssists, field.TypeInt32, value)
	}
	if mpuo.mutation.AssistsCleared() {
		_spec.ClearField(matchplayer.FieldAssists, field.TypeInt32)
	}
	if value, ok := mpuo.mutation.YellowCards(); ok {
		_spec.SetField(matchplayer.FieldYellowCards, field.TypeInt32, value)
	}
	if value, ok := mpuo.mutation.AddedYellowCards(); ok {
		_spec.AddField(matchplayer.FieldYellowCards, field.TypeInt32, value)
	}
	if mpuo.mutation.YellowCardsCleared() {
		_spec.ClearField(matchplayer.FieldYellowCards, field.TypeInt32)
	}
	if value, ok := mpuo.mutation.RedCard(); ok {
		_spec.SetField(matchplayer.FieldRedCard, field.TypeBool, value)
	}
	if mpuo.mutation.RedCardCleared() {
		_spec.ClearField(matchplayer.FieldRedCard, field.TypeBool)
	}
	if value, ok := mpuo.mutation.CreatedAt(); ok {
		_spec.SetField(matchplayer.FieldCreatedAt, field.TypeTime, value)
	}
	if mpuo.mutation.CreatedAtCleared() {
		_spec.ClearField(matchplayer.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(matchplayer.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(matchplayer.FieldUpdatedAt, field.TypeTime)
	}
	if mpuo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.MatchTable,
			Columns: []string{matchplayer.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.MatchTable,
			Columns: []string{matchplayer.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.PlayerTable,
			Columns: []string{matchplayer.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   matchplayer.PlayerTable,
			Columns: []string{matchplayer.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MatchPlayer{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{matchplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpuo.mutation.done = true
	return _node, nil
}
