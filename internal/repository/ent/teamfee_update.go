// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"management-be/internal/repository/ent/predicate"
	"management-be/internal/repository/ent/teamfee"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamFeeUpdate is the builder for updating TeamFee entities.
type TeamFeeUpdate struct {
	config
	hooks    []Hook
	mutation *TeamFeeMutation
}

// Where appends a list predicates to the TeamFeeUpdate builder.
func (tfu *TeamFeeUpdate) Where(ps ...predicate.TeamFee) *TeamFeeUpdate {
	tfu.mutation.Where(ps...)
	return tfu
}

// SetAmount sets the "amount" field.
func (tfu *TeamFeeUpdate) SetAmount(f float64) *TeamFeeUpdate {
	tfu.mutation.ResetAmount()
	tfu.mutation.SetAmount(f)
	return tfu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tfu *TeamFeeUpdate) SetNillableAmount(f *float64) *TeamFeeUpdate {
	if f != nil {
		tfu.SetAmount(*f)
	}
	return tfu
}

// AddAmount adds f to the "amount" field.
func (tfu *TeamFeeUpdate) AddAmount(f float64) *TeamFeeUpdate {
	tfu.mutation.AddAmount(f)
	return tfu
}

// SetPaymentDate sets the "payment_date" field.
func (tfu *TeamFeeUpdate) SetPaymentDate(t time.Time) *TeamFeeUpdate {
	tfu.mutation.SetPaymentDate(t)
	return tfu
}

// SetNillablePaymentDate sets the "payment_date" field if the given value is not nil.
func (tfu *TeamFeeUpdate) SetNillablePaymentDate(t *time.Time) *TeamFeeUpdate {
	if t != nil {
		tfu.SetPaymentDate(*t)
	}
	return tfu
}

// SetDescription sets the "description" field.
func (tfu *TeamFeeUpdate) SetDescription(s string) *TeamFeeUpdate {
	tfu.mutation.SetDescription(s)
	return tfu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tfu *TeamFeeUpdate) SetNillableDescription(s *string) *TeamFeeUpdate {
	if s != nil {
		tfu.SetDescription(*s)
	}
	return tfu
}

// ClearDescription clears the value of the "description" field.
func (tfu *TeamFeeUpdate) ClearDescription() *TeamFeeUpdate {
	tfu.mutation.ClearDescription()
	return tfu
}

// SetCreatedAt sets the "created_at" field.
func (tfu *TeamFeeUpdate) SetCreatedAt(t time.Time) *TeamFeeUpdate {
	tfu.mutation.SetCreatedAt(t)
	return tfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tfu *TeamFeeUpdate) SetNillableCreatedAt(t *time.Time) *TeamFeeUpdate {
	if t != nil {
		tfu.SetCreatedAt(*t)
	}
	return tfu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tfu *TeamFeeUpdate) ClearCreatedAt() *TeamFeeUpdate {
	tfu.mutation.ClearCreatedAt()
	return tfu
}

// SetUpdatedAt sets the "updated_at" field.
func (tfu *TeamFeeUpdate) SetUpdatedAt(t time.Time) *TeamFeeUpdate {
	tfu.mutation.SetUpdatedAt(t)
	return tfu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tfu *TeamFeeUpdate) SetNillableUpdatedAt(t *time.Time) *TeamFeeUpdate {
	if t != nil {
		tfu.SetUpdatedAt(*t)
	}
	return tfu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tfu *TeamFeeUpdate) ClearUpdatedAt() *TeamFeeUpdate {
	tfu.mutation.ClearUpdatedAt()
	return tfu
}

// Mutation returns the TeamFeeMutation object of the builder.
func (tfu *TeamFeeUpdate) Mutation() *TeamFeeMutation {
	return tfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfu *TeamFeeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tfu.sqlSave, tfu.mutation, tfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfu *TeamFeeUpdate) SaveX(ctx context.Context) int {
	affected, err := tfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfu *TeamFeeUpdate) Exec(ctx context.Context) error {
	_, err := tfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfu *TeamFeeUpdate) ExecX(ctx context.Context) {
	if err := tfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tfu *TeamFeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(teamfee.Table, teamfee.Columns, sqlgraph.NewFieldSpec(teamfee.FieldID, field.TypeInt32))
	if ps := tfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfu.mutation.Amount(); ok {
		_spec.SetField(teamfee.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tfu.mutation.AddedAmount(); ok {
		_spec.AddField(teamfee.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tfu.mutation.PaymentDate(); ok {
		_spec.SetField(teamfee.FieldPaymentDate, field.TypeTime, value)
	}
	if value, ok := tfu.mutation.Description(); ok {
		_spec.SetField(teamfee.FieldDescription, field.TypeString, value)
	}
	if tfu.mutation.DescriptionCleared() {
		_spec.ClearField(teamfee.FieldDescription, field.TypeString)
	}
	if value, ok := tfu.mutation.CreatedAt(); ok {
		_spec.SetField(teamfee.FieldCreatedAt, field.TypeTime, value)
	}
	if tfu.mutation.CreatedAtCleared() {
		_spec.ClearField(teamfee.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tfu.mutation.UpdatedAt(); ok {
		_spec.SetField(teamfee.FieldUpdatedAt, field.TypeTime, value)
	}
	if tfu.mutation.UpdatedAtCleared() {
		_spec.ClearField(teamfee.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamfee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tfu.mutation.done = true
	return n, nil
}

// TeamFeeUpdateOne is the builder for updating a single TeamFee entity.
type TeamFeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamFeeMutation
}

// SetAmount sets the "amount" field.
func (tfuo *TeamFeeUpdateOne) SetAmount(f float64) *TeamFeeUpdateOne {
	tfuo.mutation.ResetAmount()
	tfuo.mutation.SetAmount(f)
	return tfuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tfuo *TeamFeeUpdateOne) SetNillableAmount(f *float64) *TeamFeeUpdateOne {
	if f != nil {
		tfuo.SetAmount(*f)
	}
	return tfuo
}

// AddAmount adds f to the "amount" field.
func (tfuo *TeamFeeUpdateOne) AddAmount(f float64) *TeamFeeUpdateOne {
	tfuo.mutation.AddAmount(f)
	return tfuo
}

// SetPaymentDate sets the "payment_date" field.
func (tfuo *TeamFeeUpdateOne) SetPaymentDate(t time.Time) *TeamFeeUpdateOne {
	tfuo.mutation.SetPaymentDate(t)
	return tfuo
}

// SetNillablePaymentDate sets the "payment_date" field if the given value is not nil.
func (tfuo *TeamFeeUpdateOne) SetNillablePaymentDate(t *time.Time) *TeamFeeUpdateOne {
	if t != nil {
		tfuo.SetPaymentDate(*t)
	}
	return tfuo
}

// SetDescription sets the "description" field.
func (tfuo *TeamFeeUpdateOne) SetDescription(s string) *TeamFeeUpdateOne {
	tfuo.mutation.SetDescription(s)
	return tfuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tfuo *TeamFeeUpdateOne) SetNillableDescription(s *string) *TeamFeeUpdateOne {
	if s != nil {
		tfuo.SetDescription(*s)
	}
	return tfuo
}

// ClearDescription clears the value of the "description" field.
func (tfuo *TeamFeeUpdateOne) ClearDescription() *TeamFeeUpdateOne {
	tfuo.mutation.ClearDescription()
	return tfuo
}

// SetCreatedAt sets the "created_at" field.
func (tfuo *TeamFeeUpdateOne) SetCreatedAt(t time.Time) *TeamFeeUpdateOne {
	tfuo.mutation.SetCreatedAt(t)
	return tfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tfuo *TeamFeeUpdateOne) SetNillableCreatedAt(t *time.Time) *TeamFeeUpdateOne {
	if t != nil {
		tfuo.SetCreatedAt(*t)
	}
	return tfuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tfuo *TeamFeeUpdateOne) ClearCreatedAt() *TeamFeeUpdateOne {
	tfuo.mutation.ClearCreatedAt()
	return tfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tfuo *TeamFeeUpdateOne) SetUpdatedAt(t time.Time) *TeamFeeUpdateOne {
	tfuo.mutation.SetUpdatedAt(t)
	return tfuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tfuo *TeamFeeUpdateOne) SetNillableUpdatedAt(t *time.Time) *TeamFeeUpdateOne {
	if t != nil {
		tfuo.SetUpdatedAt(*t)
	}
	return tfuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tfuo *TeamFeeUpdateOne) ClearUpdatedAt() *TeamFeeUpdateOne {
	tfuo.mutation.ClearUpdatedAt()
	return tfuo
}

// Mutation returns the TeamFeeMutation object of the builder.
func (tfuo *TeamFeeUpdateOne) Mutation() *TeamFeeMutation {
	return tfuo.mutation
}

// Where appends a list predicates to the TeamFeeUpdate builder.
func (tfuo *TeamFeeUpdateOne) Where(ps ...predicate.TeamFee) *TeamFeeUpdateOne {
	tfuo.mutation.Where(ps...)
	return tfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfuo *TeamFeeUpdateOne) Select(field string, fields ...string) *TeamFeeUpdateOne {
	tfuo.fields = append([]string{field}, fields...)
	return tfuo
}

// Save executes the query and returns the updated TeamFee entity.
func (tfuo *TeamFeeUpdateOne) Save(ctx context.Context) (*TeamFee, error) {
	return withHooks(ctx, tfuo.sqlSave, tfuo.mutation, tfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfuo *TeamFeeUpdateOne) SaveX(ctx context.Context) *TeamFee {
	node, err := tfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfuo *TeamFeeUpdateOne) Exec(ctx context.Context) error {
	_, err := tfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfuo *TeamFeeUpdateOne) ExecX(ctx context.Context) {
	if err := tfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tfuo *TeamFeeUpdateOne) sqlSave(ctx context.Context) (_node *TeamFee, err error) {
	_spec := sqlgraph.NewUpdateSpec(teamfee.Table, teamfee.Columns, sqlgraph.NewFieldSpec(teamfee.FieldID, field.TypeInt32))
	id, ok := tfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TeamFee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teamfee.FieldID)
		for _, f := range fields {
			if !teamfee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teamfee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfuo.mutation.Amount(); ok {
		_spec.SetField(teamfee.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tfuo.mutation.AddedAmount(); ok {
		_spec.AddField(teamfee.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tfuo.mutation.PaymentDate(); ok {
		_spec.SetField(teamfee.FieldPaymentDate, field.TypeTime, value)
	}
	if value, ok := tfuo.mutation.Description(); ok {
		_spec.SetField(teamfee.FieldDescription, field.TypeString, value)
	}
	if tfuo.mutation.DescriptionCleared() {
		_spec.ClearField(teamfee.FieldDescription, field.TypeString)
	}
	if value, ok := tfuo.mutation.CreatedAt(); ok {
		_spec.SetField(teamfee.FieldCreatedAt, field.TypeTime, value)
	}
	if tfuo.mutation.CreatedAtCleared() {
		_spec.ClearField(teamfee.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(teamfee.FieldUpdatedAt, field.TypeTime, value)
	}
	if tfuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(teamfee.FieldUpdatedAt, field.TypeTime)
	}
	_node = &TeamFee{config: tfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamfee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tfuo.mutation.done = true
	return _node, nil
}
