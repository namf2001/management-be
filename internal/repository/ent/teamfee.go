// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"management-be/internal/repository/ent/teamfee"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TeamFee is the model entity for the TeamFee schema.
type TeamFee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// PaymentDate holds the value of the "payment_date" field.
	PaymentDate time.Time `json:"payment_date,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TeamFee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case teamfee.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case teamfee.FieldID:
			values[i] = new(sql.NullInt64)
		case teamfee.FieldDescription:
			values[i] = new(sql.NullString)
		case teamfee.FieldPaymentDate, teamfee.FieldCreatedAt, teamfee.FieldUpdatedAt, teamfee.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TeamFee fields.
func (tf *TeamFee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case teamfee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tf.ID = int(value.Int64)
		case teamfee.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				tf.Amount = value.Float64
			}
		case teamfee.FieldPaymentDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field payment_date", values[i])
			} else if value.Valid {
				tf.PaymentDate = value.Time
			}
		case teamfee.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tf.Description = value.String
			}
		case teamfee.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tf.CreatedAt = value.Time
			}
		case teamfee.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tf.UpdatedAt = value.Time
			}
		case teamfee.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tf.DeletedAt = value.Time
			}
		default:
			tf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TeamFee.
// This includes values selected through modifiers, order, etc.
func (tf *TeamFee) Value(name string) (ent.Value, error) {
	return tf.selectValues.Get(name)
}

// Update returns a builder for updating this TeamFee.
// Note that you need to call TeamFee.Unwrap() before calling this method if this TeamFee
// was returned from a transaction, and the transaction was committed or rolled back.
func (tf *TeamFee) Update() *TeamFeeUpdateOne {
	return NewTeamFeeClient(tf.config).UpdateOne(tf)
}

// Unwrap unwraps the TeamFee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tf *TeamFee) Unwrap() *TeamFee {
	_tx, ok := tf.config.driver.(*txDriver)
	if !ok {
		panic("ent: TeamFee is not a transactional entity")
	}
	tf.config.driver = _tx.drv
	return tf
}

// String implements the fmt.Stringer.
func (tf *TeamFee) String() string {
	var builder strings.Builder
	builder.WriteString("TeamFee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tf.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", tf.Amount))
	builder.WriteString(", ")
	builder.WriteString("payment_date=")
	builder.WriteString(tf.PaymentDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tf.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(tf.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TeamFees is a parsable slice of TeamFee.
type TeamFees []*TeamFee
