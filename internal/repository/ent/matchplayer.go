// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"management-be/internal/repository/ent/match"
	"management-be/internal/repository/ent/matchplayer"
	"management-be/internal/repository/ent/player"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MatchPlayer is the model entity for the MatchPlayer schema.
type MatchPlayer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MatchID holds the value of the "match_id" field.
	MatchID int `json:"match_id,omitempty"`
	// PlayerID holds the value of the "player_id" field.
	PlayerID int `json:"player_id,omitempty"`
	// MinutesPlayed holds the value of the "minutes_played" field.
	MinutesPlayed int32 `json:"minutes_played,omitempty"`
	// GoalsScored holds the value of the "goals_scored" field.
	GoalsScored int32 `json:"goals_scored,omitempty"`
	// Assists holds the value of the "assists" field.
	Assists int32 `json:"assists,omitempty"`
	// YellowCards holds the value of the "yellow_cards" field.
	YellowCards int32 `json:"yellow_cards,omitempty"`
	// RedCard holds the value of the "red_card" field.
	RedCard bool `json:"red_card,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MatchPlayerQuery when eager-loading is set.
	Edges        MatchPlayerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MatchPlayerEdges holds the relations/edges for other nodes in the graph.
type MatchPlayerEdges struct {
	// Match holds the value of the match edge.
	Match *Match `json:"match,omitempty"`
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MatchOrErr returns the Match value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchPlayerEdges) MatchOrErr() (*Match, error) {
	if e.Match != nil {
		return e.Match, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: match.Label}
	}
	return nil, &NotLoadedError{edge: "match"}
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchPlayerEdges) PlayerOrErr() (*Player, error) {
	if e.Player != nil {
		return e.Player, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: player.Label}
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MatchPlayer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case matchplayer.FieldRedCard:
			values[i] = new(sql.NullBool)
		case matchplayer.FieldID, matchplayer.FieldMatchID, matchplayer.FieldPlayerID, matchplayer.FieldMinutesPlayed, matchplayer.FieldGoalsScored, matchplayer.FieldAssists, matchplayer.FieldYellowCards:
			values[i] = new(sql.NullInt64)
		case matchplayer.FieldCreatedAt, matchplayer.FieldUpdatedAt, matchplayer.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MatchPlayer fields.
func (mp *MatchPlayer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case matchplayer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mp.ID = int(value.Int64)
		case matchplayer.FieldMatchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field match_id", values[i])
			} else if value.Valid {
				mp.MatchID = int(value.Int64)
			}
		case matchplayer.FieldPlayerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field player_id", values[i])
			} else if value.Valid {
				mp.PlayerID = int(value.Int64)
			}
		case matchplayer.FieldMinutesPlayed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minutes_played", values[i])
			} else if value.Valid {
				mp.MinutesPlayed = int32(value.Int64)
			}
		case matchplayer.FieldGoalsScored:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goals_scored", values[i])
			} else if value.Valid {
				mp.GoalsScored = int32(value.Int64)
			}
		case matchplayer.FieldAssists:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assists", values[i])
			} else if value.Valid {
				mp.Assists = int32(value.Int64)
			}
		case matchplayer.FieldYellowCards:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yellow_cards", values[i])
			} else if value.Valid {
				mp.YellowCards = int32(value.Int64)
			}
		case matchplayer.FieldRedCard:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field red_card", values[i])
			} else if value.Valid {
				mp.RedCard = value.Bool
			}
		case matchplayer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mp.CreatedAt = value.Time
			}
		case matchplayer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mp.UpdatedAt = value.Time
			}
		case matchplayer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mp.DeletedAt = value.Time
			}
		default:
			mp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MatchPlayer.
// This includes values selected through modifiers, order, etc.
func (mp *MatchPlayer) Value(name string) (ent.Value, error) {
	return mp.selectValues.Get(name)
}

// QueryMatch queries the "match" edge of the MatchPlayer entity.
func (mp *MatchPlayer) QueryMatch() *MatchQuery {
	return NewMatchPlayerClient(mp.config).QueryMatch(mp)
}

// QueryPlayer queries the "player" edge of the MatchPlayer entity.
func (mp *MatchPlayer) QueryPlayer() *PlayerQuery {
	return NewMatchPlayerClient(mp.config).QueryPlayer(mp)
}

// Update returns a builder for updating this MatchPlayer.
// Note that you need to call MatchPlayer.Unwrap() before calling this method if this MatchPlayer
// was returned from a transaction, and the transaction was committed or rolled back.
func (mp *MatchPlayer) Update() *MatchPlayerUpdateOne {
	return NewMatchPlayerClient(mp.config).UpdateOne(mp)
}

// Unwrap unwraps the MatchPlayer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mp *MatchPlayer) Unwrap() *MatchPlayer {
	_tx, ok := mp.config.driver.(*txDriver)
	if !ok {
		panic("ent: MatchPlayer is not a transactional entity")
	}
	mp.config.driver = _tx.drv
	return mp
}

// String implements the fmt.Stringer.
func (mp *MatchPlayer) String() string {
	var builder strings.Builder
	builder.WriteString("MatchPlayer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mp.ID))
	builder.WriteString("match_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.MatchID))
	builder.WriteString(", ")
	builder.WriteString("player_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.PlayerID))
	builder.WriteString(", ")
	builder.WriteString("minutes_played=")
	builder.WriteString(fmt.Sprintf("%v", mp.MinutesPlayed))
	builder.WriteString(", ")
	builder.WriteString("goals_scored=")
	builder.WriteString(fmt.Sprintf("%v", mp.GoalsScored))
	builder.WriteString(", ")
	builder.WriteString("assists=")
	builder.WriteString(fmt.Sprintf("%v", mp.Assists))
	builder.WriteString(", ")
	builder.WriteString("yellow_cards=")
	builder.WriteString(fmt.Sprintf("%v", mp.YellowCards))
	builder.WriteString(", ")
	builder.WriteString("red_card=")
	builder.WriteString(fmt.Sprintf("%v", mp.RedCard))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(mp.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MatchPlayers is a parsable slice of MatchPlayer.
type MatchPlayers []*MatchPlayer
