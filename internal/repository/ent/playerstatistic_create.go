// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"management-be/internal/repository/ent/player"
	"management-be/internal/repository/ent/playerstatistic"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerStatisticCreate is the builder for creating a PlayerStatistic entity.
type PlayerStatisticCreate struct {
	config
	mutation *PlayerStatisticMutation
	hooks    []Hook
}

// SetPlayerID sets the "player_id" field.
func (psc *PlayerStatisticCreate) SetPlayerID(i int) *PlayerStatisticCreate {
	psc.mutation.SetPlayerID(i)
	return psc
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (psc *PlayerStatisticCreate) SetNillablePlayerID(i *int) *PlayerStatisticCreate {
	if i != nil {
		psc.SetPlayerID(*i)
	}
	return psc
}

// SetTotalMatches sets the "total_matches" field.
func (psc *PlayerStatisticCreate) SetTotalMatches(i int32) *PlayerStatisticCreate {
	psc.mutation.SetTotalMatches(i)
	return psc
}

// SetNillableTotalMatches sets the "total_matches" field if the given value is not nil.
func (psc *PlayerStatisticCreate) SetNillableTotalMatches(i *int32) *PlayerStatisticCreate {
	if i != nil {
		psc.SetTotalMatches(*i)
	}
	return psc
}

// SetTotalMinutesPlayed sets the "total_minutes_played" field.
func (psc *PlayerStatisticCreate) SetTotalMinutesPlayed(i int32) *PlayerStatisticCreate {
	psc.mutation.SetTotalMinutesPlayed(i)
	return psc
}

// SetNillableTotalMinutesPlayed sets the "total_minutes_played" field if the given value is not nil.
func (psc *PlayerStatisticCreate) SetNillableTotalMinutesPlayed(i *int32) *PlayerStatisticCreate {
	if i != nil {
		psc.SetTotalMinutesPlayed(*i)
	}
	return psc
}

// SetTotalGoals sets the "total_goals" field.
func (psc *PlayerStatisticCreate) SetTotalGoals(i int32) *PlayerStatisticCreate {
	psc.mutation.SetTotalGoals(i)
	return psc
}

// SetNillableTotalGoals sets the "total_goals" field if the given value is not nil.
func (psc *PlayerStatisticCreate) SetNillableTotalGoals(i *int32) *PlayerStatisticCreate {
	if i != nil {
		psc.SetTotalGoals(*i)
	}
	return psc
}

// SetTotalAssists sets the "total_assists" field.
func (psc *PlayerStatisticCreate) SetTotalAssists(i int32) *PlayerStatisticCreate {
	psc.mutation.SetTotalAssists(i)
	return psc
}

// SetNillableTotalAssists sets the "total_assists" field if the given value is not nil.
func (psc *PlayerStatisticCreate) SetNillableTotalAssists(i *int32) *PlayerStatisticCreate {
	if i != nil {
		psc.SetTotalAssists(*i)
	}
	return psc
}

// SetTotalYellowCards sets the "total_yellow_cards" field.
func (psc *PlayerStatisticCreate) SetTotalYellowCards(i int32) *PlayerStatisticCreate {
	psc.mutation.SetTotalYellowCards(i)
	return psc
}

// SetNillableTotalYellowCards sets the "total_yellow_cards" field if the given value is not nil.
func (psc *PlayerStatisticCreate) SetNillableTotalYellowCards(i *int32) *PlayerStatisticCreate {
	if i != nil {
		psc.SetTotalYellowCards(*i)
	}
	return psc
}

// SetTotalRedCards sets the "total_red_cards" field.
func (psc *PlayerStatisticCreate) SetTotalRedCards(i int32) *PlayerStatisticCreate {
	psc.mutation.SetTotalRedCards(i)
	return psc
}

// SetNillableTotalRedCards sets the "total_red_cards" field if the given value is not nil.
func (psc *PlayerStatisticCreate) SetNillableTotalRedCards(i *int32) *PlayerStatisticCreate {
	if i != nil {
		psc.SetTotalRedCards(*i)
	}
	return psc
}

// SetCreatedAt sets the "created_at" field.
func (psc *PlayerStatisticCreate) SetCreatedAt(t time.Time) *PlayerStatisticCreate {
	psc.mutation.SetCreatedAt(t)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *PlayerStatisticCreate) SetNillableCreatedAt(t *time.Time) *PlayerStatisticCreate {
	if t != nil {
		psc.SetCreatedAt(*t)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *PlayerStatisticCreate) SetUpdatedAt(t time.Time) *PlayerStatisticCreate {
	psc.mutation.SetUpdatedAt(t)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *PlayerStatisticCreate) SetNillableUpdatedAt(t *time.Time) *PlayerStatisticCreate {
	if t != nil {
		psc.SetUpdatedAt(*t)
	}
	return psc
}

// SetID sets the "id" field.
func (psc *PlayerStatisticCreate) SetID(i int) *PlayerStatisticCreate {
	psc.mutation.SetID(i)
	return psc
}

// SetPlayer sets the "player" edge to the Player entity.
func (psc *PlayerStatisticCreate) SetPlayer(p *Player) *PlayerStatisticCreate {
	return psc.SetPlayerID(p.ID)
}

// Mutation returns the PlayerStatisticMutation object of the builder.
func (psc *PlayerStatisticCreate) Mutation() *PlayerStatisticMutation {
	return psc.mutation
}

// Save creates the PlayerStatistic in the database.
func (psc *PlayerStatisticCreate) Save(ctx context.Context) (*PlayerStatistic, error) {
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PlayerStatisticCreate) SaveX(ctx context.Context) *PlayerStatistic {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PlayerStatisticCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PlayerStatisticCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PlayerStatisticCreate) check() error {
	return nil
}

func (psc *PlayerStatisticCreate) sqlSave(ctx context.Context) (*PlayerStatistic, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PlayerStatisticCreate) createSpec() (*PlayerStatistic, *sqlgraph.CreateSpec) {
	var (
		_node = &PlayerStatistic{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(playerstatistic.Table, sqlgraph.NewFieldSpec(playerstatistic.FieldID, field.TypeInt))
	)
	if id, ok := psc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := psc.mutation.TotalMatches(); ok {
		_spec.SetField(playerstatistic.FieldTotalMatches, field.TypeInt32, value)
		_node.TotalMatches = value
	}
	if value, ok := psc.mutation.TotalMinutesPlayed(); ok {
		_spec.SetField(playerstatistic.FieldTotalMinutesPlayed, field.TypeInt32, value)
		_node.TotalMinutesPlayed = value
	}
	if value, ok := psc.mutation.TotalGoals(); ok {
		_spec.SetField(playerstatistic.FieldTotalGoals, field.TypeInt32, value)
		_node.TotalGoals = value
	}
	if value, ok := psc.mutation.TotalAssists(); ok {
		_spec.SetField(playerstatistic.FieldTotalAssists, field.TypeInt32, value)
		_node.TotalAssists = value
	}
	if value, ok := psc.mutation.TotalYellowCards(); ok {
		_spec.SetField(playerstatistic.FieldTotalYellowCards, field.TypeInt32, value)
		_node.TotalYellowCards = value
	}
	if value, ok := psc.mutation.TotalRedCards(); ok {
		_spec.SetField(playerstatistic.FieldTotalRedCards, field.TypeInt32, value)
		_node.TotalRedCards = value
	}
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(playerstatistic.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.SetField(playerstatistic.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := psc.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   playerstatistic.PlayerTable,
			Columns: []string{playerstatistic.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlayerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlayerStatisticCreateBulk is the builder for creating many PlayerStatistic entities in bulk.
type PlayerStatisticCreateBulk struct {
	config
	err      error
	builders []*PlayerStatisticCreate
}

// Save creates the PlayerStatistic entities in the database.
func (pscb *PlayerStatisticCreateBulk) Save(ctx context.Context) ([]*PlayerStatistic, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PlayerStatistic, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlayerStatisticMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PlayerStatisticCreateBulk) SaveX(ctx context.Context) []*PlayerStatistic {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PlayerStatisticCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PlayerStatisticCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
