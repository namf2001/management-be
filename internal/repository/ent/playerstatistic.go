// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"management-be/internal/repository/ent/player"
	"management-be/internal/repository/ent/playerstatistic"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PlayerStatistic is the model entity for the PlayerStatistic schema.
type PlayerStatistic struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// PlayerID holds the value of the "player_id" field.
	PlayerID int32 `json:"player_id,omitempty"`
	// TotalMatches holds the value of the "total_matches" field.
	TotalMatches int32 `json:"total_matches,omitempty"`
	// TotalMinutesPlayed holds the value of the "total_minutes_played" field.
	TotalMinutesPlayed int32 `json:"total_minutes_played,omitempty"`
	// TotalGoals holds the value of the "total_goals" field.
	TotalGoals int32 `json:"total_goals,omitempty"`
	// TotalAssists holds the value of the "total_assists" field.
	TotalAssists int32 `json:"total_assists,omitempty"`
	// TotalYellowCards holds the value of the "total_yellow_cards" field.
	TotalYellowCards int32 `json:"total_yellow_cards,omitempty"`
	// TotalRedCards holds the value of the "total_red_cards" field.
	TotalRedCards int32 `json:"total_red_cards,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlayerStatisticQuery when eager-loading is set.
	Edges        PlayerStatisticEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlayerStatisticEdges holds the relations/edges for other nodes in the graph.
type PlayerStatisticEdges struct {
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerStatisticEdges) PlayerOrErr() (*Player, error) {
	if e.Player != nil {
		return e.Player, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: player.Label}
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlayerStatistic) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playerstatistic.FieldID, playerstatistic.FieldPlayerID, playerstatistic.FieldTotalMatches, playerstatistic.FieldTotalMinutesPlayed, playerstatistic.FieldTotalGoals, playerstatistic.FieldTotalAssists, playerstatistic.FieldTotalYellowCards, playerstatistic.FieldTotalRedCards:
			values[i] = new(sql.NullInt64)
		case playerstatistic.FieldCreatedAt, playerstatistic.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlayerStatistic fields.
func (ps *PlayerStatistic) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playerstatistic.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int32(value.Int64)
		case playerstatistic.FieldPlayerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field player_id", values[i])
			} else if value.Valid {
				ps.PlayerID = int32(value.Int64)
			}
		case playerstatistic.FieldTotalMatches:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_matches", values[i])
			} else if value.Valid {
				ps.TotalMatches = int32(value.Int64)
			}
		case playerstatistic.FieldTotalMinutesPlayed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_minutes_played", values[i])
			} else if value.Valid {
				ps.TotalMinutesPlayed = int32(value.Int64)
			}
		case playerstatistic.FieldTotalGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_goals", values[i])
			} else if value.Valid {
				ps.TotalGoals = int32(value.Int64)
			}
		case playerstatistic.FieldTotalAssists:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_assists", values[i])
			} else if value.Valid {
				ps.TotalAssists = int32(value.Int64)
			}
		case playerstatistic.FieldTotalYellowCards:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_yellow_cards", values[i])
			} else if value.Valid {
				ps.TotalYellowCards = int32(value.Int64)
			}
		case playerstatistic.FieldTotalRedCards:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_red_cards", values[i])
			} else if value.Valid {
				ps.TotalRedCards = int32(value.Int64)
			}
		case playerstatistic.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ps.CreatedAt = value.Time
			}
		case playerstatistic.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ps.UpdatedAt = value.Time
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlayerStatistic.
// This includes values selected through modifiers, order, etc.
func (ps *PlayerStatistic) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryPlayer queries the "player" edge of the PlayerStatistic entity.
func (ps *PlayerStatistic) QueryPlayer() *PlayerQuery {
	return NewPlayerStatisticClient(ps.config).QueryPlayer(ps)
}

// Update returns a builder for updating this PlayerStatistic.
// Note that you need to call PlayerStatistic.Unwrap() before calling this method if this PlayerStatistic
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PlayerStatistic) Update() *PlayerStatisticUpdateOne {
	return NewPlayerStatisticClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PlayerStatistic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PlayerStatistic) Unwrap() *PlayerStatistic {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlayerStatistic is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PlayerStatistic) String() string {
	var builder strings.Builder
	builder.WriteString("PlayerStatistic(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("player_id=")
	builder.WriteString(fmt.Sprintf("%v", ps.PlayerID))
	builder.WriteString(", ")
	builder.WriteString("total_matches=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalMatches))
	builder.WriteString(", ")
	builder.WriteString("total_minutes_played=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalMinutesPlayed))
	builder.WriteString(", ")
	builder.WriteString("total_goals=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalGoals))
	builder.WriteString(", ")
	builder.WriteString("total_assists=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalAssists))
	builder.WriteString(", ")
	builder.WriteString("total_yellow_cards=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalYellowCards))
	builder.WriteString(", ")
	builder.WriteString("total_red_cards=")
	builder.WriteString(fmt.Sprintf("%v", ps.TotalRedCards))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ps.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PlayerStatistics is a parsable slice of PlayerStatistic.
type PlayerStatistics []*PlayerStatistic
