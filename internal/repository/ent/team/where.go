// Code generated by ent, DO NOT EDIT.

package team

import (
	"management-be/internal/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldName, v))
}

// CompanyName applies equality check predicate on the "company_name" field. It's identical to CompanyNameEQ.
func CompanyName(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldCompanyName, v))
}

// ContactPerson applies equality check predicate on the "contact_person" field. It's identical to ContactPersonEQ.
func ContactPerson(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldContactPerson, v))
}

// ContactPhone applies equality check predicate on the "contact_phone" field. It's identical to ContactPhoneEQ.
func ContactPhone(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldContactPhone, v))
}

// ContactEmail applies equality check predicate on the "contact_email" field. It's identical to ContactEmailEQ.
func ContactEmail(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldContactEmail, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldName, v))
}

// CompanyNameEQ applies the EQ predicate on the "company_name" field.
func CompanyNameEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldCompanyName, v))
}

// CompanyNameNEQ applies the NEQ predicate on the "company_name" field.
func CompanyNameNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldCompanyName, v))
}

// CompanyNameIn applies the In predicate on the "company_name" field.
func CompanyNameIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldCompanyName, vs...))
}

// CompanyNameNotIn applies the NotIn predicate on the "company_name" field.
func CompanyNameNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldCompanyName, vs...))
}

// CompanyNameGT applies the GT predicate on the "company_name" field.
func CompanyNameGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldCompanyName, v))
}

// CompanyNameGTE applies the GTE predicate on the "company_name" field.
func CompanyNameGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldCompanyName, v))
}

// CompanyNameLT applies the LT predicate on the "company_name" field.
func CompanyNameLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldCompanyName, v))
}

// CompanyNameLTE applies the LTE predicate on the "company_name" field.
func CompanyNameLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldCompanyName, v))
}

// CompanyNameContains applies the Contains predicate on the "company_name" field.
func CompanyNameContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldCompanyName, v))
}

// CompanyNameHasPrefix applies the HasPrefix predicate on the "company_name" field.
func CompanyNameHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldCompanyName, v))
}

// CompanyNameHasSuffix applies the HasSuffix predicate on the "company_name" field.
func CompanyNameHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldCompanyName, v))
}

// CompanyNameIsNil applies the IsNil predicate on the "company_name" field.
func CompanyNameIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldCompanyName))
}

// CompanyNameNotNil applies the NotNil predicate on the "company_name" field.
func CompanyNameNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldCompanyName))
}

// CompanyNameEqualFold applies the EqualFold predicate on the "company_name" field.
func CompanyNameEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldCompanyName, v))
}

// CompanyNameContainsFold applies the ContainsFold predicate on the "company_name" field.
func CompanyNameContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldCompanyName, v))
}

// ContactPersonEQ applies the EQ predicate on the "contact_person" field.
func ContactPersonEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldContactPerson, v))
}

// ContactPersonNEQ applies the NEQ predicate on the "contact_person" field.
func ContactPersonNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldContactPerson, v))
}

// ContactPersonIn applies the In predicate on the "contact_person" field.
func ContactPersonIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldContactPerson, vs...))
}

// ContactPersonNotIn applies the NotIn predicate on the "contact_person" field.
func ContactPersonNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldContactPerson, vs...))
}

// ContactPersonGT applies the GT predicate on the "contact_person" field.
func ContactPersonGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldContactPerson, v))
}

// ContactPersonGTE applies the GTE predicate on the "contact_person" field.
func ContactPersonGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldContactPerson, v))
}

// ContactPersonLT applies the LT predicate on the "contact_person" field.
func ContactPersonLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldContactPerson, v))
}

// ContactPersonLTE applies the LTE predicate on the "contact_person" field.
func ContactPersonLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldContactPerson, v))
}

// ContactPersonContains applies the Contains predicate on the "contact_person" field.
func ContactPersonContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldContactPerson, v))
}

// ContactPersonHasPrefix applies the HasPrefix predicate on the "contact_person" field.
func ContactPersonHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldContactPerson, v))
}

// ContactPersonHasSuffix applies the HasSuffix predicate on the "contact_person" field.
func ContactPersonHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldContactPerson, v))
}

// ContactPersonIsNil applies the IsNil predicate on the "contact_person" field.
func ContactPersonIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldContactPerson))
}

// ContactPersonNotNil applies the NotNil predicate on the "contact_person" field.
func ContactPersonNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldContactPerson))
}

// ContactPersonEqualFold applies the EqualFold predicate on the "contact_person" field.
func ContactPersonEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldContactPerson, v))
}

// ContactPersonContainsFold applies the ContainsFold predicate on the "contact_person" field.
func ContactPersonContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldContactPerson, v))
}

// ContactPhoneEQ applies the EQ predicate on the "contact_phone" field.
func ContactPhoneEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldContactPhone, v))
}

// ContactPhoneNEQ applies the NEQ predicate on the "contact_phone" field.
func ContactPhoneNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldContactPhone, v))
}

// ContactPhoneIn applies the In predicate on the "contact_phone" field.
func ContactPhoneIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldContactPhone, vs...))
}

// ContactPhoneNotIn applies the NotIn predicate on the "contact_phone" field.
func ContactPhoneNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldContactPhone, vs...))
}

// ContactPhoneGT applies the GT predicate on the "contact_phone" field.
func ContactPhoneGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldContactPhone, v))
}

// ContactPhoneGTE applies the GTE predicate on the "contact_phone" field.
func ContactPhoneGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldContactPhone, v))
}

// ContactPhoneLT applies the LT predicate on the "contact_phone" field.
func ContactPhoneLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldContactPhone, v))
}

// ContactPhoneLTE applies the LTE predicate on the "contact_phone" field.
func ContactPhoneLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldContactPhone, v))
}

// ContactPhoneContains applies the Contains predicate on the "contact_phone" field.
func ContactPhoneContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldContactPhone, v))
}

// ContactPhoneHasPrefix applies the HasPrefix predicate on the "contact_phone" field.
func ContactPhoneHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldContactPhone, v))
}

// ContactPhoneHasSuffix applies the HasSuffix predicate on the "contact_phone" field.
func ContactPhoneHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldContactPhone, v))
}

// ContactPhoneIsNil applies the IsNil predicate on the "contact_phone" field.
func ContactPhoneIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldContactPhone))
}

// ContactPhoneNotNil applies the NotNil predicate on the "contact_phone" field.
func ContactPhoneNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldContactPhone))
}

// ContactPhoneEqualFold applies the EqualFold predicate on the "contact_phone" field.
func ContactPhoneEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldContactPhone, v))
}

// ContactPhoneContainsFold applies the ContainsFold predicate on the "contact_phone" field.
func ContactPhoneContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldContactPhone, v))
}

// ContactEmailEQ applies the EQ predicate on the "contact_email" field.
func ContactEmailEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldContactEmail, v))
}

// ContactEmailNEQ applies the NEQ predicate on the "contact_email" field.
func ContactEmailNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldContactEmail, v))
}

// ContactEmailIn applies the In predicate on the "contact_email" field.
func ContactEmailIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldContactEmail, vs...))
}

// ContactEmailNotIn applies the NotIn predicate on the "contact_email" field.
func ContactEmailNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldContactEmail, vs...))
}

// ContactEmailGT applies the GT predicate on the "contact_email" field.
func ContactEmailGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldContactEmail, v))
}

// ContactEmailGTE applies the GTE predicate on the "contact_email" field.
func ContactEmailGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldContactEmail, v))
}

// ContactEmailLT applies the LT predicate on the "contact_email" field.
func ContactEmailLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldContactEmail, v))
}

// ContactEmailLTE applies the LTE predicate on the "contact_email" field.
func ContactEmailLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldContactEmail, v))
}

// ContactEmailContains applies the Contains predicate on the "contact_email" field.
func ContactEmailContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldContactEmail, v))
}

// ContactEmailHasPrefix applies the HasPrefix predicate on the "contact_email" field.
func ContactEmailHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldContactEmail, v))
}

// ContactEmailHasSuffix applies the HasSuffix predicate on the "contact_email" field.
func ContactEmailHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldContactEmail, v))
}

// ContactEmailIsNil applies the IsNil predicate on the "contact_email" field.
func ContactEmailIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldContactEmail))
}

// ContactEmailNotNil applies the NotNil predicate on the "contact_email" field.
func ContactEmailNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldContactEmail))
}

// ContactEmailEqualFold applies the EqualFold predicate on the "contact_email" field.
func ContactEmailEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldContactEmail, v))
}

// ContactEmailContainsFold applies the ContainsFold predicate on the "contact_email" field.
func ContactEmailContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldContactEmail, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldUpdatedAt))
}

// HasMatches applies the HasEdge predicate on the "matches" edge.
func HasMatches() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MatchesTable, MatchesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchesWith applies the HasEdge predicate on the "matches" edge with a given conditions (other predicates).
func HasMatchesWith(preds ...predicate.Match) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newMatchesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Team) predicate.Team {
	return predicate.Team(sql.NotPredicates(p))
}
