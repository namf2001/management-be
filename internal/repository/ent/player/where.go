// Code generated by ent, DO NOT EDIT.

package player

import (
	"management-be/internal/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldID, id))
}

// DepartmentID applies equality check predicate on the "department_id" field. It's identical to DepartmentIDEQ.
func DepartmentID(v int32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldDepartmentID, v))
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldFullName, v))
}

// JerseyNumber applies equality check predicate on the "jersey_number" field. It's identical to JerseyNumberEQ.
func JerseyNumber(v int32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldJerseyNumber, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPosition, v))
}

// DateOfBirth applies equality check predicate on the "date_of_birth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldDateOfBirth, v))
}

// HeightCm applies equality check predicate on the "height_cm" field. It's identical to HeightCmEQ.
func HeightCm(v int32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldHeightCm, v))
}

// WeightKg applies equality check predicate on the "weight_kg" field. It's identical to WeightKgEQ.
func WeightKg(v int32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldWeightKg, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPhone, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldEmail, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldIsActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldUpdatedAt, v))
}

// DepartmentIDEQ applies the EQ predicate on the "department_id" field.
func DepartmentIDEQ(v int32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldDepartmentID, v))
}

// DepartmentIDNEQ applies the NEQ predicate on the "department_id" field.
func DepartmentIDNEQ(v int32) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldDepartmentID, v))
}

// DepartmentIDIn applies the In predicate on the "department_id" field.
func DepartmentIDIn(vs ...int32) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldDepartmentID, vs...))
}

// DepartmentIDNotIn applies the NotIn predicate on the "department_id" field.
func DepartmentIDNotIn(vs ...int32) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldDepartmentID, vs...))
}

// DepartmentIDIsNil applies the IsNil predicate on the "department_id" field.
func DepartmentIDIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldDepartmentID))
}

// DepartmentIDNotNil applies the NotNil predicate on the "department_id" field.
func DepartmentIDNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldDepartmentID))
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldFullName, v))
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldFullName, v))
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldFullName, vs...))
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldFullName, vs...))
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldFullName, v))
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldFullName, v))
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldFullName, v))
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldFullName, v))
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldFullName, v))
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldFullName, v))
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldFullName, v))
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldFullName, v))
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldFullName, v))
}

// JerseyNumberEQ applies the EQ predicate on the "jersey_number" field.
func JerseyNumberEQ(v int32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldJerseyNumber, v))
}

// JerseyNumberNEQ applies the NEQ predicate on the "jersey_number" field.
func JerseyNumberNEQ(v int32) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldJerseyNumber, v))
}

// JerseyNumberIn applies the In predicate on the "jersey_number" field.
func JerseyNumberIn(vs ...int32) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldJerseyNumber, vs...))
}

// JerseyNumberNotIn applies the NotIn predicate on the "jersey_number" field.
func JerseyNumberNotIn(vs ...int32) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldJerseyNumber, vs...))
}

// JerseyNumberGT applies the GT predicate on the "jersey_number" field.
func JerseyNumberGT(v int32) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldJerseyNumber, v))
}

// JerseyNumberGTE applies the GTE predicate on the "jersey_number" field.
func JerseyNumberGTE(v int32) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldJerseyNumber, v))
}

// JerseyNumberLT applies the LT predicate on the "jersey_number" field.
func JerseyNumberLT(v int32) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldJerseyNumber, v))
}

// JerseyNumberLTE applies the LTE predicate on the "jersey_number" field.
func JerseyNumberLTE(v int32) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldJerseyNumber, v))
}

// JerseyNumberIsNil applies the IsNil predicate on the "jersey_number" field.
func JerseyNumberIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldJerseyNumber))
}

// JerseyNumberNotNil applies the NotNil predicate on the "jersey_number" field.
func JerseyNumberNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldJerseyNumber))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldPosition, v))
}

// DateOfBirthEQ applies the EQ predicate on the "date_of_birth" field.
func DateOfBirthEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldDateOfBirth, v))
}

// DateOfBirthNEQ applies the NEQ predicate on the "date_of_birth" field.
func DateOfBirthNEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldDateOfBirth, v))
}

// DateOfBirthIn applies the In predicate on the "date_of_birth" field.
func DateOfBirthIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldDateOfBirth, vs...))
}

// DateOfBirthNotIn applies the NotIn predicate on the "date_of_birth" field.
func DateOfBirthNotIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldDateOfBirth, vs...))
}

// DateOfBirthGT applies the GT predicate on the "date_of_birth" field.
func DateOfBirthGT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldDateOfBirth, v))
}

// DateOfBirthGTE applies the GTE predicate on the "date_of_birth" field.
func DateOfBirthGTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldDateOfBirth, v))
}

// DateOfBirthLT applies the LT predicate on the "date_of_birth" field.
func DateOfBirthLT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldDateOfBirth, v))
}

// DateOfBirthLTE applies the LTE predicate on the "date_of_birth" field.
func DateOfBirthLTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldDateOfBirth, v))
}

// DateOfBirthIsNil applies the IsNil predicate on the "date_of_birth" field.
func DateOfBirthIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldDateOfBirth))
}

// DateOfBirthNotNil applies the NotNil predicate on the "date_of_birth" field.
func DateOfBirthNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldDateOfBirth))
}

// HeightCmEQ applies the EQ predicate on the "height_cm" field.
func HeightCmEQ(v int32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldHeightCm, v))
}

// HeightCmNEQ applies the NEQ predicate on the "height_cm" field.
func HeightCmNEQ(v int32) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldHeightCm, v))
}

// HeightCmIn applies the In predicate on the "height_cm" field.
func HeightCmIn(vs ...int32) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldHeightCm, vs...))
}

// HeightCmNotIn applies the NotIn predicate on the "height_cm" field.
func HeightCmNotIn(vs ...int32) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldHeightCm, vs...))
}

// HeightCmGT applies the GT predicate on the "height_cm" field.
func HeightCmGT(v int32) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldHeightCm, v))
}

// HeightCmGTE applies the GTE predicate on the "height_cm" field.
func HeightCmGTE(v int32) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldHeightCm, v))
}

// HeightCmLT applies the LT predicate on the "height_cm" field.
func HeightCmLT(v int32) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldHeightCm, v))
}

// HeightCmLTE applies the LTE predicate on the "height_cm" field.
func HeightCmLTE(v int32) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldHeightCm, v))
}

// HeightCmIsNil applies the IsNil predicate on the "height_cm" field.
func HeightCmIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldHeightCm))
}

// HeightCmNotNil applies the NotNil predicate on the "height_cm" field.
func HeightCmNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldHeightCm))
}

// WeightKgEQ applies the EQ predicate on the "weight_kg" field.
func WeightKgEQ(v int32) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldWeightKg, v))
}

// WeightKgNEQ applies the NEQ predicate on the "weight_kg" field.
func WeightKgNEQ(v int32) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldWeightKg, v))
}

// WeightKgIn applies the In predicate on the "weight_kg" field.
func WeightKgIn(vs ...int32) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldWeightKg, vs...))
}

// WeightKgNotIn applies the NotIn predicate on the "weight_kg" field.
func WeightKgNotIn(vs ...int32) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldWeightKg, vs...))
}

// WeightKgGT applies the GT predicate on the "weight_kg" field.
func WeightKgGT(v int32) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldWeightKg, v))
}

// WeightKgGTE applies the GTE predicate on the "weight_kg" field.
func WeightKgGTE(v int32) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldWeightKg, v))
}

// WeightKgLT applies the LT predicate on the "weight_kg" field.
func WeightKgLT(v int32) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldWeightKg, v))
}

// WeightKgLTE applies the LTE predicate on the "weight_kg" field.
func WeightKgLTE(v int32) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldWeightKg, v))
}

// WeightKgIsNil applies the IsNil predicate on the "weight_kg" field.
func WeightKgIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldWeightKg))
}

// WeightKgNotNil applies the NotNil predicate on the "weight_kg" field.
func WeightKgNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldWeightKg))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldPhone, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldEmail, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldIsActive, v))
}

// IsActiveIsNil applies the IsNil predicate on the "is_active" field.
func IsActiveIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldIsActive))
}

// IsActiveNotNil applies the NotNil predicate on the "is_active" field.
func IsActiveNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldIsActive))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldUpdatedAt))
}

// HasMatchPlayers applies the HasEdge predicate on the "match_players" edge.
func HasMatchPlayers() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MatchPlayersTable, MatchPlayersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchPlayersWith applies the HasEdge predicate on the "match_players" edge with a given conditions (other predicates).
func HasMatchPlayersWith(preds ...predicate.MatchPlayer) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newMatchPlayersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayerStatistic applies the HasEdge predicate on the "player_statistic" edge.
func HasPlayerStatistic() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PlayerStatisticTable, PlayerStatisticColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerStatisticWith applies the HasEdge predicate on the "player_statistic" edge with a given conditions (other predicates).
func HasPlayerStatisticWith(preds ...predicate.PlayerStatistic) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newPlayerStatisticStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartment applies the HasEdge predicate on the "department" edge.
func HasDepartment() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentWith applies the HasEdge predicate on the "department" edge with a given conditions (other predicates).
func HasDepartmentWith(preds ...predicate.Department) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newDepartmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Player) predicate.Player {
	return predicate.Player(sql.NotPredicates(p))
}
