// Code generated by ent, DO NOT EDIT.

package player

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the player type in the database.
	Label = "player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDepartmentID holds the string denoting the department_id field in the database.
	FieldDepartmentID = "department_id"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldJerseyNumber holds the string denoting the jersey_number field in the database.
	FieldJerseyNumber = "jersey_number"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldDateOfBirth holds the string denoting the date_of_birth field in the database.
	FieldDateOfBirth = "date_of_birth"
	// FieldHeightCm holds the string denoting the height_cm field in the database.
	FieldHeightCm = "height_cm"
	// FieldWeightKg holds the string denoting the weight_kg field in the database.
	FieldWeightKg = "weight_kg"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeMatchPlayers holds the string denoting the match_players edge name in mutations.
	EdgeMatchPlayers = "match_players"
	// EdgePlayerStatistic holds the string denoting the player_statistic edge name in mutations.
	EdgePlayerStatistic = "player_statistic"
	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// Table holds the table name of the player in the database.
	Table = "players"
	// MatchPlayersTable is the table that holds the match_players relation/edge.
	MatchPlayersTable = "match_players"
	// MatchPlayersInverseTable is the table name for the MatchPlayer entity.
	// It exists in this package in order to avoid circular dependency with the "matchplayer" package.
	MatchPlayersInverseTable = "match_players"
	// MatchPlayersColumn is the table column denoting the match_players relation/edge.
	MatchPlayersColumn = "player_id"
	// PlayerStatisticTable is the table that holds the player_statistic relation/edge.
	PlayerStatisticTable = "player_statistics"
	// PlayerStatisticInverseTable is the table name for the PlayerStatistic entity.
	// It exists in this package in order to avoid circular dependency with the "playerstatistic" package.
	PlayerStatisticInverseTable = "player_statistics"
	// PlayerStatisticColumn is the table column denoting the player_statistic relation/edge.
	PlayerStatisticColumn = "player_id"
	// DepartmentTable is the table that holds the department relation/edge.
	DepartmentTable = "players"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "department_id"
)

// Columns holds all SQL columns for player fields.
var Columns = []string{
	FieldID,
	FieldDepartmentID,
	FieldFullName,
	FieldJerseyNumber,
	FieldPosition,
	FieldDateOfBirth,
	FieldHeightCm,
	FieldWeightKg,
	FieldPhone,
	FieldEmail,
	FieldIsActive,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Player queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDepartmentID orders the results by the department_id field.
func ByDepartmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartmentID, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByJerseyNumber orders the results by the jersey_number field.
func ByJerseyNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJerseyNumber, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByDateOfBirth orders the results by the date_of_birth field.
func ByDateOfBirth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateOfBirth, opts...).ToFunc()
}

// ByHeightCm orders the results by the height_cm field.
func ByHeightCm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeightCm, opts...).ToFunc()
}

// ByWeightKg orders the results by the weight_kg field.
func ByWeightKg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeightKg, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByMatchPlayersCount orders the results by match_players count.
func ByMatchPlayersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMatchPlayersStep(), opts...)
	}
}

// ByMatchPlayers orders the results by match_players terms.
func ByMatchPlayers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMatchPlayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlayerStatisticField orders the results by player_statistic field.
func ByPlayerStatisticField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStatisticStep(), sql.OrderByField(field, opts...))
	}
}

// ByDepartmentField orders the results by department field.
func ByDepartmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentStep(), sql.OrderByField(field, opts...))
	}
}
func newMatchPlayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MatchPlayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MatchPlayersTable, MatchPlayersColumn),
	)
}
func newPlayerStatisticStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerStatisticInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PlayerStatisticTable, PlayerStatisticColumn),
	)
}
func newDepartmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
	)
}
