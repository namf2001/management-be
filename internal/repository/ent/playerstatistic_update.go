// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"management-be/internal/repository/ent/player"
	"management-be/internal/repository/ent/playerstatistic"
	"management-be/internal/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlayerStatisticUpdate is the builder for updating PlayerStatistic entities.
type PlayerStatisticUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerStatisticMutation
}

// Where appends a list predicates to the PlayerStatisticUpdate builder.
func (psu *PlayerStatisticUpdate) Where(ps ...predicate.PlayerStatistic) *PlayerStatisticUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetPlayerID sets the "player_id" field.
func (psu *PlayerStatisticUpdate) SetPlayerID(i int) *PlayerStatisticUpdate {
	psu.mutation.SetPlayerID(i)
	return psu
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (psu *PlayerStatisticUpdate) SetNillablePlayerID(i *int) *PlayerStatisticUpdate {
	if i != nil {
		psu.SetPlayerID(*i)
	}
	return psu
}

// ClearPlayerID clears the value of the "player_id" field.
func (psu *PlayerStatisticUpdate) ClearPlayerID() *PlayerStatisticUpdate {
	psu.mutation.ClearPlayerID()
	return psu
}

// SetTotalMatches sets the "total_matches" field.
func (psu *PlayerStatisticUpdate) SetTotalMatches(i int32) *PlayerStatisticUpdate {
	psu.mutation.ResetTotalMatches()
	psu.mutation.SetTotalMatches(i)
	return psu
}

// SetNillableTotalMatches sets the "total_matches" field if the given value is not nil.
func (psu *PlayerStatisticUpdate) SetNillableTotalMatches(i *int32) *PlayerStatisticUpdate {
	if i != nil {
		psu.SetTotalMatches(*i)
	}
	return psu
}

// AddTotalMatches adds i to the "total_matches" field.
func (psu *PlayerStatisticUpdate) AddTotalMatches(i int32) *PlayerStatisticUpdate {
	psu.mutation.AddTotalMatches(i)
	return psu
}

// ClearTotalMatches clears the value of the "total_matches" field.
func (psu *PlayerStatisticUpdate) ClearTotalMatches() *PlayerStatisticUpdate {
	psu.mutation.ClearTotalMatches()
	return psu
}

// SetTotalMinutesPlayed sets the "total_minutes_played" field.
func (psu *PlayerStatisticUpdate) SetTotalMinutesPlayed(i int32) *PlayerStatisticUpdate {
	psu.mutation.ResetTotalMinutesPlayed()
	psu.mutation.SetTotalMinutesPlayed(i)
	return psu
}

// SetNillableTotalMinutesPlayed sets the "total_minutes_played" field if the given value is not nil.
func (psu *PlayerStatisticUpdate) SetNillableTotalMinutesPlayed(i *int32) *PlayerStatisticUpdate {
	if i != nil {
		psu.SetTotalMinutesPlayed(*i)
	}
	return psu
}

// AddTotalMinutesPlayed adds i to the "total_minutes_played" field.
func (psu *PlayerStatisticUpdate) AddTotalMinutesPlayed(i int32) *PlayerStatisticUpdate {
	psu.mutation.AddTotalMinutesPlayed(i)
	return psu
}

// ClearTotalMinutesPlayed clears the value of the "total_minutes_played" field.
func (psu *PlayerStatisticUpdate) ClearTotalMinutesPlayed() *PlayerStatisticUpdate {
	psu.mutation.ClearTotalMinutesPlayed()
	return psu
}

// SetTotalGoals sets the "total_goals" field.
func (psu *PlayerStatisticUpdate) SetTotalGoals(i int32) *PlayerStatisticUpdate {
	psu.mutation.ResetTotalGoals()
	psu.mutation.SetTotalGoals(i)
	return psu
}

// SetNillableTotalGoals sets the "total_goals" field if the given value is not nil.
func (psu *PlayerStatisticUpdate) SetNillableTotalGoals(i *int32) *PlayerStatisticUpdate {
	if i != nil {
		psu.SetTotalGoals(*i)
	}
	return psu
}

// AddTotalGoals adds i to the "total_goals" field.
func (psu *PlayerStatisticUpdate) AddTotalGoals(i int32) *PlayerStatisticUpdate {
	psu.mutation.AddTotalGoals(i)
	return psu
}

// ClearTotalGoals clears the value of the "total_goals" field.
func (psu *PlayerStatisticUpdate) ClearTotalGoals() *PlayerStatisticUpdate {
	psu.mutation.ClearTotalGoals()
	return psu
}

// SetTotalAssists sets the "total_assists" field.
func (psu *PlayerStatisticUpdate) SetTotalAssists(i int32) *PlayerStatisticUpdate {
	psu.mutation.ResetTotalAssists()
	psu.mutation.SetTotalAssists(i)
	return psu
}

// SetNillableTotalAssists sets the "total_assists" field if the given value is not nil.
func (psu *PlayerStatisticUpdate) SetNillableTotalAssists(i *int32) *PlayerStatisticUpdate {
	if i != nil {
		psu.SetTotalAssists(*i)
	}
	return psu
}

// AddTotalAssists adds i to the "total_assists" field.
func (psu *PlayerStatisticUpdate) AddTotalAssists(i int32) *PlayerStatisticUpdate {
	psu.mutation.AddTotalAssists(i)
	return psu
}

// ClearTotalAssists clears the value of the "total_assists" field.
func (psu *PlayerStatisticUpdate) ClearTotalAssists() *PlayerStatisticUpdate {
	psu.mutation.ClearTotalAssists()
	return psu
}

// SetTotalYellowCards sets the "total_yellow_cards" field.
func (psu *PlayerStatisticUpdate) SetTotalYellowCards(i int32) *PlayerStatisticUpdate {
	psu.mutation.ResetTotalYellowCards()
	psu.mutation.SetTotalYellowCards(i)
	return psu
}

// SetNillableTotalYellowCards sets the "total_yellow_cards" field if the given value is not nil.
func (psu *PlayerStatisticUpdate) SetNillableTotalYellowCards(i *int32) *PlayerStatisticUpdate {
	if i != nil {
		psu.SetTotalYellowCards(*i)
	}
	return psu
}

// AddTotalYellowCards adds i to the "total_yellow_cards" field.
func (psu *PlayerStatisticUpdate) AddTotalYellowCards(i int32) *PlayerStatisticUpdate {
	psu.mutation.AddTotalYellowCards(i)
	return psu
}

// ClearTotalYellowCards clears the value of the "total_yellow_cards" field.
func (psu *PlayerStatisticUpdate) ClearTotalYellowCards() *PlayerStatisticUpdate {
	psu.mutation.ClearTotalYellowCards()
	return psu
}

// SetTotalRedCards sets the "total_red_cards" field.
func (psu *PlayerStatisticUpdate) SetTotalRedCards(i int32) *PlayerStatisticUpdate {
	psu.mutation.ResetTotalRedCards()
	psu.mutation.SetTotalRedCards(i)
	return psu
}

// SetNillableTotalRedCards sets the "total_red_cards" field if the given value is not nil.
func (psu *PlayerStatisticUpdate) SetNillableTotalRedCards(i *int32) *PlayerStatisticUpdate {
	if i != nil {
		psu.SetTotalRedCards(*i)
	}
	return psu
}

// AddTotalRedCards adds i to the "total_red_cards" field.
func (psu *PlayerStatisticUpdate) AddTotalRedCards(i int32) *PlayerStatisticUpdate {
	psu.mutation.AddTotalRedCards(i)
	return psu
}

// ClearTotalRedCards clears the value of the "total_red_cards" field.
func (psu *PlayerStatisticUpdate) ClearTotalRedCards() *PlayerStatisticUpdate {
	psu.mutation.ClearTotalRedCards()
	return psu
}

// SetCreatedAt sets the "created_at" field.
func (psu *PlayerStatisticUpdate) SetCreatedAt(t time.Time) *PlayerStatisticUpdate {
	psu.mutation.SetCreatedAt(t)
	return psu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psu *PlayerStatisticUpdate) SetNillableCreatedAt(t *time.Time) *PlayerStatisticUpdate {
	if t != nil {
		psu.SetCreatedAt(*t)
	}
	return psu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (psu *PlayerStatisticUpdate) ClearCreatedAt() *PlayerStatisticUpdate {
	psu.mutation.ClearCreatedAt()
	return psu
}

// SetUpdatedAt sets the "updated_at" field.
func (psu *PlayerStatisticUpdate) SetUpdatedAt(t time.Time) *PlayerStatisticUpdate {
	psu.mutation.SetUpdatedAt(t)
	return psu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psu *PlayerStatisticUpdate) SetNillableUpdatedAt(t *time.Time) *PlayerStatisticUpdate {
	if t != nil {
		psu.SetUpdatedAt(*t)
	}
	return psu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (psu *PlayerStatisticUpdate) ClearUpdatedAt() *PlayerStatisticUpdate {
	psu.mutation.ClearUpdatedAt()
	return psu
}

// SetPlayer sets the "player" edge to the Player entity.
func (psu *PlayerStatisticUpdate) SetPlayer(p *Player) *PlayerStatisticUpdate {
	return psu.SetPlayerID(p.ID)
}

// Mutation returns the PlayerStatisticMutation object of the builder.
func (psu *PlayerStatisticUpdate) Mutation() *PlayerStatisticMutation {
	return psu.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (psu *PlayerStatisticUpdate) ClearPlayer() *PlayerStatisticUpdate {
	psu.mutation.ClearPlayer()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PlayerStatisticUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PlayerStatisticUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PlayerStatisticUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PlayerStatisticUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psu *PlayerStatisticUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(playerstatistic.Table, playerstatistic.Columns, sqlgraph.NewFieldSpec(playerstatistic.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.TotalMatches(); ok {
		_spec.SetField(playerstatistic.FieldTotalMatches, field.TypeInt32, value)
	}
	if value, ok := psu.mutation.AddedTotalMatches(); ok {
		_spec.AddField(playerstatistic.FieldTotalMatches, field.TypeInt32, value)
	}
	if psu.mutation.TotalMatchesCleared() {
		_spec.ClearField(playerstatistic.FieldTotalMatches, field.TypeInt32)
	}
	if value, ok := psu.mutation.TotalMinutesPlayed(); ok {
		_spec.SetField(playerstatistic.FieldTotalMinutesPlayed, field.TypeInt32, value)
	}
	if value, ok := psu.mutation.AddedTotalMinutesPlayed(); ok {
		_spec.AddField(playerstatistic.FieldTotalMinutesPlayed, field.TypeInt32, value)
	}
	if psu.mutation.TotalMinutesPlayedCleared() {
		_spec.ClearField(playerstatistic.FieldTotalMinutesPlayed, field.TypeInt32)
	}
	if value, ok := psu.mutation.TotalGoals(); ok {
		_spec.SetField(playerstatistic.FieldTotalGoals, field.TypeInt32, value)
	}
	if value, ok := psu.mutation.AddedTotalGoals(); ok {
		_spec.AddField(playerstatistic.FieldTotalGoals, field.TypeInt32, value)
	}
	if psu.mutation.TotalGoalsCleared() {
		_spec.ClearField(playerstatistic.FieldTotalGoals, field.TypeInt32)
	}
	if value, ok := psu.mutation.TotalAssists(); ok {
		_spec.SetField(playerstatistic.FieldTotalAssists, field.TypeInt32, value)
	}
	if value, ok := psu.mutation.AddedTotalAssists(); ok {
		_spec.AddField(playerstatistic.FieldTotalAssists, field.TypeInt32, value)
	}
	if psu.mutation.TotalAssistsCleared() {
		_spec.ClearField(playerstatistic.FieldTotalAssists, field.TypeInt32)
	}
	if value, ok := psu.mutation.TotalYellowCards(); ok {
		_spec.SetField(playerstatistic.FieldTotalYellowCards, field.TypeInt32, value)
	}
	if value, ok := psu.mutation.AddedTotalYellowCards(); ok {
		_spec.AddField(playerstatistic.FieldTotalYellowCards, field.TypeInt32, value)
	}
	if psu.mutation.TotalYellowCardsCleared() {
		_spec.ClearField(playerstatistic.FieldTotalYellowCards, field.TypeInt32)
	}
	if value, ok := psu.mutation.TotalRedCards(); ok {
		_spec.SetField(playerstatistic.FieldTotalRedCards, field.TypeInt32, value)
	}
	if value, ok := psu.mutation.AddedTotalRedCards(); ok {
		_spec.AddField(playerstatistic.FieldTotalRedCards, field.TypeInt32, value)
	}
	if psu.mutation.TotalRedCardsCleared() {
		_spec.ClearField(playerstatistic.FieldTotalRedCards, field.TypeInt32)
	}
	if value, ok := psu.mutation.CreatedAt(); ok {
		_spec.SetField(playerstatistic.FieldCreatedAt, field.TypeTime, value)
	}
	if psu.mutation.CreatedAtCleared() {
		_spec.ClearField(playerstatistic.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := psu.mutation.UpdatedAt(); ok {
		_spec.SetField(playerstatistic.FieldUpdatedAt, field.TypeTime, value)
	}
	if psu.mutation.UpdatedAtCleared() {
		_spec.ClearField(playerstatistic.FieldUpdatedAt, field.TypeTime)
	}
	if psu.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   playerstatistic.PlayerTable,
			Columns: []string{playerstatistic.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   playerstatistic.PlayerTable,
			Columns: []string{playerstatistic.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerstatistic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PlayerStatisticUpdateOne is the builder for updating a single PlayerStatistic entity.
type PlayerStatisticUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerStatisticMutation
}

// SetPlayerID sets the "player_id" field.
func (psuo *PlayerStatisticUpdateOne) SetPlayerID(i int) *PlayerStatisticUpdateOne {
	psuo.mutation.SetPlayerID(i)
	return psuo
}

// SetNillablePlayerID sets the "player_id" field if the given value is not nil.
func (psuo *PlayerStatisticUpdateOne) SetNillablePlayerID(i *int) *PlayerStatisticUpdateOne {
	if i != nil {
		psuo.SetPlayerID(*i)
	}
	return psuo
}

// ClearPlayerID clears the value of the "player_id" field.
func (psuo *PlayerStatisticUpdateOne) ClearPlayerID() *PlayerStatisticUpdateOne {
	psuo.mutation.ClearPlayerID()
	return psuo
}

// SetTotalMatches sets the "total_matches" field.
func (psuo *PlayerStatisticUpdateOne) SetTotalMatches(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.ResetTotalMatches()
	psuo.mutation.SetTotalMatches(i)
	return psuo
}

// SetNillableTotalMatches sets the "total_matches" field if the given value is not nil.
func (psuo *PlayerStatisticUpdateOne) SetNillableTotalMatches(i *int32) *PlayerStatisticUpdateOne {
	if i != nil {
		psuo.SetTotalMatches(*i)
	}
	return psuo
}

// AddTotalMatches adds i to the "total_matches" field.
func (psuo *PlayerStatisticUpdateOne) AddTotalMatches(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.AddTotalMatches(i)
	return psuo
}

// ClearTotalMatches clears the value of the "total_matches" field.
func (psuo *PlayerStatisticUpdateOne) ClearTotalMatches() *PlayerStatisticUpdateOne {
	psuo.mutation.ClearTotalMatches()
	return psuo
}

// SetTotalMinutesPlayed sets the "total_minutes_played" field.
func (psuo *PlayerStatisticUpdateOne) SetTotalMinutesPlayed(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.ResetTotalMinutesPlayed()
	psuo.mutation.SetTotalMinutesPlayed(i)
	return psuo
}

// SetNillableTotalMinutesPlayed sets the "total_minutes_played" field if the given value is not nil.
func (psuo *PlayerStatisticUpdateOne) SetNillableTotalMinutesPlayed(i *int32) *PlayerStatisticUpdateOne {
	if i != nil {
		psuo.SetTotalMinutesPlayed(*i)
	}
	return psuo
}

// AddTotalMinutesPlayed adds i to the "total_minutes_played" field.
func (psuo *PlayerStatisticUpdateOne) AddTotalMinutesPlayed(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.AddTotalMinutesPlayed(i)
	return psuo
}

// ClearTotalMinutesPlayed clears the value of the "total_minutes_played" field.
func (psuo *PlayerStatisticUpdateOne) ClearTotalMinutesPlayed() *PlayerStatisticUpdateOne {
	psuo.mutation.ClearTotalMinutesPlayed()
	return psuo
}

// SetTotalGoals sets the "total_goals" field.
func (psuo *PlayerStatisticUpdateOne) SetTotalGoals(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.ResetTotalGoals()
	psuo.mutation.SetTotalGoals(i)
	return psuo
}

// SetNillableTotalGoals sets the "total_goals" field if the given value is not nil.
func (psuo *PlayerStatisticUpdateOne) SetNillableTotalGoals(i *int32) *PlayerStatisticUpdateOne {
	if i != nil {
		psuo.SetTotalGoals(*i)
	}
	return psuo
}

// AddTotalGoals adds i to the "total_goals" field.
func (psuo *PlayerStatisticUpdateOne) AddTotalGoals(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.AddTotalGoals(i)
	return psuo
}

// ClearTotalGoals clears the value of the "total_goals" field.
func (psuo *PlayerStatisticUpdateOne) ClearTotalGoals() *PlayerStatisticUpdateOne {
	psuo.mutation.ClearTotalGoals()
	return psuo
}

// SetTotalAssists sets the "total_assists" field.
func (psuo *PlayerStatisticUpdateOne) SetTotalAssists(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.ResetTotalAssists()
	psuo.mutation.SetTotalAssists(i)
	return psuo
}

// SetNillableTotalAssists sets the "total_assists" field if the given value is not nil.
func (psuo *PlayerStatisticUpdateOne) SetNillableTotalAssists(i *int32) *PlayerStatisticUpdateOne {
	if i != nil {
		psuo.SetTotalAssists(*i)
	}
	return psuo
}

// AddTotalAssists adds i to the "total_assists" field.
func (psuo *PlayerStatisticUpdateOne) AddTotalAssists(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.AddTotalAssists(i)
	return psuo
}

// ClearTotalAssists clears the value of the "total_assists" field.
func (psuo *PlayerStatisticUpdateOne) ClearTotalAssists() *PlayerStatisticUpdateOne {
	psuo.mutation.ClearTotalAssists()
	return psuo
}

// SetTotalYellowCards sets the "total_yellow_cards" field.
func (psuo *PlayerStatisticUpdateOne) SetTotalYellowCards(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.ResetTotalYellowCards()
	psuo.mutation.SetTotalYellowCards(i)
	return psuo
}

// SetNillableTotalYellowCards sets the "total_yellow_cards" field if the given value is not nil.
func (psuo *PlayerStatisticUpdateOne) SetNillableTotalYellowCards(i *int32) *PlayerStatisticUpdateOne {
	if i != nil {
		psuo.SetTotalYellowCards(*i)
	}
	return psuo
}

// AddTotalYellowCards adds i to the "total_yellow_cards" field.
func (psuo *PlayerStatisticUpdateOne) AddTotalYellowCards(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.AddTotalYellowCards(i)
	return psuo
}

// ClearTotalYellowCards clears the value of the "total_yellow_cards" field.
func (psuo *PlayerStatisticUpdateOne) ClearTotalYellowCards() *PlayerStatisticUpdateOne {
	psuo.mutation.ClearTotalYellowCards()
	return psuo
}

// SetTotalRedCards sets the "total_red_cards" field.
func (psuo *PlayerStatisticUpdateOne) SetTotalRedCards(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.ResetTotalRedCards()
	psuo.mutation.SetTotalRedCards(i)
	return psuo
}

// SetNillableTotalRedCards sets the "total_red_cards" field if the given value is not nil.
func (psuo *PlayerStatisticUpdateOne) SetNillableTotalRedCards(i *int32) *PlayerStatisticUpdateOne {
	if i != nil {
		psuo.SetTotalRedCards(*i)
	}
	return psuo
}

// AddTotalRedCards adds i to the "total_red_cards" field.
func (psuo *PlayerStatisticUpdateOne) AddTotalRedCards(i int32) *PlayerStatisticUpdateOne {
	psuo.mutation.AddTotalRedCards(i)
	return psuo
}

// ClearTotalRedCards clears the value of the "total_red_cards" field.
func (psuo *PlayerStatisticUpdateOne) ClearTotalRedCards() *PlayerStatisticUpdateOne {
	psuo.mutation.ClearTotalRedCards()
	return psuo
}

// SetCreatedAt sets the "created_at" field.
func (psuo *PlayerStatisticUpdateOne) SetCreatedAt(t time.Time) *PlayerStatisticUpdateOne {
	psuo.mutation.SetCreatedAt(t)
	return psuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psuo *PlayerStatisticUpdateOne) SetNillableCreatedAt(t *time.Time) *PlayerStatisticUpdateOne {
	if t != nil {
		psuo.SetCreatedAt(*t)
	}
	return psuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (psuo *PlayerStatisticUpdateOne) ClearCreatedAt() *PlayerStatisticUpdateOne {
	psuo.mutation.ClearCreatedAt()
	return psuo
}

// SetUpdatedAt sets the "updated_at" field.
func (psuo *PlayerStatisticUpdateOne) SetUpdatedAt(t time.Time) *PlayerStatisticUpdateOne {
	psuo.mutation.SetUpdatedAt(t)
	return psuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psuo *PlayerStatisticUpdateOne) SetNillableUpdatedAt(t *time.Time) *PlayerStatisticUpdateOne {
	if t != nil {
		psuo.SetUpdatedAt(*t)
	}
	return psuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (psuo *PlayerStatisticUpdateOne) ClearUpdatedAt() *PlayerStatisticUpdateOne {
	psuo.mutation.ClearUpdatedAt()
	return psuo
}

// SetPlayer sets the "player" edge to the Player entity.
func (psuo *PlayerStatisticUpdateOne) SetPlayer(p *Player) *PlayerStatisticUpdateOne {
	return psuo.SetPlayerID(p.ID)
}

// Mutation returns the PlayerStatisticMutation object of the builder.
func (psuo *PlayerStatisticUpdateOne) Mutation() *PlayerStatisticMutation {
	return psuo.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (psuo *PlayerStatisticUpdateOne) ClearPlayer() *PlayerStatisticUpdateOne {
	psuo.mutation.ClearPlayer()
	return psuo
}

// Where appends a list predicates to the PlayerStatisticUpdate builder.
func (psuo *PlayerStatisticUpdateOne) Where(ps ...predicate.PlayerStatistic) *PlayerStatisticUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PlayerStatisticUpdateOne) Select(field string, fields ...string) *PlayerStatisticUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PlayerStatistic entity.
func (psuo *PlayerStatisticUpdateOne) Save(ctx context.Context) (*PlayerStatistic, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PlayerStatisticUpdateOne) SaveX(ctx context.Context) *PlayerStatistic {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PlayerStatisticUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PlayerStatisticUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psuo *PlayerStatisticUpdateOne) sqlSave(ctx context.Context) (_node *PlayerStatistic, err error) {
	_spec := sqlgraph.NewUpdateSpec(playerstatistic.Table, playerstatistic.Columns, sqlgraph.NewFieldSpec(playerstatistic.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlayerStatistic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playerstatistic.FieldID)
		for _, f := range fields {
			if !playerstatistic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playerstatistic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.TotalMatches(); ok {
		_spec.SetField(playerstatistic.FieldTotalMatches, field.TypeInt32, value)
	}
	if value, ok := psuo.mutation.AddedTotalMatches(); ok {
		_spec.AddField(playerstatistic.FieldTotalMatches, field.TypeInt32, value)
	}
	if psuo.mutation.TotalMatchesCleared() {
		_spec.ClearField(playerstatistic.FieldTotalMatches, field.TypeInt32)
	}
	if value, ok := psuo.mutation.TotalMinutesPlayed(); ok {
		_spec.SetField(playerstatistic.FieldTotalMinutesPlayed, field.TypeInt32, value)
	}
	if value, ok := psuo.mutation.AddedTotalMinutesPlayed(); ok {
		_spec.AddField(playerstatistic.FieldTotalMinutesPlayed, field.TypeInt32, value)
	}
	if psuo.mutation.TotalMinutesPlayedCleared() {
		_spec.ClearField(playerstatistic.FieldTotalMinutesPlayed, field.TypeInt32)
	}
	if value, ok := psuo.mutation.TotalGoals(); ok {
		_spec.SetField(playerstatistic.FieldTotalGoals, field.TypeInt32, value)
	}
	if value, ok := psuo.mutation.AddedTotalGoals(); ok {
		_spec.AddField(playerstatistic.FieldTotalGoals, field.TypeInt32, value)
	}
	if psuo.mutation.TotalGoalsCleared() {
		_spec.ClearField(playerstatistic.FieldTotalGoals, field.TypeInt32)
	}
	if value, ok := psuo.mutation.TotalAssists(); ok {
		_spec.SetField(playerstatistic.FieldTotalAssists, field.TypeInt32, value)
	}
	if value, ok := psuo.mutation.AddedTotalAssists(); ok {
		_spec.AddField(playerstatistic.FieldTotalAssists, field.TypeInt32, value)
	}
	if psuo.mutation.TotalAssistsCleared() {
		_spec.ClearField(playerstatistic.FieldTotalAssists, field.TypeInt32)
	}
	if value, ok := psuo.mutation.TotalYellowCards(); ok {
		_spec.SetField(playerstatistic.FieldTotalYellowCards, field.TypeInt32, value)
	}
	if value, ok := psuo.mutation.AddedTotalYellowCards(); ok {
		_spec.AddField(playerstatistic.FieldTotalYellowCards, field.TypeInt32, value)
	}
	if psuo.mutation.TotalYellowCardsCleared() {
		_spec.ClearField(playerstatistic.FieldTotalYellowCards, field.TypeInt32)
	}
	if value, ok := psuo.mutation.TotalRedCards(); ok {
		_spec.SetField(playerstatistic.FieldTotalRedCards, field.TypeInt32, value)
	}
	if value, ok := psuo.mutation.AddedTotalRedCards(); ok {
		_spec.AddField(playerstatistic.FieldTotalRedCards, field.TypeInt32, value)
	}
	if psuo.mutation.TotalRedCardsCleared() {
		_spec.ClearField(playerstatistic.FieldTotalRedCards, field.TypeInt32)
	}
	if value, ok := psuo.mutation.CreatedAt(); ok {
		_spec.SetField(playerstatistic.FieldCreatedAt, field.TypeTime, value)
	}
	if psuo.mutation.CreatedAtCleared() {
		_spec.ClearField(playerstatistic.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := psuo.mutation.UpdatedAt(); ok {
		_spec.SetField(playerstatistic.FieldUpdatedAt, field.TypeTime, value)
	}
	if psuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(playerstatistic.FieldUpdatedAt, field.TypeTime)
	}
	if psuo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   playerstatistic.PlayerTable,
			Columns: []string{playerstatistic.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   playerstatistic.PlayerTable,
			Columns: []string{playerstatistic.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlayerStatistic{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerstatistic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
