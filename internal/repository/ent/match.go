// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"management-be/internal/repository/ent/match"
	"management-be/internal/repository/ent/team"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Match is the model entity for the Match schema.
type Match struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OpponentTeamID holds the value of the "opponent_team_id" field.
	OpponentTeamID int `json:"opponent_team_id,omitempty"`
	// MatchDate holds the value of the "match_date" field.
	MatchDate time.Time `json:"match_date,omitempty"`
	// Venue holds the value of the "venue" field.
	Venue string `json:"venue,omitempty"`
	// IsHomeGame holds the value of the "is_home_game" field.
	IsHomeGame bool `json:"is_home_game,omitempty"`
	// OurScore holds the value of the "our_score" field.
	OurScore int32 `json:"our_score,omitempty"`
	// OpponentScore holds the value of the "opponent_score" field.
	OpponentScore int32 `json:"opponent_score,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MatchQuery when eager-loading is set.
	Edges        MatchEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MatchEdges holds the relations/edges for other nodes in the graph.
type MatchEdges struct {
	// MatchPlayers holds the value of the match_players edge.
	MatchPlayers []*MatchPlayer `json:"match_players,omitempty"`
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MatchPlayersOrErr returns the MatchPlayers value or an error if the edge
// was not loaded in eager-loading.
func (e MatchEdges) MatchPlayersOrErr() ([]*MatchPlayer, error) {
	if e.loadedTypes[0] {
		return e.MatchPlayers, nil
	}
	return nil, &NotLoadedError{edge: "match_players"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchEdges) TeamOrErr() (*Team, error) {
	if e.Team != nil {
		return e.Team, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: team.Label}
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Match) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case match.FieldIsHomeGame:
			values[i] = new(sql.NullBool)
		case match.FieldID, match.FieldOpponentTeamID, match.FieldOurScore, match.FieldOpponentScore:
			values[i] = new(sql.NullInt64)
		case match.FieldVenue, match.FieldStatus, match.FieldNotes:
			values[i] = new(sql.NullString)
		case match.FieldMatchDate, match.FieldCreatedAt, match.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Match fields.
func (m *Match) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case match.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case match.FieldOpponentTeamID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field opponent_team_id", values[i])
			} else if value.Valid {
				m.OpponentTeamID = int(value.Int64)
			}
		case match.FieldMatchDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field match_date", values[i])
			} else if value.Valid {
				m.MatchDate = value.Time
			}
		case match.FieldVenue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field venue", values[i])
			} else if value.Valid {
				m.Venue = value.String
			}
		case match.FieldIsHomeGame:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_home_game", values[i])
			} else if value.Valid {
				m.IsHomeGame = value.Bool
			}
		case match.FieldOurScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field our_score", values[i])
			} else if value.Valid {
				m.OurScore = int32(value.Int64)
			}
		case match.FieldOpponentScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field opponent_score", values[i])
			} else if value.Valid {
				m.OpponentScore = int32(value.Int64)
			}
		case match.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = value.String
			}
		case match.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				m.Notes = value.String
			}
		case match.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case match.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Match.
// This includes values selected through modifiers, order, etc.
func (m *Match) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryMatchPlayers queries the "match_players" edge of the Match entity.
func (m *Match) QueryMatchPlayers() *MatchPlayerQuery {
	return NewMatchClient(m.config).QueryMatchPlayers(m)
}

// QueryTeam queries the "team" edge of the Match entity.
func (m *Match) QueryTeam() *TeamQuery {
	return NewMatchClient(m.config).QueryTeam(m)
}

// Update returns a builder for updating this Match.
// Note that you need to call Match.Unwrap() before calling this method if this Match
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Match) Update() *MatchUpdateOne {
	return NewMatchClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Match entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Match) Unwrap() *Match {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Match is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Match) String() string {
	var builder strings.Builder
	builder.WriteString("Match(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("opponent_team_id=")
	builder.WriteString(fmt.Sprintf("%v", m.OpponentTeamID))
	builder.WriteString(", ")
	builder.WriteString("match_date=")
	builder.WriteString(m.MatchDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("venue=")
	builder.WriteString(m.Venue)
	builder.WriteString(", ")
	builder.WriteString("is_home_game=")
	builder.WriteString(fmt.Sprintf("%v", m.IsHomeGame))
	builder.WriteString(", ")
	builder.WriteString("our_score=")
	builder.WriteString(fmt.Sprintf("%v", m.OurScore))
	builder.WriteString(", ")
	builder.WriteString("opponent_score=")
	builder.WriteString(fmt.Sprintf("%v", m.OpponentScore))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(m.Status)
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(m.Notes)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Matches is a parsable slice of Match.
type Matches []*Match
