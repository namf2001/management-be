// Code generated by ent, DO NOT EDIT.

package matchplayer

import (
	"management-be/internal/repository/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldID, id))
}

// MatchID applies equality check predicate on the "match_id" field. It's identical to MatchIDEQ.
func MatchID(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldMatchID, v))
}

// PlayerID applies equality check predicate on the "player_id" field. It's identical to PlayerIDEQ.
func PlayerID(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldPlayerID, v))
}

// MinutesPlayed applies equality check predicate on the "minutes_played" field. It's identical to MinutesPlayedEQ.
func MinutesPlayed(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldMinutesPlayed, v))
}

// GoalsScored applies equality check predicate on the "goals_scored" field. It's identical to GoalsScoredEQ.
func GoalsScored(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldGoalsScored, v))
}

// Assists applies equality check predicate on the "assists" field. It's identical to AssistsEQ.
func Assists(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldAssists, v))
}

// YellowCards applies equality check predicate on the "yellow_cards" field. It's identical to YellowCardsEQ.
func YellowCards(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldYellowCards, v))
}

// RedCard applies equality check predicate on the "red_card" field. It's identical to RedCardEQ.
func RedCard(v bool) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldRedCard, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldDeletedAt, v))
}

// MatchIDEQ applies the EQ predicate on the "match_id" field.
func MatchIDEQ(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldMatchID, v))
}

// MatchIDNEQ applies the NEQ predicate on the "match_id" field.
func MatchIDNEQ(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldMatchID, v))
}

// MatchIDIn applies the In predicate on the "match_id" field.
func MatchIDIn(vs ...int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldMatchID, vs...))
}

// MatchIDNotIn applies the NotIn predicate on the "match_id" field.
func MatchIDNotIn(vs ...int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldMatchID, vs...))
}

// MatchIDIsNil applies the IsNil predicate on the "match_id" field.
func MatchIDIsNil() predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIsNull(FieldMatchID))
}

// MatchIDNotNil applies the NotNil predicate on the "match_id" field.
func MatchIDNotNil() predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotNull(FieldMatchID))
}

// PlayerIDEQ applies the EQ predicate on the "player_id" field.
func PlayerIDEQ(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldPlayerID, v))
}

// PlayerIDNEQ applies the NEQ predicate on the "player_id" field.
func PlayerIDNEQ(v int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldPlayerID, v))
}

// PlayerIDIn applies the In predicate on the "player_id" field.
func PlayerIDIn(vs ...int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldPlayerID, vs...))
}

// PlayerIDNotIn applies the NotIn predicate on the "player_id" field.
func PlayerIDNotIn(vs ...int) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldPlayerID, vs...))
}

// PlayerIDIsNil applies the IsNil predicate on the "player_id" field.
func PlayerIDIsNil() predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIsNull(FieldPlayerID))
}

// PlayerIDNotNil applies the NotNil predicate on the "player_id" field.
func PlayerIDNotNil() predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotNull(FieldPlayerID))
}

// MinutesPlayedEQ applies the EQ predicate on the "minutes_played" field.
func MinutesPlayedEQ(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldMinutesPlayed, v))
}

// MinutesPlayedNEQ applies the NEQ predicate on the "minutes_played" field.
func MinutesPlayedNEQ(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldMinutesPlayed, v))
}

// MinutesPlayedIn applies the In predicate on the "minutes_played" field.
func MinutesPlayedIn(vs ...int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldMinutesPlayed, vs...))
}

// MinutesPlayedNotIn applies the NotIn predicate on the "minutes_played" field.
func MinutesPlayedNotIn(vs ...int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldMinutesPlayed, vs...))
}

// MinutesPlayedGT applies the GT predicate on the "minutes_played" field.
func MinutesPlayedGT(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldMinutesPlayed, v))
}

// MinutesPlayedGTE applies the GTE predicate on the "minutes_played" field.
func MinutesPlayedGTE(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldMinutesPlayed, v))
}

// MinutesPlayedLT applies the LT predicate on the "minutes_played" field.
func MinutesPlayedLT(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldMinutesPlayed, v))
}

// MinutesPlayedLTE applies the LTE predicate on the "minutes_played" field.
func MinutesPlayedLTE(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldMinutesPlayed, v))
}

// GoalsScoredEQ applies the EQ predicate on the "goals_scored" field.
func GoalsScoredEQ(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldGoalsScored, v))
}

// GoalsScoredNEQ applies the NEQ predicate on the "goals_scored" field.
func GoalsScoredNEQ(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldGoalsScored, v))
}

// GoalsScoredIn applies the In predicate on the "goals_scored" field.
func GoalsScoredIn(vs ...int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldGoalsScored, vs...))
}

// GoalsScoredNotIn applies the NotIn predicate on the "goals_scored" field.
func GoalsScoredNotIn(vs ...int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldGoalsScored, vs...))
}

// GoalsScoredGT applies the GT predicate on the "goals_scored" field.
func GoalsScoredGT(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldGoalsScored, v))
}

// GoalsScoredGTE applies the GTE predicate on the "goals_scored" field.
func GoalsScoredGTE(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldGoalsScored, v))
}

// GoalsScoredLT applies the LT predicate on the "goals_scored" field.
func GoalsScoredLT(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldGoalsScored, v))
}

// GoalsScoredLTE applies the LTE predicate on the "goals_scored" field.
func GoalsScoredLTE(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldGoalsScored, v))
}

// AssistsEQ applies the EQ predicate on the "assists" field.
func AssistsEQ(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldAssists, v))
}

// AssistsNEQ applies the NEQ predicate on the "assists" field.
func AssistsNEQ(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldAssists, v))
}

// AssistsIn applies the In predicate on the "assists" field.
func AssistsIn(vs ...int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldAssists, vs...))
}

// AssistsNotIn applies the NotIn predicate on the "assists" field.
func AssistsNotIn(vs ...int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldAssists, vs...))
}

// AssistsGT applies the GT predicate on the "assists" field.
func AssistsGT(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldAssists, v))
}

// AssistsGTE applies the GTE predicate on the "assists" field.
func AssistsGTE(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldAssists, v))
}

// AssistsLT applies the LT predicate on the "assists" field.
func AssistsLT(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldAssists, v))
}

// AssistsLTE applies the LTE predicate on the "assists" field.
func AssistsLTE(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldAssists, v))
}

// YellowCardsEQ applies the EQ predicate on the "yellow_cards" field.
func YellowCardsEQ(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldYellowCards, v))
}

// YellowCardsNEQ applies the NEQ predicate on the "yellow_cards" field.
func YellowCardsNEQ(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldYellowCards, v))
}

// YellowCardsIn applies the In predicate on the "yellow_cards" field.
func YellowCardsIn(vs ...int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldYellowCards, vs...))
}

// YellowCardsNotIn applies the NotIn predicate on the "yellow_cards" field.
func YellowCardsNotIn(vs ...int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldYellowCards, vs...))
}

// YellowCardsGT applies the GT predicate on the "yellow_cards" field.
func YellowCardsGT(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldYellowCards, v))
}

// YellowCardsGTE applies the GTE predicate on the "yellow_cards" field.
func YellowCardsGTE(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldYellowCards, v))
}

// YellowCardsLT applies the LT predicate on the "yellow_cards" field.
func YellowCardsLT(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldYellowCards, v))
}

// YellowCardsLTE applies the LTE predicate on the "yellow_cards" field.
func YellowCardsLTE(v int32) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldYellowCards, v))
}

// RedCardEQ applies the EQ predicate on the "red_card" field.
func RedCardEQ(v bool) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldRedCard, v))
}

// RedCardNEQ applies the NEQ predicate on the "red_card" field.
func RedCardNEQ(v bool) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldRedCard, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.FieldNotNull(FieldDeletedAt))
}

// HasMatch applies the HasEdge predicate on the "match" edge.
func HasMatch() predicate.MatchPlayer {
	return predicate.MatchPlayer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MatchTable, MatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchWith applies the HasEdge predicate on the "match" edge with a given conditions (other predicates).
func HasMatchWith(preds ...predicate.Match) predicate.MatchPlayer {
	return predicate.MatchPlayer(func(s *sql.Selector) {
		step := newMatchStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayer applies the HasEdge predicate on the "player" edge.
func HasPlayer() predicate.MatchPlayer {
	return predicate.MatchPlayer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlayerTable, PlayerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerWith applies the HasEdge predicate on the "player" edge with a given conditions (other predicates).
func HasPlayerWith(preds ...predicate.Player) predicate.MatchPlayer {
	return predicate.MatchPlayer(func(s *sql.Selector) {
		step := newPlayerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MatchPlayer) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MatchPlayer) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MatchPlayer) predicate.MatchPlayer {
	return predicate.MatchPlayer(sql.NotPredicates(p))
}
