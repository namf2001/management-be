// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"management-be/internal/repository/ent/matchesgateway"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchesGatewayCreate is the builder for creating a MatchesGateway entity.
type MatchesGatewayCreate struct {
	config
	mutation *MatchesGatewayMutation
	hooks    []Hook
}

// SetCompetitionName sets the "competition_name" field.
func (mgc *MatchesGatewayCreate) SetCompetitionName(s string) *MatchesGatewayCreate {
	mgc.mutation.SetCompetitionName(s)
	return mgc
}

// SetSeasonStartDate sets the "season_start_date" field.
func (mgc *MatchesGatewayCreate) SetSeasonStartDate(t time.Time) *MatchesGatewayCreate {
	mgc.mutation.SetSeasonStartDate(t)
	return mgc
}

// SetMatchDate sets the "match_date" field.
func (mgc *MatchesGatewayCreate) SetMatchDate(t time.Time) *MatchesGatewayCreate {
	mgc.mutation.SetMatchDate(t)
	return mgc
}

// SetHomeTeamName sets the "home_team_name" field.
func (mgc *MatchesGatewayCreate) SetHomeTeamName(s string) *MatchesGatewayCreate {
	mgc.mutation.SetHomeTeamName(s)
	return mgc
}

// SetHomeTeamShortName sets the "home_team_short_name" field.
func (mgc *MatchesGatewayCreate) SetHomeTeamShortName(s string) *MatchesGatewayCreate {
	mgc.mutation.SetHomeTeamShortName(s)
	return mgc
}

// SetHomeTeamLogo sets the "home_team_logo" field.
func (mgc *MatchesGatewayCreate) SetHomeTeamLogo(s string) *MatchesGatewayCreate {
	mgc.mutation.SetHomeTeamLogo(s)
	return mgc
}

// SetAwayTeamName sets the "away_team_name" field.
func (mgc *MatchesGatewayCreate) SetAwayTeamName(s string) *MatchesGatewayCreate {
	mgc.mutation.SetAwayTeamName(s)
	return mgc
}

// SetAwayTeamShortName sets the "away_team_short_name" field.
func (mgc *MatchesGatewayCreate) SetAwayTeamShortName(s string) *MatchesGatewayCreate {
	mgc.mutation.SetAwayTeamShortName(s)
	return mgc
}

// SetAwayTeamLogo sets the "away_team_logo" field.
func (mgc *MatchesGatewayCreate) SetAwayTeamLogo(s string) *MatchesGatewayCreate {
	mgc.mutation.SetAwayTeamLogo(s)
	return mgc
}

// SetHomeScore sets the "home_score" field.
func (mgc *MatchesGatewayCreate) SetHomeScore(i int32) *MatchesGatewayCreate {
	mgc.mutation.SetHomeScore(i)
	return mgc
}

// SetNillableHomeScore sets the "home_score" field if the given value is not nil.
func (mgc *MatchesGatewayCreate) SetNillableHomeScore(i *int32) *MatchesGatewayCreate {
	if i != nil {
		mgc.SetHomeScore(*i)
	}
	return mgc
}

// SetAwayScore sets the "away_score" field.
func (mgc *MatchesGatewayCreate) SetAwayScore(i int32) *MatchesGatewayCreate {
	mgc.mutation.SetAwayScore(i)
	return mgc
}

// SetNillableAwayScore sets the "away_score" field if the given value is not nil.
func (mgc *MatchesGatewayCreate) SetNillableAwayScore(i *int32) *MatchesGatewayCreate {
	if i != nil {
		mgc.SetAwayScore(*i)
	}
	return mgc
}

// SetStatus sets the "status" field.
func (mgc *MatchesGatewayCreate) SetStatus(s string) *MatchesGatewayCreate {
	mgc.mutation.SetStatus(s)
	return mgc
}

// SetCreatedAt sets the "created_at" field.
func (mgc *MatchesGatewayCreate) SetCreatedAt(t time.Time) *MatchesGatewayCreate {
	mgc.mutation.SetCreatedAt(t)
	return mgc
}

// SetUpdatedAt sets the "updated_at" field.
func (mgc *MatchesGatewayCreate) SetUpdatedAt(t time.Time) *MatchesGatewayCreate {
	mgc.mutation.SetUpdatedAt(t)
	return mgc
}

// SetDeletedAt sets the "deleted_at" field.
func (mgc *MatchesGatewayCreate) SetDeletedAt(t time.Time) *MatchesGatewayCreate {
	mgc.mutation.SetDeletedAt(t)
	return mgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mgc *MatchesGatewayCreate) SetNillableDeletedAt(t *time.Time) *MatchesGatewayCreate {
	if t != nil {
		mgc.SetDeletedAt(*t)
	}
	return mgc
}

// SetID sets the "id" field.
func (mgc *MatchesGatewayCreate) SetID(i int) *MatchesGatewayCreate {
	mgc.mutation.SetID(i)
	return mgc
}

// Mutation returns the MatchesGatewayMutation object of the builder.
func (mgc *MatchesGatewayCreate) Mutation() *MatchesGatewayMutation {
	return mgc.mutation
}

// Save creates the MatchesGateway in the database.
func (mgc *MatchesGatewayCreate) Save(ctx context.Context) (*MatchesGateway, error) {
	return withHooks(ctx, mgc.sqlSave, mgc.mutation, mgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mgc *MatchesGatewayCreate) SaveX(ctx context.Context) *MatchesGateway {
	v, err := mgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mgc *MatchesGatewayCreate) Exec(ctx context.Context) error {
	_, err := mgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgc *MatchesGatewayCreate) ExecX(ctx context.Context) {
	if err := mgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mgc *MatchesGatewayCreate) check() error {
	if _, ok := mgc.mutation.CompetitionName(); !ok {
		return &ValidationError{Name: "competition_name", err: errors.New(`ent: missing required field "MatchesGateway.competition_name"`)}
	}
	if _, ok := mgc.mutation.SeasonStartDate(); !ok {
		return &ValidationError{Name: "season_start_date", err: errors.New(`ent: missing required field "MatchesGateway.season_start_date"`)}
	}
	if _, ok := mgc.mutation.MatchDate(); !ok {
		return &ValidationError{Name: "match_date", err: errors.New(`ent: missing required field "MatchesGateway.match_date"`)}
	}
	if _, ok := mgc.mutation.HomeTeamName(); !ok {
		return &ValidationError{Name: "home_team_name", err: errors.New(`ent: missing required field "MatchesGateway.home_team_name"`)}
	}
	if _, ok := mgc.mutation.HomeTeamShortName(); !ok {
		return &ValidationError{Name: "home_team_short_name", err: errors.New(`ent: missing required field "MatchesGateway.home_team_short_name"`)}
	}
	if _, ok := mgc.mutation.HomeTeamLogo(); !ok {
		return &ValidationError{Name: "home_team_logo", err: errors.New(`ent: missing required field "MatchesGateway.home_team_logo"`)}
	}
	if _, ok := mgc.mutation.AwayTeamName(); !ok {
		return &ValidationError{Name: "away_team_name", err: errors.New(`ent: missing required field "MatchesGateway.away_team_name"`)}
	}
	if _, ok := mgc.mutation.AwayTeamShortName(); !ok {
		return &ValidationError{Name: "away_team_short_name", err: errors.New(`ent: missing required field "MatchesGateway.away_team_short_name"`)}
	}
	if _, ok := mgc.mutation.AwayTeamLogo(); !ok {
		return &ValidationError{Name: "away_team_logo", err: errors.New(`ent: missing required field "MatchesGateway.away_team_logo"`)}
	}
	if _, ok := mgc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "MatchesGateway.status"`)}
	}
	if _, ok := mgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MatchesGateway.created_at"`)}
	}
	if _, ok := mgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MatchesGateway.updated_at"`)}
	}
	return nil
}

func (mgc *MatchesGatewayCreate) sqlSave(ctx context.Context) (*MatchesGateway, error) {
	if err := mgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	mgc.mutation.id = &_node.ID
	mgc.mutation.done = true
	return _node, nil
}

func (mgc *MatchesGatewayCreate) createSpec() (*MatchesGateway, *sqlgraph.CreateSpec) {
	var (
		_node = &MatchesGateway{config: mgc.config}
		_spec = sqlgraph.NewCreateSpec(matchesgateway.Table, sqlgraph.NewFieldSpec(matchesgateway.FieldID, field.TypeInt))
	)
	if id, ok := mgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mgc.mutation.CompetitionName(); ok {
		_spec.SetField(matchesgateway.FieldCompetitionName, field.TypeString, value)
		_node.CompetitionName = value
	}
	if value, ok := mgc.mutation.SeasonStartDate(); ok {
		_spec.SetField(matchesgateway.FieldSeasonStartDate, field.TypeTime, value)
		_node.SeasonStartDate = value
	}
	if value, ok := mgc.mutation.MatchDate(); ok {
		_spec.SetField(matchesgateway.FieldMatchDate, field.TypeTime, value)
		_node.MatchDate = value
	}
	if value, ok := mgc.mutation.HomeTeamName(); ok {
		_spec.SetField(matchesgateway.FieldHomeTeamName, field.TypeString, value)
		_node.HomeTeamName = value
	}
	if value, ok := mgc.mutation.HomeTeamShortName(); ok {
		_spec.SetField(matchesgateway.FieldHomeTeamShortName, field.TypeString, value)
		_node.HomeTeamShortName = value
	}
	if value, ok := mgc.mutation.HomeTeamLogo(); ok {
		_spec.SetField(matchesgateway.FieldHomeTeamLogo, field.TypeString, value)
		_node.HomeTeamLogo = value
	}
	if value, ok := mgc.mutation.AwayTeamName(); ok {
		_spec.SetField(matchesgateway.FieldAwayTeamName, field.TypeString, value)
		_node.AwayTeamName = value
	}
	if value, ok := mgc.mutation.AwayTeamShortName(); ok {
		_spec.SetField(matchesgateway.FieldAwayTeamShortName, field.TypeString, value)
		_node.AwayTeamShortName = value
	}
	if value, ok := mgc.mutation.AwayTeamLogo(); ok {
		_spec.SetField(matchesgateway.FieldAwayTeamLogo, field.TypeString, value)
		_node.AwayTeamLogo = value
	}
	if value, ok := mgc.mutation.HomeScore(); ok {
		_spec.SetField(matchesgateway.FieldHomeScore, field.TypeInt32, value)
		_node.HomeScore = value
	}
	if value, ok := mgc.mutation.AwayScore(); ok {
		_spec.SetField(matchesgateway.FieldAwayScore, field.TypeInt32, value)
		_node.AwayScore = value
	}
	if value, ok := mgc.mutation.Status(); ok {
		_spec.SetField(matchesgateway.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := mgc.mutation.CreatedAt(); ok {
		_spec.SetField(matchesgateway.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mgc.mutation.UpdatedAt(); ok {
		_spec.SetField(matchesgateway.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mgc.mutation.DeletedAt(); ok {
		_spec.SetField(matchesgateway.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	return _node, _spec
}

// MatchesGatewayCreateBulk is the builder for creating many MatchesGateway entities in bulk.
type MatchesGatewayCreateBulk struct {
	config
	err      error
	builders []*MatchesGatewayCreate
}

// Save creates the MatchesGateway entities in the database.
func (mgcb *MatchesGatewayCreateBulk) Save(ctx context.Context) ([]*MatchesGateway, error) {
	if mgcb.err != nil {
		return nil, mgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mgcb.builders))
	nodes := make([]*MatchesGateway, len(mgcb.builders))
	mutators := make([]Mutator, len(mgcb.builders))
	for i := range mgcb.builders {
		func(i int, root context.Context) {
			builder := mgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MatchesGatewayMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mgcb *MatchesGatewayCreateBulk) SaveX(ctx context.Context) []*MatchesGateway {
	v, err := mgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mgcb *MatchesGatewayCreateBulk) Exec(ctx context.Context) error {
	_, err := mgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mgcb *MatchesGatewayCreateBulk) ExecX(ctx context.Context) {
	if err := mgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
